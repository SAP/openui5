{
	"$schema": "http://json-schema.org/draft-06/schema#",
	"$id": "http://schemas.sap.com/sapui5/designtime/api.json/1.0",
	"title": "Schema for api.json files",
	"description": "Schema that describes the structure of the api.json files that the 'sapui5-jsdoc3' template can generate for each UI5 library",
	"definitions": {
		"libraryVersion": {
			"type": "string",
			"pattern": "^\\d+(\\.\\d+(\\.\\d+([.-][a-zA-Z0-9_-]+)?)?)?$"
		},
		"moduleName": {
			"type": "string",
			"description": "( package '/' )* name",
			"pattern": "^([a-zA-Z_][a-zA-Z0-9_.$]*/)*[a-zA-Z_][a-zA-Z0-9_.\\-$]*$"
		},
		"typeName": {
			"description": "The name of a single type",
			"type": "string"
		},
		"typeExpression": {
			"description": "A type expression (e.g. union, structure, function signature)",
			"type": "string"
		},
		"since": {
			"description": "Version with which the documented entity has been introduced the first time, no matter in what state it has been introduced",
			"$ref": "#/definitions/libraryVersion"
		},
		"experimental": {
			"description": "Describes whether the documented entity is still experimental and should not be used in productive apps. The since attribute describes since when the library is in that state, it must be equal or higher than the since version of the entity, but not higher than the current version of the whole delivery unit.",
			"type": "object",
			"properties": {
				"since": {
					"$ref": "#/definitions/libraryVersion"
				},
				"text": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"deprecated": {
			"description": "If the entity has been deprecated, this element should contain information about when and why this happened and should describe any potential alternatives",
			"type": "object",
			"properties": {
				"since": {
					"$ref": "#/definitions/libraryVersion"
				},
				"text": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"example": {
			"type": "object",
			"properties": {
				"caption": {
					"type": "string"
				},
				"text": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"exception": {
			"description": "With this element, a callable (constructor, method) can document the exceptions that may occur during its execution",
			"type": "object",
			"properties": {
				"type": {
					"$ref": "#/definitions/typeName"
				},
				"description": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"reference": {
			"description": "references to internal or external sources of information that are related to the documented entity. References can be URLs, absolute or relative JSDoc symbol names. Relative JSDoc symbols usually are meant to be relative to the documented entity",
			"type": "string"
		},
		"nestedProperties": {
			"type": "object",
			"additionalProperties": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1
					},
					"type": {
						"$ref": "#/definitions/typeExpression"
					},
					"parameterProperties": {
						"$ref": "#/definitions/nestedProperties"
					},
					"description": {
						"type": "string"
					},
					"optional": {
						"type": "boolean",
						"default": false
					},
					"defaultValue": {
					},
					"since": {
						"$ref": "#/definitions/since"
					},
					"experimental": {
						"$ref": "#/definitions/experimental"
					},
					"deprecated": {
						"$ref": "#/definitions/deprecated"
					}
				},
				"additionalProperties": false,
				"required": [
					"name",
					"type"
				]
			}
		},
		"enum-property": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"static": {
					"type": "boolean"
				},
				"type": {
					"$ref": "#/definitions/typeName"
				},
				"value": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "integer"
						},
						{
							"type": "boolean"
						}
					]
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"typedef-property": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"static": {
					"type": "boolean"
				},
				"type": {
					"$ref": "#/definitions/typeExpression"
				},
				"optional": {
					"type": "boolean"
				},
				"properties": {
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/typedef-property"
					}
				},
				"description": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"obj-property": {
			"description": "A property of any object-like structure like class, interface or namespace",
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1
				},
				"module": {
					"$ref": "#/definitions/moduleName"
				},
				"export": {
					"type": "string"
				},
				"resource": {
					"type": "string"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"static": {
					"type": "boolean"
				},
				"type": {
					"$ref": "#/definitions/typeExpression"
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"obj-callable-parameter": {
			"description": "A positional parameter of a callable (a method or a function. Note: in contrast to ES6 classes, the constructor also counts as a callable in UI5's api.json).",
			"type": "object",
			"properties": {
				"name": {
					"description": "Name of the parameter",
					"type": "string",
					"minLength": 1
				},
				"type": {
					"description": "Type of the parameter, can be a simple type name or a JSDoc type expression",
					"$ref": "#/definitions/typeExpression"
				},
				"optional": {
					"description": "Whether the parameter is optional. Should only be used in a way that is compatible with ES6, that is, only trailing parameters can be declared optional",
					"type": "boolean",
					"default": false
				},
				"omissible": {
					"description": "Whether a non-trailing parameter can be omitted from a call. This implies that the implementation does some parameter shifting.",
					"type": "boolean",
					"default": false
				},
				"repeatable": {
					"description": "Whether the parameter is a rest parameter. Only the last parameter in a signature can be a rest parameter",
					"type": "boolean",
					"default": false
				},
				"defaultValue": {
					"description": "The default value that is used for the parameter when it is omitted in a call."
				},
				"parameterProperties": {
					"description": "Nested properties of the parameter. Should only occur for parameters of type 'object'",
					"$ref": "#/definitions/nestedProperties"
				},
				"description": {
					"description": "Documentation for the parameter, corresponds to the content of a @desc tag in JSdoc or to the leading text before any JSDoc tag",
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				}
			},
			"additionalProperties": false,
			"required": [
				"name",
				"type"
			]
		},
		"obj-constructor": {
			"type": "object",
			"properties": {
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"typeParameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/typeParameter"
					}
				},
				"parameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/obj-callable-parameter"
					}
				},
				"throws": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/exception"
					}
				},
				"description": {
					"type": "string"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				}
			},
			"additionalProperties": false,
			"required": [
			]
		},
		"typeParameter": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/typeExpression"
				},
				"default": {
					"type": "string"
				}
			},
			"required": [
				"name"
			],
			"additionalProperties": false
		},
		"returnValue": {
			"type": "object",
			"properties": {
				"type": {
					"$ref": "#/definitions/typeExpression"
				},
				"description": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": [
			]
		},
		"obj-method": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"static": {
					"type": "boolean"
				},
				"typeParameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/typeParameter"
					}
				},
				"parameters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/obj-callable-parameter"
					}
				},
				"returnValue": {
					"$ref": "#/definitions/returnValue"
				},
				"throws": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/exception"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				},
				"ui5-metamodel": {
					"type": "boolean",
					"default": false
				},
				"tsSkip": {
					"description": "Whether the method should be omitted from the TypeScript declaration files",
					"type": "boolean",
					"default": false
				}
			},
			"required": [
				"name"
			]
		},
		"obj-method-propertyNames": {
			"enum": [
				"name",
				"visibility",
				"allowedFor",
				"static",
				"typeParameters",
				"returnValue",
				"parameters",
				"throws",
				"description",
				"since",
				"experimental",
				"deprecated",
				"examples",
				"references",
				"ui5-metamodel",
				"tsSkip"
			]
		},
		"obj-event": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"minLength": 1
				},
				"module": {
					"$ref": "#/definitions/moduleName"
				},
				"resource": {
					"type": "string"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"static": {
					"type": "boolean"
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"minLength": 1
							},
							"type": {
								"$ref": "#/definitions/typeExpression"
							},
							"parameterProperties": {
								"$ref": "#/definitions/nestedProperties"
							},
							"description": {
								"type": "string"
							},
							"since": {
								"$ref": "#/definitions/since"
							},
							"experimental": {
								"$ref": "#/definitions/experimental"
							},
							"deprecated": {
								"$ref": "#/definitions/deprecated"
							}
						},
						"additionalProperties": false,
						"required": [
							"name",
							"type"
						]
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-settingName": {
			"description": "Name of a managed setting, limited by the regular expression '_*[a-z][a-zA-Z0-9_]*'.",
			"type": "string",
			"pattern": "_*[a-z][a-zA-Z0-9_]*"
		},
		"ui5-specialSetting": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"type": {
					"oneOf": [
						{
							"$ref": "#/definitions/typeName"
						}
					],
					"default": "string"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"restricted",
						"hidden"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"methods": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-property": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"type": {
					"description": "The type shown in the documentation and in TypeScript signatures; should be a subtype of the `dataType`",
					"oneOf": [
						{
							"$ref": "#/definitions/typeExpression"
						}
					],
					"default": "string"
				},
				"dataType": {
					"description": "The name of the DataType instance to use for validation",
					"oneOf": [
						{
							"$ref": "#/definitions/typeName"
						}
					],
					"default": "string"
				},
				"defaultValue": {
				},
				"group": {
					"type": "string"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"restricted",
						"hidden"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"bindable": {
					"type": "boolean",
					"default": false
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"methods": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-aggregation": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"singularName": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"type": {
					"oneOf": [
						{
							"$ref": "#/definitions/typeName"
						}
					],
					"default": "sap.ui.core.Control"
				},
				"altTypes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"cardinality": {
					"type": "string",
					"enum": [
						"0..1",
						"0..n"
					],
					"default": "0..n"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"restricted",
						"hidden"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"bindable": {
					"type": "boolean",
					"default": false
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"methods": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"dnd": {
					"anyOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"draggable": {
									"type": "boolean"
								},
								"droppable": {
									"type": "boolean"
								},
								"layout": {
									"type": "string",
									"enum": [
										"Vertical",
										"Horizontal"
									],
									"default": "Vertical"
								}
							},
							"additionalProperties": false
						}
					]
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-association": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"singularName": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"type": {
					"oneOf": [
						{
							"$ref": "#/definitions/typeName"
						}
					],
					"default": "sap.ui.core.Control"
				},
				"cardinality": {
					"type": "string",
					"enum": [
						"0..1",
						"0..n"
					],
					"default": "0..1"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"restricted",
						"hidden"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"methods": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-event": {
			"type": "object",
			"properties": {
				"name": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"restricted",
						"hidden"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"parameters": {
					"type": "object",
					"additionalProperties": {
						"type": "object",
						"properties": {
							"name": {
								"$ref": "#/definitions/ui5-settingName"
							},
							"type": {
								"$ref": "#/definitions/typeExpression"
							},
							"description": {
								"type": "string"
							},
							"since": {
								"$ref": "#/definitions/since"
							},
							"experimental": {
								"$ref": "#/definitions/experimental"
							},
							"deprecated": {
								"$ref": "#/definitions/deprecated"
							}
						},
						"additionalProperties": false,
						"required": [
							"name",
							"type"
						]
					}
				},
				"allowPreventDefault": {
					"type": "boolean",
					"default": false
				},
				"enableEventBubbling": {
					"type": "boolean",
					"default": false
				},
				"methods": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"name"
			]
		},
		"ui5-metadata": {
			"type": "object",
			"properties": {
				"stereotype": {
					"type": "string",
					"enum": [
						"object",
						"element",
						"control",
						"component",
						"library",
						"controller",
						"controllerextension",
						"template",
						"webcomponent"
					]
				},
				"specialSettings": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ui5-specialSetting"
					}
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ui5-property"
					}
				},
				"defaultProperty": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"aggregations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ui5-aggregation"
					}
				},
				"defaultAggregation": {
					"$ref": "#/definitions/ui5-settingName"
				},
				"associations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ui5-association"
					}
				},
				"events": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ui5-event"
					}
				},
				"dnd": {
					"anyOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"draggable": {
									"type": "boolean",
									"default": false
								},
								"droppable": {
									"type": "boolean",
									"default": false
								}
							},
							"additionalProperties": false
						}
					]
				},
				"annotations": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"namespace": {
								"type": "string"
							},
							"target": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"annotation": {
								"type": "string"
							},
							"defaultValue": {
							},
							"appliesTo": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"description": {
								"type": "string"
							},
							"since": {
								"$ref": "#/definitions/since"
							},
							"experimental": {
								"$ref": "#/definitions/experimental"
							},
							"deprecated": {
								"$ref": "#/definitions/deprecated"
							}
						},
						"additionalProperties": false,
						"required": [
							"name"
						]
					}
				},
				"designtime": {
					"type": [
						"boolean",
						"string"
					],
					"default": false
				},
				"metadataClass": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": [

			]
		},
		"symbol": {
			"$comment": "Note that 'examples' is not used for the symbol kind 'class', but this has not been modeled to reduce the schema's complexity",
			"type": "object",
			"properties": {
				"kind": {
					"type": "string",
					"enum": [
						"namespace",
						"class",
						"interface",
						"enum",
						"typedef",
						"function"
					]
				},
				"name": {
					"type": "string",
					"minLength": 1
				},
				"basename": {
					"type": "string",
					"minLength": 1
				},
				"resource": {
					"type": "string"
				},
				"module": {
					"$ref": "#/definitions/moduleName"
				},
				"export": {
					"type": "string"
				},
				"static": {
					"type": "boolean"
				},
				"visibility": {
					"type": "string",
					"enum": [
						"public",
						"protected",
						"private",
						"restricted"
					],
					"default": "public"
				},
				"allowedFor": {
					"$comment": "Only present if visibility is 'restricted'",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"since": {
					"$ref": "#/definitions/since"
				},
				"experimental": {
					"$ref": "#/definitions/experimental"
				},
				"deprecated": {
					"$ref": "#/definitions/deprecated"
				},
				"examples": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/example"
					}
				},
				"references": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/reference"
					}
				}
			}
		},
		"symbol-propertyNames": {
			"enum": [
				"kind",
				"name",
				"basename",
				"resource",
				"module",
				"export",
				"static",
				"visibility",
				"allowedFor",
				"description",
				"since",
				"experimental",
				"deprecated",
				"examples",
				"references"
			]
		},
		"typedef-symbol": {
			"description": "",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"anyOf": [
						{
							"$comment": "A typedef for a type alias",
							"type": "object",
							"properties": {
								"kind": {
									"enum": [
										"typedef"
									]
								},
								"final": {
									"type": "boolean"
								},
								"type": {
									"$ref": "#/definitions/typeExpression"
								}
							},
							"propertyNames": {
								"anyOf": [
									{
										"$ref": "#/definitions/symbol-propertyNames"
									},
									{
										"enum": [
											"final",
											"type"
										]
									}
								]
							},
							"required": [
								"type"
							]
						},
						{
							"$comment": "A typedef for a structure type",
							"type": "object",
							"properties": {
								"kind": {
									"enum": [
										"typedef"
									]
								},
								"extends": {
									"$ref": "#/definitions/typeName"
								},
								"properties": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/typedef-property"
									}
								}
							},
							"propertyNames": {
								"anyOf": [
									{
										"$ref": "#/definitions/symbol-propertyNames"
									},
									{
										"enum": [
											"extends",
											"properties"
										]
									}
								]
							},
							"required": [
								"properties"
							]
						},
						{
							"$comment": "A typedef for a callback type",
							"type": "object",
							"properties": {
								"kind": {
									"enum": [
										"typedef"
									]
								},
								"parameters": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/obj-callable-parameter"
									}
								},
								"returnValue": {
									"type": "object",
									"properties": {
										"type": {
											"$ref": "#/definitions/typeExpression"
										},
										"description": {
											"type": "string"
										}
									},
									"additionalProperties": false,
									"required": [

									]
								},
								"throws": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/exception"
									}
								}
							},
							"propertyNames": {
								"anyOf": [
									{
										"$ref": "#/definitions/symbol-propertyNames"
									},
									{
										"enum": [
											"parameters",
											"returnValue",
											"throws"
										]
									}
								]
							}
						}
					]
				}
			]
		},
		"namespace-symbol": {
			"$comment": "This schema describes a normal JavaScript namespace with properties and methods",
			"description": "Namespaces can have the common symbol properties and extend another symbol",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"enum": [
								"namespace"
							]
						},
						"extends": {
							"type": "string"
						},
						"properties": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-property"
							}
						},
						"methods": {
							"type": "array",
							"items": {
								"$comment": "Modules can contribute methods to namespaces declared in other modules (declaration merging). Methods in namespaces therefore can have module,export and reosufce properties",
								"allOf": [
									{
										"$ref": "#/definitions/obj-method"
									},
									{
										"type": "object",
										"properties": {
											"resource": {
												"type": "string"
											},
											"module": {
												"$ref": "#/definitions/moduleName"
											},
											"export": {
												"type": "string"
											}
										},
										"propertyNames": {
											"anyOf": [
												{
													"$ref": "#/definitions/obj-method-propertyNames"
												},
												{
													"enum": [
														"resource",
														"module",
														"export"
													]
												}
											]
										}
									}
								]
							}
						},
						"events": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-event"
							}
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"enum": [
									"extends",
									"properties",
									"methods",
									"events"
								]
							}
						]
					}
				}
			]
		},
		"datatype-symbol": {
			"$comment": "A special kind of namespace that represents a UI5 DataType instance (should be migrated to a typedef in future)",
			"description": "Namespaces can have the common symbol properties and extend another symbol",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"enum": [
								"namespace"
							]
						},
						"final": {
							"type": "boolean"
						},
						"ui5-metamodel": {
							"type": "boolean"
						},
						"ui5-metadata": {
							"type": "object",
							"properties": {
								"stereotype": {
									"type": "string",
									"enum": [
										"datatype"
									]
								},
								"basetype": {
									"$comment": "The name of the DataType instance that this type inherits from, defaults to 'string'",
									"type": "string"
								},
								"pattern": {
									"$comment": "A regular expression that limits the valid values for a string type",
									"type": "string"
								},
								"range": {
									"$comment": "Value range for numeric types",
									"type": "object",
									"properties": {
										"minExclusive": {
											"type": "integer"
										},
										"maxInclusive": {
											"type": "integer"
										},
										"minInclusive": {
											"type": "integer"
										},
										"maxExclusive": {
											"type": "integer"
										}
									},
									"additionalProperties": false
								}
							},
							"additionalProperties": false
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"enum": [
									"final",
									"ui5-metamodel",
									"ui5-metadata"
								]
							}
						]
					},
					"required": [
						"ui5-metadata"
					]
				}
			]
		},
		"interface-symbol": {
			"description": "Interfaces can have the common symbol properties and extend another symbol",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"enum": [
								"interface"
							]
						},
						"extends": {
							"$ref": "#/definitions/typeName"
						},
						"ui5-metamodel": {
							"type": "boolean",
							"default": false
						},
						"methods": {
							"type": "array",
							"items": {
								"$comment": "Interface methods can be marked as optional",
								"allOf": [
									{
										"$ref": "#/definitions/obj-method"
									},
									{
										"type": "object",
										"properties": {
											"optional": {
												"type": "boolean",
												"default": false
											}
										},
										"propertyNames": {
											"anyOf": [
												{
													"$ref": "#/definitions/obj-method-propertyNames"
												},
												{
													"enum": [
														"optional"
													]
												}
											]
										}
									}
								]
							}
						},
						"events": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-event"
							}
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"enum": [
									"extends",
									"ui5-metamodel",
									"methods",
									"events"
								]
							}
						]
					}
				}
			]
		},
		"enum-symbol": {
			"description": "An enum has the standard symbol properties and may contain a set of properties",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"enum": [
								"enum"
							]
						},
						"ui5-metamodel": {
							"type": "boolean",
							"default": false
						},
						"properties": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/enum-property"
							}
						},
						"ui5-metadata": {
							"type": "object",
							"properties": {
								"stereotype": {
									"type": "string",
									"enum": [
										"enum"
									]
								}
							},
							"additionalProperties": false
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"enum": [
									"ui5-metamodel",
									"properties",
									"ui5-metadata"
								]
							}
						]
					}
				}
			]
		},
		"class-symbol": {
			"description": "A class is the basic building block of our user interfaces; it is a reusable entity with properties, events, methods, and relations. The most important relations are aggregations to other elements, and in this way a tree structure of elements can be created. Note that the term 'control' is used both for the individual instance (object) and for the type (class) of all such instances; sometimes the distinction will be made explicit, sometimes it becomes clear from the context.",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"enum": [
								"class"
							]
						},
						"extends": {
							"type": "string",
							"description": "any other class, control or element type, incl. the predefined types sap.ui.core/Element and sap.ui.core/Control"
						},
						"implements": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "interfaces that this class implements"
						},
						"abstract": {
							"type": "boolean",
							"default": "false"
						},
						"final": {
							"type": "boolean",
							"default": "false"
						},
						"ui5-metadata": {
							"$ref": "#/definitions/ui5-metadata"
						},
						"ui5-metamodel": {
							"type": "boolean",
							"default": false
						},
						"hideconstructor": {
							"type": "boolean"
						},
						"constructor": {
							"$ref": "#/definitions/obj-constructor"
						},
						"properties": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-property"
							}
						},
						"events": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-event"
							}
						},
						"methods": {
							"type": "array",
							"items": {
								"allOf": [
									{
										"$ref": "#/definitions/obj-method"
									},
									{
										"type": "object",
										"properties": {
											"optional": {
												"type": "boolean",
												"default": false
											}
										},
										"propertyNames": {
											"anyOf": [
												{
													"$ref": "#/definitions/obj-method-propertyNames"
												},
												{
													"enum": [
														"optional"
													]
												}
											]
										}
									}
								]
							}
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"enum": [
									"kind",
									"extends",
									"implements",
									"abstract",
									"final",
									"ui5-metadata",
									"ui5-metamodel",
									"hideconstructor",
									"constructor",
									"properties",
									"events",
									"methods"
								]
							}
						]
					}
				}
			]
		},
		"function-symbol": {
			"description": "A function can be a top-level symbol when exported from a module",
			"allOf": [
				{
					"$ref": "#/definitions/symbol"
				},
				{
					"$ref": "#/definitions/obj-method"
				},
				{
					"type": "object",
					"properties": {
						"kind": {
							"type": "string",
							"enum": [
								"function"
							]
						},
						"properties": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/obj-property"
							}
						}
					},
					"propertyNames": {
						"anyOf": [
							{
								"$ref": "#/definitions/symbol-propertyNames"
							},
							{
								"$ref": "#/definitions/obj-method-propertyNames"
							},
							{
								"enum": [
									"properties"
								]
							}
						]
					}
				}
			]
		},
		"concrete-symbol": {
			"oneOf": [
				{
					"$ref": "#/definitions/class-symbol"
				},
				{
					"$ref": "#/definitions/datatype-symbol"
				},
				{
					"$ref": "#/definitions/enum-symbol"
				},
				{
					"$ref": "#/definitions/function-symbol"
				},
				{
					"$ref": "#/definitions/interface-symbol"
				},
				{
					"$ref": "#/definitions/namespace-symbol"
				},
				{
					"$ref": "#/definitions/typedef-symbol"
				}
			]
		}
	},
	"type": "object",
	"properties": {
		"$schema-ref": {
			"description": "A reference to this schema to make the structure of the file obvious.",
			"type": "string",
			"enum": [
				"http://schemas.sap.com/sapui5/designtime/api.json/1.0"
			]
		},
		"library": {
			"type": "string",
			"minLength": 1
		},
		"version": {
			"$ref": "#/definitions/libraryVersion"
		},
		"symbols": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/concrete-symbol"
			}
		}
	},
	"additionalProperties": false,
	"required": [
		"$schema-ref"
	]
}
