import CheckBox from "sap/ui/commons/CheckBox";
import Core from "sap/ui/core/Core";
import coreLibrary from "sap/ui/core/library";
import ValueStateSupport from "sap/ui/core/ValueStateSupport";
var element, errorText, warningText, successText;
QUnit.test("Element Creation", function (assert) {
    element = new CheckBox();
    assert.ok(element, "element must have been created");
});
QUnit.test("Value State texts", function (assert) {
    var rb = Core.getLibraryResourceBundle("sap.ui.core");
    errorText = rb.getText("VALUE_STATE_ERROR");
    warningText = rb.getText("VALUE_STATE_WARNING");
    successText = rb.getText("VALUE_STATE_SUCCESS");
    assert.ok(errorText.length > 4, "There should be some error text available");
    assert.ok(warningText.length > 4, "There should be some warning text available");
    assert.ok(successText.length > 4, "There should be some success text available");
});
QUnit.test("getAdditionalText() with sap.ui.core.Element", function (assert) {
    var result = ValueStateSupport.getAdditionalText(element);
    assert.equal(result, null, "text should not be returned when there is no special state");
    result = ValueStateSupport.getAdditionalText(null);
    assert.equal(result, null, "text should not be returned when there is no special state");
    element.setValueState(coreLibrary.ValueState.Error);
    result = ValueStateSupport.getAdditionalText(element);
    assert.equal(result, errorText, "text should be the error text when there is the error state");
    element.setValueState(coreLibrary.ValueState.Warning);
    result = ValueStateSupport.getAdditionalText(element);
    assert.equal(result, warningText, "text should be the warning text when there is the warning state");
    element.setValueState(coreLibrary.ValueState.Success);
    result = ValueStateSupport.getAdditionalText(element);
    assert.equal(result, successText, "text should be the success text when there is the success state");
    element.setValueState(coreLibrary.ValueState.None);
    result = ValueStateSupport.getAdditionalText(element);
    assert.equal(result, null, "text should not be returned when there is no special state");
});
QUnit.test("getAdditionalText() with sap.ui.core.ValueState", function (assert) {
    var result = ValueStateSupport.getAdditionalText("Hello");
    assert.equal(result, null, "text should not be returned when there is no special state");
    result = ValueStateSupport.getAdditionalText(coreLibrary.ValueState.Error);
    assert.equal(result, errorText, "text should be the error text when there is the error state");
    result = ValueStateSupport.getAdditionalText(coreLibrary.ValueState.Warning);
    assert.equal(result, warningText, "text should be the warning text when there is the warning state");
    result = ValueStateSupport.getAdditionalText(coreLibrary.ValueState.Success);
    assert.equal(result, successText, "text should be the success text when there is the success state");
    result = ValueStateSupport.getAdditionalText(coreLibrary.ValueState.None);
    assert.equal(result, null, "text should not be returned when there is no special state");
});
QUnit.test("With tooltip", function (assert) {
    element.setValueState(coreLibrary.ValueState.None);
    var result = ValueStateSupport.enrichTooltip(element, "test");
    assert.equal(result, "test", "tooltip should remain unchanged when there is no special state");
    element.setValueState(coreLibrary.ValueState.Error);
    result = ValueStateSupport.enrichTooltip(element, "test");
    assert.equal(result, "test - " + errorText, "tooltip should have the error text when there is the error state");
    element.setValueState(coreLibrary.ValueState.Warning);
    result = ValueStateSupport.enrichTooltip(element, "test");
    assert.equal(result, "test - " + warningText, "tooltip should have the warning text when there is the warning state");
    element.setValueState(coreLibrary.ValueState.Success);
    result = ValueStateSupport.enrichTooltip(element, "test");
    assert.equal(result, "test - " + successText, "tooltip should have the success text when there is the success state");
    element.setValueState(coreLibrary.ValueState.None);
    result = ValueStateSupport.enrichTooltip(element, "test");
    assert.equal(result, "test", "tooltip should remain unchanged when there is no special state");
});
QUnit.test("With no tooltip", function (assert) {
    var result = ValueStateSupport.enrichTooltip(element, null);
    assert.equal(result, null, "tooltip should remain empty when there is no special state");
    element.setValueState(coreLibrary.ValueState.Error);
    result = ValueStateSupport.enrichTooltip(element, null);
    assert.equal(result, errorText, "tooltip should be the error text when there is the error state");
    element.setValueState(coreLibrary.ValueState.Warning);
    result = ValueStateSupport.enrichTooltip(element, null);
    assert.equal(result, warningText, "tooltip should be the warning text when there is the warning state");
    element.setValueState(coreLibrary.ValueState.Success);
    result = ValueStateSupport.enrichTooltip(element, null);
    assert.equal(result, successText, "tooltip should be the success text when there is the success state");
    element.setValueState(coreLibrary.ValueState.None);
    result = ValueStateSupport.enrichTooltip(element, null);
    assert.equal(result, null, "tooltip should remain empty when there is no special state");
});