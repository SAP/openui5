import Log from "sap/base/Log";
import uid from "sap/base/util/uid";
import ColumnListItem from "sap/m/ColumnListItem";
import CustomListItem from "sap/m/CustomListItem";
import FlexBox from "sap/m/FlexBox";
import _MessageStrip from "sap/m/MessageStrip";
import Text from "sap/m/Text";
import Device from "sap/ui/Device";
import EventProvider from "sap/ui/base/EventProvider";
import SyncPromise from "sap/ui/base/SyncPromise";
import Controller from "sap/ui/core/mvc/Controller";
import View from "sap/ui/core/mvc/View";
import Filter from "sap/ui/model/Filter";
import FilterOperator from "sap/ui/model/FilterOperator";
import Sorter from "sap/ui/model/Sorter";
import OperationMode from "sap/ui/model/odata/OperationMode";
import AnnotationHelper from "sap/ui/model/odata/v4/AnnotationHelper";
import ODataListBinding from "sap/ui/model/odata/v4/ODataListBinding";
import ODataModel from "sap/ui/model/odata/v4/ODataModel";
import ValueListType from "sap/ui/model/odata/v4/ValueListType";
import TestUtils from "sap/ui/test/TestUtils";
import XMLHelper from "sap/ui/util/XMLHelper";
var sClassName = "sap.ui.model.odata.v4.lib._V2MetadataConverter", rCountTrue = /[?&]\$count=true/, sDefaultLanguage = sap.ui.getCore().getConfiguration().getLanguage(), fnFireEvent = EventProvider.prototype.fireEvent, sInvalidModel = "/invalid/model/", sODCB = "sap.ui.model.odata.v4.ODataContextBinding", sODLB = "sap.ui.model.odata.v4.ODataListBinding", sODPrB = "sap.ui.model.odata.v4.ODataPropertyBinding", sSalesOrderService = "/sap/opu/odata4/sap/zui5_testv4/default/sap/zui5_epm_sample/0002/", sTeaBusi = "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/", rTop = /&\$top=(\d+)/, rTransientPredicate = /\(\$uid=[-\w]+\)/g;
function assertIndices(assert, aContexts, aExpectedIndices) {
    aContexts.forEach(function (oContext, i) {
        assert.strictEqual(oContext.getIndex(), i);
        assert.strictEqual(oContext.iIndex, aExpectedIndices[i]);
    });
}
function checkCanceled(assert, oPromise) {
    return oPromise.then(mustFail(assert), function (oError) {
        assert.ok(oError instanceof Error && oError.canceled, "canceled error expected");
    });
}
function createAggregationModel(mModelParameters) {
    return createModel("/aggregation/", mModelParameters);
}
function createError(oErrorResponse, iHttpStatus, dRetryAfter) {
    var oError;
    iHttpStatus = iHttpStatus || 500;
    oError = new Error("Communication error: " + iHttpStatus + " ");
    if (oErrorResponse) {
        oError.error = Object.assign({
            code: "CODE",
            message: "Request intentionally failed"
        }, oErrorResponse);
    }
    oError.retryAfter = dRetryAfter;
    oError.status = iHttpStatus;
    return oError;
}
function createErrorInsideBatch(oErrorResponse, iHttpStatus) {
    var oError = new Error("n/a");
    oError.$insideBatch = true;
    oError.error = Object.assign({
        code: "CODE",
        message: "Request intentionally failed"
    }, oErrorResponse);
    oError.status = iHttpStatus || 500;
    return oError;
}
function createModel(sServiceUrl, mModelParameters) {
    var mDefaultParameters = {
        operationMode: OperationMode.Server,
        serviceUrl: sServiceUrl,
        synchronizationMode: "None"
    };
    return new ODataModel(Object.assign(mDefaultParameters, mModelParameters));
}
function createSalesOrdersModel(mModelParameters) {
    return createModel(sSalesOrderService, mModelParameters);
}
function createSpecialCasesModel(mModelParameters) {
    return createModel("/special/cases/", mModelParameters);
}
function createTeaBusiModel(mModelParameters) {
    return createModel(sTeaBusi, mModelParameters);
}
function doTestXMLTemplating(assert, oXMLPreprocessorConfig, sTemplate, sView) {
    var that = this;
    function _normalizeXml(sXml) {
        sXml = sXml.replace(/ xmlns.*?=".*?"/g, "").replace(/ \/>/g, "/>").replace(/\t/g, "");
        return sXml;
    }
    sView = sView.replace(/\t/g, "");
    return this.createView(assert, sTemplate, undefined, undefined, { xml: oXMLPreprocessorConfig }).then(function () {
        assert.strictEqual(_normalizeXml(XMLHelper.serialize(that.oView._xContent)), _normalizeXml(XMLHelper.serialize(xml(sView))));
    });
}
function getBindingContextPath(oManagedObject) {
    return oManagedObject.getBindingContext().getPath();
}
function getPath(oContext) {
    return oContext.getPath();
}
function mustFail(assert) {
    return function () {
        assert.ok(false, "Unexpected success");
    };
}
function prepareTestForCreateOnRelativeBinding(oTest, assert) {
    var oModel = createTeaBusiModel({ updateGroupId: "update" }), sView = "<FlexBox id=\"form\" binding=\"{path : '/TEAMS(\\'42\\')',\tparameters : {$expand : {TEAM_2_EMPLOYEES : {$select : 'ID,Name'}}}}\">\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"id\" text=\"{ID}\"/>\t\t<Text id=\"text\" text=\"{Name}\"/>\t</Table></FlexBox>";
    oTest.expectRequest("TEAMS('42')?$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
        TEAM_2_EMPLOYEES: [
            { ID: "2", Name: "Frederic Fall" }
        ]
    }).expectChange("id", ["2"]).expectChange("text", ["Frederic Fall"]);
    return oTest.createView(assert, sView, oModel);
}
function resolveLater(vValue, iDelay) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            try {
                resolve(typeof vValue === "function" ? vValue() : vValue);
            }
            catch (e) {
                reject(e);
            }
        }, iDelay === undefined ? 5 : iDelay);
    });
}
function testViewStart(sTitle, sView, mResponseByRequest, mValueByControl, vModel, fnAssert) {
    QUnit.test(sTitle, function (assert) {
        var sControlId, sRequest, that = this;
        function expectChanges(mValueByControl) {
            for (sControlId in mValueByControl) {
                that.expectChange(sControlId, mValueByControl[sControlId]);
            }
        }
        for (sRequest in mResponseByRequest) {
            this.expectRequest(sRequest, mResponseByRequest[sRequest]);
        }
        if (Array.isArray(mValueByControl)) {
            mValueByControl.forEach(expectChanges);
        }
        else {
            expectChanges(mValueByControl);
        }
        if (typeof vModel === "string") {
            vModel = this[vModel]();
        }
        if (fnAssert) {
            fnAssert.call(this);
        }
        return this.createView(assert, sView, vModel);
    });
}
function testXMLTemplating(sTitle, oXMLPreprocessorConfig, sTemplate, sView) {
    QUnit.test(sTitle, function (assert) {
        return doTestXMLTemplating.call(this, assert, oXMLPreprocessorConfig, sTemplate, sView);
    });
}
function xml(sViewXML) {
    var oDocument, oParseError;
    oDocument = XMLHelper.parse("<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:plugins=\"sap.m.plugins\"" + " xmlns:t=\"sap.ui.table\"" + " xmlns:template=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1\">" + sViewXML + "</mvc:View>", "application/xml");
    oParseError = XMLHelper.getParseError(oDocument);
    if (oParseError.errorCode) {
        throw new Error("Parse error: " + JSON.stringify(oParseError));
    }
    xmlConvertMTables(oDocument);
    xmlConvertGridTables(oDocument);
    return oDocument;
}
function xmlConvertGridTables(oDocument) {
    var oChildNode, aChildNodes, oColumn, oElement, i, j, aTableElements, oTemplate;
    aTableElements = oDocument.getElementsByTagNameNS("sap.ui.table", "Table");
    for (i = aTableElements.length - 1; i >= 0; i -= 1) {
        oElement = aTableElements[i];
        aChildNodes = oElement.childNodes;
        for (j = aChildNodes.length - 1; j >= 0; j -= 1) {
            oChildNode = aChildNodes[j];
            if (oChildNode.nodeType === Node.ELEMENT_NODE && oChildNode.localName !== "Column") {
                oColumn = document.createElementNS("sap.ui.table", "Column");
                oElement.insertBefore(oColumn, oChildNode);
                oElement.removeChild(oChildNode);
                oTemplate = document.createElementNS("sap.ui.table", "template");
                oColumn.appendChild(oTemplate);
                oTemplate.appendChild(oChildNode);
            }
        }
    }
}
function xmlConvertMTables(oDocument) {
    var aControls, oChildNode, aChildNodes, iColumnCount, aColumnNodes, oColumnsElement, oElement, bHasColumns, bHasListItem, i, j, k, aTableElements;
    aTableElements = oDocument.getElementsByTagNameNS("sap.m", "Table");
    iColumnCount = 0;
    for (i = aTableElements.length - 1; i >= 0; i -= 1) {
        oElement = aTableElements[i];
        aControls = [];
        aChildNodes = oElement.childNodes;
        for (j = aChildNodes.length - 1; j >= 0; j -= 1) {
            oChildNode = aChildNodes[j];
            switch (oChildNode.nodeName) {
                case "columns":
                    bHasColumns = true;
                    break;
                case "dependents": break;
                case "items": throw new Error("Do not use <items> in sap.m.Table");
                case "ColumnListItem":
                    aColumnNodes = oChildNode.childNodes;
                    bHasListItem = true;
                    for (k = aColumnNodes.length - 1; k >= 0; k -= 1) {
                        if (aColumnNodes[k].nodeType === Node.ELEMENT_NODE) {
                            iColumnCount += 1;
                        }
                    }
                    break;
                default: if (oChildNode.nodeType === Node.ELEMENT_NODE) {
                    oElement.removeChild(oChildNode);
                    aControls.unshift(oChildNode);
                    iColumnCount += 1;
                }
            }
        }
        if (iColumnCount) {
            if (bHasColumns) {
                throw new Error("Do not use <columns> in sap.m.Table");
            }
            if (aControls.length) {
                if (bHasListItem) {
                    throw new Error("Do not use controls w/ and w/o <ColumnListItem>" + " in sap.m.Table");
                }
                oColumnsElement = document.createElementNS("sap.m", "ColumnListItem");
                for (j = 0; j < aControls.length; j += 1) {
                    oColumnsElement.appendChild(aControls[j]);
                }
                oElement.appendChild(oColumnsElement);
            }
            oColumnsElement = oDocument.createElementNS("sap.m", "columns");
            while (iColumnCount > 0) {
                oColumnsElement.appendChild(oDocument.createElementNS("sap.m", "Column"));
                iColumnCount -= 1;
            }
            oElement.appendChild(oColumnsElement);
        }
    }
}
QUnit.module("sap.ui.model.odata.v4.ODataModel.integration", {
    beforeEach: function () {
        sap.ui.getCore().getConfiguration().setLanguage("en-US");
        this.useFakeServer({
            "/aggregation/$metadata": { source: "odata/v4/data/metadata_aggregation.xml" },
            "/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/$metadata": { source: "model/GWSAMPLE_BASIC.metadata.xml" },
            "/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/annotations.xml": { source: "model/GWSAMPLE_BASIC.annotations.xml" },
            "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/$metadata": { source: "odata/v4/data/metadata.xml" },
            "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/$metadata?sap-client=123": { source: "odata/v4/data/metadata.xml" },
            "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/$metadata?c1=a&c2=b": { source: "odata/v4/data/metadata.xml" },
            "/sap/opu/odata4/IWBEP/TEA/default/iwbep/tea_busi_product/0001/$metadata": { source: "odata/v4/data/metadata_tea_busi_product.xml" },
            "/sap/opu/odata4/IWBEP/TEA/default/iwbep/tea_busi_product/0001/$metadata?c1=a&c2=b": { source: "odata/v4/data/metadata_tea_busi_product.xml" },
            "/sap/opu/odata/IWFND/RMTSAMPLEFLIGHT/$metadata": { source: "model/RMTSAMPLEFLIGHT.metadata.xml" },
            "/sap/opu/odata4/sap/zui5_testv4/default/iwbep/common/0001/$metadata": { source: "odata/v4/data/metadata_codelist.xml" },
            "/sap/opu/odata4/sap/zui5_testv4/default/sap/zui5_epm_sample/0002/$metadata": { source: "odata/v4/data/metadata_zui5_epm_sample.xml" },
            "/sap/opu/odata4/sap/zui5_testv4/default/sap/zui5_epm_sample/0002/$metadata?sap-client=123": { source: "odata/v4/data/metadata_zui5_epm_sample.xml" },
            "/sap/opu/odata4/sap/zui5_testv4/f4/sap/d_pr_type-fv/0001;ps=%27default-zui5_epm_sample-0002%27;va=%27com.sap.gateway.default.zui5_epm_sample.v0002.ET-PRODUCT.TYPE_CODE%27/$metadata": { source: "odata/v4/data/VH_ProductTypeCode.xml" },
            "/special/cases/$metadata": { source: "odata/v4/data/metadata_special_cases.xml" },
            "/special/cases/$metadata?sap-client=123": { source: "odata/v4/data/metadata_special_cases.xml" },
            "/special/countryoforigin/$metadata": { source: "odata/v4/data/metadata_countryoforigin.xml" },
            "/special/CurrencyCode/$metadata": { source: "odata/v4/data/metadata_CurrencyCode.xml" },
            "/special/Price/$metadata": { source: "odata/v4/data/metadata_Price.xml" }
        });
        this.oLogMock = this.mock(Log);
        this.oLogMock.expects("warning").withExactArgs(sinon.match.string, "LegacyParametersGet", "sap.ui.support", sinon.match.func).atLeast(0);
        this.oLogMock.expects("error").never();
        this.iBatchNo = 0;
        this.mChanges = {};
        this.aExpectedCanceledErrors = [];
        this.aExpectedEvents = [];
        this.rIgnoredCanceledErrors = null;
        this.mIgnoredChanges = {};
        this.mIsListByControlId = {};
        this.mListChanges = {};
        this.aMessages = [];
        this.iPendingResponses = 0;
        this.aRequests = [];
        this._oSandbox.stub(Device.resize, "height").value(1000);
    },
    afterEach: function (assert) {
        var that = this;
        function getGroupLocks() {
            return (that.oModel && that.oModel.oRequestor.aLockedGroupLocks || []).filter(function (oGroupLock) {
                return oGroupLock.isLocked();
            });
        }
        function cleanup() {
            if (that.oView) {
                that.oView.destroy();
            }
            if (that.oModel) {
                that.oModel.destroy();
            }
            sap.ui.getCore().getConfiguration().setLanguage(sDefaultLanguage);
        }
        if (getGroupLocks().length) {
            return resolveLater(function () {
                getGroupLocks().forEach(function (oGroupLock) {
                    assert.ok(false, "GroupLock remained: " + oGroupLock + "\n" + oGroupLock.sStack);
                });
                cleanup();
            });
        }
        EventProvider.prototype.fireEvent = fnFireEvent;
        cleanup();
    },
    addToForm: function (oForm, sPropertyPath, assert) {
        var sId = "id" + sPropertyPath.replace("/", "_"), oText = new Text({
            id: this.oView.createId(sId),
            text: "{" + sPropertyPath + "}"
        });
        this.setFormatter(assert, oText, sId);
        oForm.addItem(oText);
        return sId;
    },
    addToTable: function (oTable, sPropertyPath, assert) {
        var sId = "id" + sPropertyPath.replace("/", "_"), bRelative = oTable.getBinding("items").isRelative(), oTemplate = oTable.getBindingInfo("items").template, oText = new Text({
            id: this.oView.createId(sId),
            text: "{" + sPropertyPath + "}"
        });
        this.setFormatter(assert, oText, sId, true);
        oTemplate.addCell(oText);
        delete oTable.getBindingInfo("items").template;
        oTable.bindItems(Object.assign({}, oTable.getBindingInfo("items"), { suspended: !bRelative, template: oTemplate }));
        return sId;
    },
    checkFinish: function (assert) {
        var sControlId, aExpectedValuesPerRow, i;
        if (this.aRequests.length || this.iPendingResponses || this.aExpectedCanceledErrors.length) {
            return;
        }
        for (sControlId in this.mChanges) {
            if (!this.hasOnlyOptionalChanges(sControlId)) {
                if (this.mChanges[sControlId].length) {
                    return;
                }
                delete this.mChanges[sControlId];
            }
        }
        for (sControlId in this.mListChanges) {
            aExpectedValuesPerRow = this.mListChanges[sControlId];
            for (i in aExpectedValuesPerRow) {
                if (aExpectedValuesPerRow[i].length) {
                    return;
                }
                delete aExpectedValuesPerRow[i];
            }
            delete this.mListChanges[sControlId];
        }
        if (sap.ui.getCore().getUIDirty() || this.oModel.aPrerenderingTasks || sap.ui.getCore().getMessageManager().getMessageModel().getObject("/").length < this.aMessages.length) {
            setTimeout(this.checkFinish.bind(this, assert), 10);
        }
        else if (this.resolve) {
            this.resolve();
            this.resolve = null;
        }
    },
    checkMessages: function (assert) {
        var aCurrentMessages = sap.ui.getCore().getMessageManager().getMessageModel().getObject("/").map(function (oMessage) {
            var aTargets = oMessage.getTargets().map(function (sTarget) {
                return sTarget.replace(rTransientPredicate, "($uid=...)");
            });
            return {
                code: oMessage.getCode(),
                descriptionUrl: oMessage.getDescriptionUrl(),
                message: oMessage.getMessage(),
                persistent: oMessage.getPersistent(),
                targets: aTargets,
                technical: oMessage.getTechnical(),
                technicalDetails: oMessage.getTechnicalDetails(),
                type: oMessage.getType()
            };
        }).sort(compareMessages), aExpectedMessages = this.aMessages.slice().sort(compareMessages);
        function compareMessages(oMessage1, oMessage2) {
            return oMessage1.message.localeCompare(oMessage2.message);
        }
        aExpectedMessages.forEach(function (oExpectedMessage, i) {
            if (i < aCurrentMessages.length && !("technicalDetails" in oExpectedMessage)) {
                delete aCurrentMessages[i].technicalDetails;
            }
        });
        if (this.aMessages.bHasMatcher) {
            var oMatcher = sinon.match(aExpectedMessages);
            assert.ok(oMatcher.test(aCurrentMessages), oMatcher.message);
        }
        else {
            assert.deepEqual(aCurrentMessages, aExpectedMessages, this.aMessages.length + " expected messages in message manager");
        }
    },
    checkMoreButton: function (assert, sExpected) {
        assert.strictEqual(this.oView.byId("listReport-trigger").getDomRef().innerText.replace(/\s/g, ""), "More" + sExpected, "check More button: " + sExpected);
    },
    checkResetInvalidDataState: function (assert, fnGetResetable) {
        var oModel = createTeaBusiModel({ updateGroupId: "update" }), sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"age\" text=\"{AGE}\"/></FlexBox>", that = this;
        this.expectRequest("EMPLOYEES('2')", { AGE: 32 }).expectChange("age", "32");
        return this.createView(assert, sView, oModel).then(function () {
            var oBinding = that.oView.byId("age").getBinding("text"), fnFormatter = oBinding.fnFormatter;
            delete oBinding.fnFormatter;
            assert.throws(function () {
                oBinding.setExternalValue("bad");
            });
            assert.ok(oBinding.getDataState().isControlDirty());
            oBinding.fnFormatter = fnFormatter;
            that.expectChange("age", "32");
            fnGetResetable(that.oView).resetChanges();
            return that.waitForChanges(assert);
        });
    },
    checkValue: function (assert, sValue, sControlId, vRow) {
        var sExpectedValue, aExpectedValues = vRow === undefined ? this.mChanges[sControlId] : this.mListChanges[sControlId] && this.mListChanges[sControlId][vRow], sVisibleId = vRow === undefined ? sControlId : sControlId + "[" + vRow + "]";
        if (!aExpectedValues || !aExpectedValues.length) {
            if (!(sControlId in this.mIgnoredChanges && sValue === null)) {
                assert.ok(false, sVisibleId + ": " + JSON.stringify(sValue) + " (unexpected)");
            }
        }
        else {
            sExpectedValue = aExpectedValues.shift();
            if (sValue !== sExpectedValue || vRow === undefined || typeof vRow !== "number" || vRow < 10) {
                assert.strictEqual(sValue, sExpectedValue, sVisibleId + ": " + JSON.stringify(sValue));
            }
        }
        this.checkFinish(assert);
    },
    checkValueState: function (assert, vControl, sState, sText) {
        var oControl = typeof vControl === "string" ? this.oView.byId(vControl) : vControl;
        return resolveLater(function () {
            assert.strictEqual(oControl.getValueState(), sState, oControl.getId() + ": value state: " + oControl.getValueState());
            assert.strictEqual(oControl.getValueStateText(), sText, oControl.getId() + ": value state text: " + oControl.getValueStateText());
        });
    },
    consumeExpectedRequest: function (oActualRequest) {
        var oExpectedRequest, i;
        for (i = 0; i < this.aRequests.length; i += 1) {
            oExpectedRequest = this.aRequests[i];
            if (oExpectedRequest.url === oActualRequest.url) {
                this.aRequests.splice(i, 1);
                return oExpectedRequest;
            }
        }
        return this.aRequests.shift();
    },
    createKeepAliveScenario: function (assert, bDropFromCollection, fnOnBeforeDestroy) {
        var oContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"listReport\" growing=\"true\" growingThreshold=\"2\" items=\"{path : '/SalesOrderList',\t\tparameters : {$count : true}, \t\tfilters : {path : 'GrossAmount', operator : 'LE', value1 : 150}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/></Table><FlexBox id=\"objectPage\">\t<Text id=\"objectPageGrossAmount\" text=\"{GrossAmount}\"/>\t<Text id=\"objectPageNote\" text=\"{Note}\"/>\t<Table items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"itemPosition\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
        this.expectRequest("SalesOrderList?$count=true&$filter=GrossAmount le 150" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=2", {
            "@odata.count": "42",
            value: [{
                    "@odata.etag": "etag1",
                    GrossAmount: "123",
                    SalesOrderID: "1"
                }, {
                    "@odata.etag": "etag2",
                    GrossAmount: "149",
                    SalesOrderID: "2"
                }]
        }).expectChange("id", ["1", "2"]).expectChange("grossAmount", ["123.00", "149.00"]).expectChange("objectPageGrossAmount").expectChange("objectPageNote").expectChange("itemPosition", []);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("listReport");
            oContext = oTable.getItems()[0].getBindingContext();
            that.expectChange("objectPageGrossAmount", "123.00").expectRequest("SalesOrderList('1')?$select=Note", {
                "@odata.etag": "etag1",
                Note: "Before refresh"
            }).expectChange("objectPageNote", "Before refresh").expectRequest("SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100", {
                value: [{
                        ItemPosition: "0010",
                        SalesOrderID: "1"
                    }]
            }).expectChange("itemPosition", ["0010"]);
            that.oView.byId("objectPage").setBindingContext(oContext);
            oContext.setKeepAlive(true, fnOnBeforeDestroy);
            return that.waitForChanges(assert, "(1)");
        }).then(function () {
            if (bDropFromCollection) {
                that.expectRequest("SalesOrderList?$count=true&$filter=GrossAmount gt 123" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=2", {
                    "@odata.count": "27",
                    value: [{
                            "@odata.etag": "etag2",
                            GrossAmount: "149",
                            SalesOrderID: "2"
                        }, {
                            "@odata.etag": "etag3",
                            GrossAmount: "789",
                            SalesOrderID: "3"
                        }]
                }).expectChange("id", [, "3"]).expectChange("grossAmount", [, "789.00"]);
                oTable.getBinding("items").filter(new Filter("GrossAmount", FilterOperator.GT, 123));
                return that.waitForChanges(assert, "(2)");
            }
        }).then(function () {
            return oContext;
        });
    },
    createModelForV2FlightService: function (mModelParameters) {
        var oLogMock = this.oLogMock;
        ["semantics", "creatable", "creatable", "semantics", "semantics", "value-list", "value-list", "label", "label", "value-list", "value-list", "value-list", "value-list", "value-list", "value-list", "value-list", "label", "label", "supported-formats", "addressable", "value-list"].forEach(function (sAnnotation) {
            oLogMock.expects("warning").withExactArgs("Unsupported annotation 'sap:" + sAnnotation + "'", sinon.match.string, sClassName);
        });
        mModelParameters = Object.assign({}, { odataVersion: "2.0" }, mModelParameters);
        return createModel("/sap/opu/odata/IWFND/RMTSAMPLEFLIGHT/", mModelParameters);
    },
    createModelForV2SalesOrderService: function (mModelParameters) {
        var oLogMock = this.oLogMock;
        ["filterable", "sortable"].forEach(function (sAnnotation) {
            oLogMock.expects("warning").withExactArgs("Unsupported SAP annotation at a complex type in" + " '/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/$metadata'", "sap:" + sAnnotation + " at property 'GWSAMPLE_BASIC.CT_String/String'", sClassName);
        });
        mModelParameters = Object.assign({}, { odataVersion: "2.0" }, mModelParameters);
        return createModel("/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/", mModelParameters);
    },
    createThird: function () {
        this.expectChange("count", "4").expectChange("id", ["", "44", "43", "42"]).expectChange("note", ["New 3", "New 2", "New 1", "First SalesOrder"]);
        return this.oView.byId("table").getBinding("items").create({ Note: "New 3" }, true);
    },
    createTwiceSaveInBetween: function (assert) {
        var oBinding, oCreatedContext, oModel = createSalesOrdersModel({
            autoExpandSelect: true,
            updateGroupId: "update"
        }), sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
        this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    Note: "First SalesOrder",
                    SalesOrderID: "42"
                }]
        }).expectChange("count").expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
        return this.createView(assert, sView, oModel).then(function () {
            oBinding = that.oView.byId("table").getBinding("items");
            that.expectChange("count", "1");
            that.oView.byId("count").setBindingContext(oBinding.getHeaderContext());
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectChange("count", "2").expectChange("id", ["", "42"]).expectChange("note", ["New 1", "First SalesOrder"]);
            oCreatedContext = oBinding.create({ Note: "New 1" }, true);
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest({
                method: "POST",
                url: "SalesOrderList",
                payload: { Note: "New 1" }
            }, {
                Note: "New 1",
                SalesOrderID: "43"
            }).expectChange("id", ["43"]);
            return Promise.all([
                oCreatedContext.created(),
                that.oModel.submitBatch("update"),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            that.expectChange("count", "3").expectChange("id", ["", "43", "42"]).expectChange("note", ["New 2", "New 1", "First SalesOrder"]);
            oCreatedContext = oBinding.create({ Note: "New 2" }, true);
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest({
                method: "POST",
                url: "SalesOrderList",
                payload: { Note: "New 2" }
            }, {
                Note: "New 2",
                SalesOrderID: "44"
            }).expectChange("id", ["44"]);
            return Promise.all([
                oCreatedContext.created(),
                that.oModel.submitBatch("update"),
                that.waitForChanges(assert)
            ]);
        });
    },
    createSetPropertyScenario: function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('TEAM_01')}\">\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", that = this;
        this.expectRequest("TEAMS('TEAM_01')?$select=Name,Team_Id", {
            Name: "Team #1",
            Team_Id: "TEAM_01"
        }).expectChange("name", "Team #1");
        return this.createView(assert, sView, oModel).then(function () {
            return that.oView.byId("form").getObjectBinding().getBoundContext();
        });
    },
    createView: function (assert, sViewXML, oModel, oController, mPreprocessors) {
        var fnLockGroup, fnReportError, that = this;
        function checkBatch(aRequests) {
            function processRequest(iChangeSetNo, oRequest, i) {
                if (Array.isArray(oRequest)) {
                    return processRequests(oRequest, i + 1);
                }
                oRequest.$ContentID = i + "." + (iChangeSetNo - 1);
                return checkRequest(oRequest.method, oRequest.url, oRequest.headers, oRequest.body, undefined, that.iBatchNo, iChangeSetNo || i + 1, oRequest.$ContentID).catch(function (oError) {
                    if (oError.$insideBatch) {
                        return {
                            headers: Object.assign({ "Content-Type": "application/json" }, oError.headers),
                            status: oError.status,
                            body: { error: oError.error }
                        };
                    }
                    oError.resourcePath = undefined;
                    throw oError;
                }).then(function (oResponse) {
                    var mHeaders = oResponse.messages ? Object.assign({}, oResponse.headers, { "sap-messages": oResponse.messages }) : oResponse.headers;
                    return {
                        headers: mHeaders,
                        status: oResponse.status || 200,
                        responseText: JSON.stringify(oResponse.body)
                    };
                });
            }
            function processRequests(aRequests0, iChangeSetNo) {
                return Promise.all(aRequests0.map(processRequest.bind(null, iChangeSetNo))).then(function (aResponses) {
                    var iErrorIndex = aResponses.findIndex(function (oResponse) {
                        return oResponse.status >= 300;
                    });
                    if (iErrorIndex >= 0) {
                        return iChangeSetNo ? aResponses[iErrorIndex] : aResponses.slice(0, iErrorIndex + 1);
                    }
                    return aResponses;
                });
            }
            that.iBatchNo += 1;
            return processRequests(aRequests, 0);
        }
        function checkRequest(sMethod, sUrl, mHeaders, vPayload, sOriginalResourcePath, iBatchNo, iChangeSetNo, sContentID) {
            var oActualRequest = {
                method: sMethod,
                url: sUrl,
                headers: mHeaders,
                payload: typeof vPayload === "string" ? JSON.parse(vPayload) : vPayload
            }, oExpectedRequest = that.consumeExpectedRequest(oActualRequest), sIfMatchValue, oResponse, mResponseHeaders, bWaitForResponse = true;
            function checkFinish() {
                if (!that.aRequests.length && !that.iPendingResponses) {
                    setTimeout(that.checkFinish.bind(that, assert), 0);
                }
            }
            delete mHeaders["Accept"];
            delete mHeaders["Accept-Language"];
            delete mHeaders["Content-Type"];
            if (mHeaders["If-Match"] && typeof mHeaders["If-Match"] === "object") {
                sIfMatchValue = mHeaders["If-Match"]["@odata.etag"];
                if (sIfMatchValue === undefined) {
                    delete mHeaders["If-Match"];
                }
                else {
                    mHeaders["If-Match"] = sIfMatchValue;
                }
            }
            if (oExpectedRequest) {
                oResponse = oExpectedRequest.response;
                if (typeof oResponse === "function") {
                    oResponse = oResponse();
                }
                bWaitForResponse = !(oResponse && typeof oResponse.then === "function");
                mResponseHeaders = oExpectedRequest.responseHeaders;
                delete oExpectedRequest.response;
                delete oExpectedRequest.responseHeaders;
                if ("batchNo" in oExpectedRequest) {
                    oActualRequest.batchNo = iBatchNo;
                }
                if ("changeSetNo" in oExpectedRequest) {
                    oActualRequest.changeSetNo = iChangeSetNo;
                }
                if ("$ContentID" in oExpectedRequest) {
                    oActualRequest.$ContentID = sContentID;
                }
                assert.deepEqual(oActualRequest, oExpectedRequest, sMethod + " " + sUrl);
            }
            else {
                assert.ok(false, sMethod + " " + sUrl + " (unexpected)");
                oResponse = { value: [] };
                mResponseHeaders = {};
            }
            if (bWaitForResponse) {
                that.iPendingResponses += 1;
            }
            else {
                checkFinish();
            }
            return Promise.resolve(oResponse).then(function (oResponseBody) {
                if (oResponseBody instanceof Error) {
                    oResponseBody.requestUrl = that.oModel.sServiceUrl + sUrl;
                    oResponseBody.resourcePath = sOriginalResourcePath;
                    oResponseBody.headers = mResponseHeaders;
                    throw oResponseBody;
                }
                if ("ETag" in mResponseHeaders) {
                    oResponseBody["@odata.etag"] = mResponseHeaders.ETag;
                }
                return {
                    body: oResponseBody,
                    messages: mResponseHeaders["sap-messages"],
                    resourcePath: sUrl
                };
            }).finally(function () {
                if (bWaitForResponse) {
                    that.iPendingResponses -= 1;
                }
                checkFinish();
            });
        }
        function lockGroup() {
            var oError, oLock = fnLockGroup.apply(this, arguments);
            if (!oLock.sStack) {
                oError = new Error();
                if (oError.stack) {
                    oLock.sStack = oError.stack.split("\n").slice(2).join("\n");
                }
            }
            return oLock;
        }
        function reportError(sLogMessage, _sReportingClassName, oError) {
            var oExpectedError;
            if (oError.canceled) {
                oExpectedError = that.aExpectedCanceledErrors.shift();
                if (oExpectedError) {
                    assert.strictEqual(sLogMessage, oExpectedError.logMessage, "sLogMessage");
                    assert.strictEqual(oError.message, oExpectedError.errorMessage, "oError.message");
                }
                else if (!that.rIgnoredCanceledErrors || !that.rIgnoredCanceledErrors.test(oError.message)) {
                    assert.ok(false, "Unexpected canceled error:\nsLogMessage=" + sLogMessage + "\noError.message=" + oError.message);
                }
                that.checkFinish(assert);
                return;
            }
            fnReportError.apply(this, arguments);
        }
        this.oModel = oModel || createTeaBusiModel();
        if (this.oModel.submitBatch) {
            this.mock(Object.getPrototypeOf(this.oModel.oRequestor)).expects("sendBatch").atLeast(0).callsFake(checkBatch);
            this.mock(Object.getPrototypeOf(this.oModel.oRequestor)).expects("sendRequest").atLeast(0).callsFake(checkRequest);
            this.oModel.oRequestor.sendBatch = checkBatch;
            this.oModel.oRequestor.sendRequest = checkRequest;
            fnLockGroup = this.oModel.oRequestor.lockGroup;
            this.oModel.oRequestor.lockGroup = lockGroup;
            fnReportError = this.oModel.reportError;
            this.oModel.reportError = reportError;
        }
        return View.create({
            type: "XML",
            controller: oController && new (Controller.extend(uid(), oController))(),
            definition: xml(sViewXML || ""),
            preprocessors: mPreprocessors
        }).then(function (oView) {
            Object.keys(that.mChanges).forEach(function (sControlId) {
                var oControl = oView.byId(sControlId);
                if (oControl) {
                    that.setFormatter(assert, oControl, sControlId);
                }
            });
            Object.keys(that.mListChanges).forEach(function (sControlId) {
                var oControl = oView.byId(sControlId);
                if (oControl) {
                    that.setFormatter(assert, oControl, sControlId, true);
                }
            });
            oView.setModel(that.oModel);
            sap.ui.getCore().getMessageManager().registerObject(oView, true);
            oView.placeAt("qunit-fixture");
            that.oView = oView;
            return that.waitForChanges(assert, "createView");
        });
    },
    expectCanceledError: function (sLogMessage, sErrorMessage) {
        this.aExpectedCanceledErrors.push({
            logMessage: sLogMessage,
            errorMessage: sErrorMessage
        });
        return this;
    },
    expectChange: function (sControlId, vValue, sRow) {
        var aExpectations, that = this;
        function array(oObject, vProperty) {
            oObject[vProperty] = oObject[vProperty] || [];
            return oObject[vProperty];
        }
        function isList(bIsList) {
            var bSaved = that.mIsListByControlId[sControlId];
            if (that.oView && bSaved !== bIsList && bSaved !== null && bIsList !== null) {
                throw new Error(sControlId in that.mIsListByControlId ? "Inconsistent usage of array values for " + sControlId : "The first expectChange must be before createView: " + sControlId);
            }
            that.mIsListByControlId[sControlId] = bIsList;
        }
        if (arguments.length === 3) {
            isList(true);
            aExpectations = array(this.mListChanges, sControlId);
            array(aExpectations, sRow).push(vValue);
        }
        else if (Array.isArray(vValue)) {
            isList(true);
            aExpectations = array(this.mListChanges, sControlId);
            vValue.forEach(function (vRowValue, i) {
                array(aExpectations, i).push(vRowValue);
            });
        }
        else {
            isList(vValue === null ? null : false);
            aExpectations = array(this.mChanges, sControlId);
            if (arguments.length > 1) {
                aExpectations.push(vValue);
            }
        }
        return this;
    },
    expectEvents: function (assert, vExpectedEventSourcePrefix, aExpectedEvents) {
        var sExpectedEventSourcePrefix = String(vExpectedEventSourcePrefix), that = this;
        EventProvider.prototype.fireEvent = function (sEventId, mParameters) {
            var sThis = this.toString();
            if (sThis.startsWith(sExpectedEventSourcePrefix)) {
                var aDetails = [sThis, sEventId, mParameters];
                assert.deepEqual(aDetails, that.aExpectedEvents.shift(), JSON.stringify(aDetails));
            }
            return fnFireEvent.apply(this, arguments);
        };
        aExpectedEvents.forEach(function (aExpectedDetails) {
            aExpectedDetails[0] = aExpectedDetails[0] || "";
            if (!aExpectedDetails[0].startsWith(sExpectedEventSourcePrefix)) {
                aExpectedDetails[0] = sExpectedEventSourcePrefix + aExpectedDetails[0];
            }
            if (aExpectedDetails.length === 2) {
                aExpectedDetails[2] = undefined;
            }
        });
        this.aExpectedEvents = aExpectedEvents;
        return this;
    },
    expectMessages: function (aExpectedMessages, bHasMatcher) {
        this.aMessages = aExpectedMessages.map(function (oMessage) {
            var aTargets = oMessage.targets || [oMessage.target || ""], oClone = Object.assign({
                code: undefined,
                descriptionUrl: undefined,
                persistent: false,
                targets: aTargets,
                technical: false
            }, oMessage);
            if (oMessage.target && oMessage.targets) {
                throw new Error("Use either target or targets, not both!");
            }
            delete oClone.target;
            return oClone;
        });
        this.aMessages.bHasMatcher = bHasMatcher;
        return this;
    },
    expectRequest: function (vRequest, vResponse, mResponseHeaders) {
        var iCount, iLength, aMatches, iTop;
        if (typeof vRequest === "string") {
            vRequest = {
                method: "GET",
                url: vRequest
            };
        }
        vRequest.headers = vRequest.headers || {};
        vRequest.method = vRequest.method || "GET";
        vRequest.payload = vRequest.payload || undefined;
        vRequest.responseHeaders = mResponseHeaders || {};
        vRequest.response = vResponse || (vRequest.method === "GET" ? null : {});
        vRequest.url = vRequest.url.replace(/ /g, "%20");
        if (rCountTrue.test(vRequest.url) && vResponse && !(vResponse instanceof Promise)) {
            if (!("@odata.count" in vResponse)) {
                throw new Error("Missing \"@odata.count\" in response for " + vRequest.method + " " + vRequest.url);
            }
            aMatches = rTop.exec(vRequest.url);
            if (aMatches) {
                iCount = parseInt(vResponse["@odata.count"]);
                iLength = vResponse.value.length;
                iTop = parseInt(aMatches[1]);
                if (iLength !== iCount && iLength !== iTop) {
                    throw new Error("Unexpected short read?");
                }
            }
        }
        this.aRequests.push(vRequest);
        return this;
    },
    expectResets: function (oTable, iRowCount, iMissingExpanded, iMissingGroupLevelCount) {
        var mValuesById = {
            accountResponsible: null,
            amountPerSale: undefined,
            country: null,
            currency: null,
            grossAmount: undefined,
            groupLevelCount: undefined,
            isExpanded: undefined,
            isTotal: undefined,
            level: undefined,
            lifecycleStatus: null,
            localCurrency: null,
            region: null,
            salesAmount: undefined,
            salesAmountLocalCurrency: undefined,
            salesNumber: null
        }, that = this;
        function expectChange(sId) {
            var i = sId === "isExpanded" && iMissingExpanded || sId === "groupLevelCount" && iMissingGroupLevelCount || 0;
            if (!(sId in mValuesById)) {
                throw new Error("Unsupported ID: " + sId);
            }
            for (; i < iRowCount; i += 1) {
                that.expectChange(sId, mValuesById[sId], null);
            }
        }
        oTable.getColumns().map(function (oColumn) {
            var sId = oColumn.getTemplate().getId();
            return sId.slice(sId.lastIndexOf("-") + 1);
        }).forEach(expectChange);
        return this;
    },
    hasOnlyOptionalChanges: function (sControlId) {
        return this.bNullOptional && this.mChanges[sControlId].every(function (vValue) {
            return vValue === null;
        });
    },
    ignoreNullChanges: function (sControlId) {
        this.mIgnoredChanges[sControlId] = true;
        return this;
    },
    removeFromForm: function (oForm, sControlId) {
        oForm.removeItem(this.oView.createId(sControlId));
    },
    removeFromTable: function (oTable, sControlId) {
        var bRelative = oTable.getBinding("items").isRelative(), oTemplate = oTable.getBindingInfo("items").template;
        oTemplate.removeCell(this.oView.byId(sControlId));
        delete oTable.getBindingInfo("items").template;
        oTable.bindItems(Object.assign({}, oTable.getBindingInfo("items"), { suspended: !bRelative, template: oTemplate }));
    },
    setFormatter: function (assert, oControl, sControlId, bInList) {
        var oBindingInfo = oControl.getBindingInfo("text") || oControl.getBindingInfo("value"), fnOriginalFormatter = oBindingInfo.formatter, oType = oBindingInfo.type, bIsCompositeType = oType && oType.getMetadata().isA("sap.ui.model.CompositeType"), that = this;
        this.mIsListByControlId[sControlId] = !!bInList;
        oBindingInfo.formatter = function (sValue) {
            var oContext = bInList && this.getBindingContext();
            if (fnOriginalFormatter) {
                sValue = fnOriginalFormatter.apply(this, arguments);
            }
            else if (bIsCompositeType) {
                sValue = oType.formatValue.call(oType, Array.prototype.slice.call(arguments), "string");
            }
            if (!bIsCompositeType || sValue !== null) {
                that.checkValue(assert, sValue, sControlId, oContext && (oContext.getBinding ? oContext.getBinding() && oContext.getIndex() : oContext.getPath()));
            }
            return sValue;
        };
    },
    setInvalidBudgetCurrency: function (assert, sModelBudgetCurrency) {
        var oInput = this.oView.byId("budgetCurrency"), sMessage = "Enter a text with a maximum of 5 characters and spaces";
        this.expectMessages([{
                message: sMessage,
                persistent: false,
                target: this.oView.createId("budgetCurrency/value"),
                technical: false,
                type: "Error"
            }]);
        oInput.setValue("INVALID");
        assert.strictEqual(oInput.getValue(), "INVALID");
        assert.strictEqual(oInput.getBinding("value").getValue(), sModelBudgetCurrency === undefined ? "EUR" : sModelBudgetCurrency);
        return Promise.all([
            this.checkValueState(assert, oInput, "Error", sMessage),
            this.waitForChanges(assert)
        ]);
    },
    useFakeServer: function (mFixture) {
        if (this.oFakeServer) {
            this.oFakeServer.restore();
        }
        this.oFakeServer = TestUtils.useFakeServer(this._oSandbox, "sap/ui/core/qunit", mFixture, [], undefined, true);
        return this.oFakeServer;
    },
    waitForChanges: function (assert, sTitle, bNullOptional, iTimeout) {
        var oPromise, that = this;
        iTimeout = iTimeout || 3000;
        oPromise = new SyncPromise(function (resolve) {
            that.resolve = resolve;
            that.bNullOptional = bNullOptional;
            setTimeout(function () {
                if (oPromise.isPending()) {
                    assert.ok(false, "Timeout in waitForChanges" + (sTitle ? " of " + sTitle : "") + " (" + iTimeout + " ms)");
                    resolve();
                }
            }, iTimeout);
            that.checkFinish(assert);
        }).then(function () {
            var sControlId, aExpectedValuesPerRow, i, j;
            that.aRequests.forEach(function (oRequest) {
                assert.ok(false, oRequest.method + " " + oRequest.url + " (not requested)");
            });
            that.aRequests = [];
            that.aExpectedCanceledErrors.forEach(function (oError) {
                assert.ok(false, "Expected canceled error:\nsLogMessage=" + oError.logMessage + "\noError.message=" + oError.errorMessage);
            });
            that.aExpectedCanceledErrors = [];
            for (sControlId in that.mChanges) {
                if (that.hasOnlyOptionalChanges(sControlId)) {
                    delete that.mChanges[sControlId];
                    continue;
                }
                for (i in that.mChanges[sControlId]) {
                    assert.ok(false, sControlId + ": " + JSON.stringify(that.mChanges[sControlId][i]) + " (not set)");
                }
            }
            that.mChanges = {};
            for (sControlId in that.mListChanges) {
                aExpectedValuesPerRow = that.mListChanges[sControlId];
                for (i in aExpectedValuesPerRow) {
                    for (j in aExpectedValuesPerRow[i]) {
                        assert.ok(false, sControlId + "[" + i + "]: " + JSON.stringify(aExpectedValuesPerRow[i][j]) + " (not set)");
                    }
                }
            }
            that.mListChanges = {};
            assert.strictEqual(that.aExpectedEvents.length, 0, "no missing events");
            that.checkMessages(assert);
            if (sTitle) {
                assert.ok(true, "waitForChanges: Done with " + sTitle + " *".repeat(25));
            }
        });
        return oPromise;
    }
});
QUnit.test("error response: $direct (framework test)", function (assert) {
    var oModel, dRetryAfter = new Date(), sView = "<Text text=\"{/EMPLOYEES('1')/ID}\"/>";
    this.useFakeServer({
        "/sap/statistics/$metadata?sap-statistics=true": { source: "odata/v4/data/metadata.xml" }
    });
    this.mock(sap.ui.getCore().getConfiguration()).expects("getStatistics").withExactArgs().returns(true);
    oModel = createModel("/sap/statistics/", { groupId: "$direct" });
    this.oLogMock.expects("error").withArgs("Failed to read path /EMPLOYEES('1')/ID");
    this.expectRequest("EMPLOYEES('1')/ID?sap-statistics=true", createError({}, 503, dRetryAfter)).expectMessages([{
            code: "CODE",
            message: "Request intentionally failed",
            persistent: true,
            technical: true,
            technicalDetails: {
                httpStatus: 503,
                originalMessage: {
                    code: "CODE",
                    message: "Request intentionally failed"
                },
                retryAfter: dRetryAfter
            },
            type: "Error"
        }]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("error response: $batch (framework test)", function (assert) {
    var sView = "<Text text=\"{/EMPLOYEES('1')/ID}\"/><Text text=\"{/EMPLOYEES('2')/Name}\"/>";
    this.oLogMock.expects("error").withArgs("Failed to read path /EMPLOYEES('1')/ID");
    this.oLogMock.expects("error").withArgs("Failed to read path /EMPLOYEES('2')/Name");
    this.expectRequest("EMPLOYEES('1')/ID", createErrorInsideBatch()).expectRequest("EMPLOYEES('2')/Name").expectMessages([{
            code: "CODE",
            message: "Request intentionally failed",
            persistent: true,
            technical: true,
            technicalDetails: {
                httpStatus: 500,
                originalMessage: {
                    code: "CODE",
                    message: "Request intentionally failed"
                }
            },
            type: "Error"
        }]);
    return this.createView(assert, sView);
});
QUnit.test("sap-statistics for $batch", function (assert) {
    var oModel;
    this.useFakeServer({
        "HEAD /sap/statistics/?sap-statistics=true": {},
        "/sap/statistics/$metadata?sap-statistics=true": { source: "odata/v4/data/metadata.xml" }
    });
    this.mock(sap.ui.getCore().getConfiguration()).expects("getStatistics").withExactArgs().returns(true);
    oModel = createModel("/sap/statistics/", { earlyRequests: true });
    oModel.submitBatch = false;
    this.mock(oModel.oRequestor).expects("sendRequest").withArgs("POST", "$batch?sap-statistics=true").rejects();
    this.oLogMock.expects("error").withArgs("$batch failed");
    this.oLogMock.expects("error").withArgs("Failed to read path /EMPLOYEES('1')/ID");
    this.expectMessages([{
            message: "Error",
            persistent: true,
            technical: true,
            type: "Error"
        }, {
            message: "HTTP request was not processed because $batch failed",
            persistent: true,
            technical: true,
            type: "Error"
        }]);
    return this.createView(assert, "<Text text=\"{/EMPLOYEES('1')/ID}\"/>", oModel);
});
QUnit.test("error response: $batch w/ change set (framework test)", function (assert) {
    var oModel = createSalesOrdersModel(), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Input id=\"note\" value=\"{Note}\"/></Table><Text id=\"name\" text=\"{/BusinessPartnerList('1')/CompanyName}\"/>", that = this;
    this.expectRequest("SalesOrderList?$skip=0&$top=100", {
        value: [
            { SalesOrderID: "1", Note: "Note 1" },
            { SalesOrderID: "2", Note: "Note 2" }
        ]
    }).expectRequest("BusinessPartnerList('1')/CompanyName", { value: "SAP SE" }).expectChange("id", ["1", "2"]).expectChange("note", ["Note 1", "Note 2"]).expectChange("name", "SAP SE");
    return this.createView(assert, sView, oModel).then(function () {
        var aTableRows = that.oView.byId("table").getItems(), oError = createErrorInsideBatch({
            details: [{
                    code: "Code1",
                    message: "Details 1"
                }]
        });
        that.oLogMock.expects("error").withArgs("Failed to update path /SalesOrderList('1')/Note");
        that.oLogMock.expects("error").withArgs("Failed to update path /SalesOrderList('2')/Note");
        that.oLogMock.expects("error").withArgs("Failed to read path /BusinessPartnerList('1')/CompanyName");
        that.expectChange("note", ["Note 1 changed", "Note 2 changed"]).expectRequest({
            changeSetNo: 1,
            method: "PATCH",
            url: "SalesOrderList('1')",
            payload: { Note: "Note 1 changed" }
        }, oError).expectRequest({
            changeSetNo: 1,
            method: "PATCH",
            url: "SalesOrderList('2')",
            payload: { Note: "Note 2 changed" }
        }).expectRequest("BusinessPartnerList('1')/CompanyName").expectChange("name", null).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                code: "Code1",
                message: "Details 1",
                persistent: true,
                type: "None"
            }]);
        aTableRows[0].getCells()[1].getBinding("value").setValue("Note 1 changed");
        aTableRows[1].getCells()[1].getBinding("value").setValue("Note 2 changed");
        that.oView.byId("name").getBinding("text").refresh();
        return that.waitForChanges(assert);
    });
});
testViewStart("Absolute ODPB", "<Text id=\"text\" text=\"{/EMPLOYEES('2')/Name}\"/>", { "EMPLOYEES('2')/Name": { value: "Frederic Fall" } }, { text: "Frederic Fall" });
testViewStart("Absolute ODCB w/o parameters with relative ODPB", "<FlexBox binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", { "EMPLOYEES('2')": { Name: "Frederic Fall" } }, { text: "Frederic Fall" });
testViewStart("Absolute ODCB with parameters and relative ODPB", "<FlexBox binding=\"{path : '/EMPLOYEES(\\'2\\')', parameters : {$select : 'Name'}}\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", { "EMPLOYEES('2')?$select=Name": { Name: "Frederic Fall" } }, { text: "Frederic Fall" });
testViewStart("Absolute ODLB w/o parameters and relative ODPB", "<Table items=\"{/EMPLOYEES}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", { "EMPLOYEES?$skip=0&$top=100": { value: [{ Name: "Frederic Fall" }, { Name: "Jonathan Smith" }] } }, { text: ["Frederic Fall", "Jonathan Smith"] });
testViewStart("Absolute ODLB with parameters and relative ODPB", "<Table items=\"{path : '/EMPLOYEES', parameters : {$select : 'Name'}}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", { "EMPLOYEES?$select=Name&$skip=0&$top=100": { value: [{ Name: "Frederic Fall" }, { Name: "Jonathan Smith" }] } }, { text: ["Frederic Fall", "Jonathan Smith"] });
testViewStart("Absolute ODLB with Filters and Sorters with relative ODPB", "<Table items=\"{path : '/EMPLOYEES', parameters : {\t\t\t$select : 'Name',\t\t\t$filter : 'TEAM_ID eq 42',\t\t\t$orderby : 'Name desc'\t\t},\t\tfilters : {path : 'AGE', operator : 'GT', value1 : 21},\t\tsorter : {path : 'AGE'}\t}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", { "EMPLOYEES?$select=Name&$filter=AGE gt 21 and (TEAM_ID eq 42)&$orderby=AGE,Name desc&$skip=0&$top=100": { value: [{ Name: "Frederic Fall" }, { Name: "Jonathan Smith" }] } }, { text: ["Frederic Fall", "Jonathan Smith"] });
testViewStart("Absolute ODCB with parameters and relative ODLB with parameters", "<FlexBox binding=\"{path : '/EMPLOYEES(\\'2\\')', parameters : {$select : 'Name'}}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Table items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', parameters : {$select : 'Category'}}\">\t\t<Text id=\"category\" text=\"{Category}\"/>\t</Table></FlexBox>", {
    "EMPLOYEES('2')?$select=Name": { Name: "Frederic Fall" },
    "EMPLOYEES('2')/EMPLOYEE_2_EQUIPMENTS?$select=Category&$skip=0&$top=100": { value: [{ Category: "Electronics" }, { Category: "Furniture" }] }
}, { name: "Frederic Fall", category: ["Electronics", "Furniture"] });
QUnit.test("Relative ODLB created on a cache that already has its data", function (assert) {
    var sView = "<FlexBox id=\"form\"\t\tbinding=\"{path : '/TEAMS(\\'1\\')', parameters : {$expand : 'TEAM_2_EMPLOYEES'}}\">\t<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', templateShareable : true}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", oTable, that = this;
    this.expectRequest("TEAMS('1')?$expand=TEAM_2_EMPLOYEES", {
        TEAM_2_EMPLOYEES: [{
                AGE: 42,
                ID: "2",
                Name: "Frederic Fall"
            }]
    }).expectChange("age", ["42"]).expectChange("name", ["Frederic Fall"]);
    return this.createView(assert, sView).then(function () {
        var oBindingInfo;
        oTable = that.oView.byId("table");
        oBindingInfo = oTable.getBindingInfo("items");
        oTable.unbindAggregation("items");
        assert.strictEqual(oTable.getItems().length, 0);
        that.expectChange("age", ["42"]).expectChange("name", ["Frederic Fall"]);
        oTable.bindItems(oBindingInfo);
        return that.waitForChanges(assert);
    }).then(function () {
        var oType = that.oModel.getMetaModel().getUI5Type("/TEAMS('1')/TEAM_2_EMPLOYEES('2')/Name"), oTypeKeepsEmptyString;
        assert.strictEqual(oTable.getItems().length, 1);
        assert.strictEqual(oType.parseValue(""), null);
        assert.strictEqual(oTable.getItems()[0].getCells()[1].getBinding("text").getType(), oType, "cached type is used on UI already");
        oTypeKeepsEmptyString = that.oModel.getMetaModel().getUI5Type("/TEAMS('1')/TEAM_2_EMPLOYEES('2')/Name", { parseKeepsEmptyString: true });
        assert.strictEqual(oTypeKeepsEmptyString.parseValue(""), "");
        assert.strictEqual(that.oModel.getMetaModel().getUI5Type("/TEAMS('1')/TEAM_2_EMPLOYEES('2')/Name"), oType, "cached type is unchanged");
        oTypeKeepsEmptyString = that.oModel.getMetaModel().getUI5Type("/TEAMS('1')/TEAM_2_EMPLOYEES('2')/AGE", { parseKeepsEmptyString: true });
        assert.strictEqual(oTypeKeepsEmptyString.parseValue(""), null);
        assert.strictEqual(oTable.getItems()[0].getCells()[0].getBinding("text").getType(), oTypeKeepsEmptyString, "parseKeepsEmptyString ignored, type is cached and used on UI already");
    });
});
testViewStart("FunctionImport", "<FlexBox binding=\"{/GetEmployeeByID(EmployeeID='2')}\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", { "GetEmployeeByID(EmployeeID='2')": { Name: "Frederic Fall" } }, { text: "Frederic Fall" });
[false, true].forEach(function (bAutoExpandSelect) {
    var sTitle = "OLDB#requestContexts standalone, autoExpandSelect=" + bAutoExpandSelect;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: bAutoExpandSelect }), oPromise, that = this;
        return this.createView(assert, "", oModel).then(function () {
            var oBinding = that.oModel.bindList("/SalesOrderList", undefined, undefined, undefined, { $select: ["Note", "SalesOrderID"] });
            oPromise = oBinding.requestContexts(0, 3, "group").then(function (aContexts) {
                assert.deepEqual(aContexts.map(getPath), [
                    "/SalesOrderList('01')",
                    "/SalesOrderList('02')",
                    "/SalesOrderList('03')"
                ]);
            });
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=3", {
                value: [
                    { Note: "Note 01", SalesOrderID: "01" },
                    { Note: "Note 02", SalesOrderID: "02" },
                    { Note: "Note 03", SalesOrderID: "03" }
                ]
            });
            return Promise.all([
                oPromise,
                that.oModel.submitBatch("group"),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("OLDB#requestContexts standalone: submitBatch must wait", function (assert) {
    var that = this;
    return this.createView(assert).then(function () {
        var oBinding = that.oModel.bindList("/Equipments(Category='C',ID=2)/EQUIPMENT_2_PRODUCT", undefined, undefined, [new Filter("Name", FilterOperator.GE, "M")]);
        that.expectRequest("Equipments(Category='C',ID=2)/EQUIPMENT_2_PRODUCT" + "?$filter=Name ge 'M'&$skip=0&$top=3", {
            value: [
                { ID: 1 },
                { ID: 2 },
                { ID: 3 }
            ]
        });
        return Promise.all([
            oBinding.requestContexts(0, 3, "group").then(function (aContexts) {
                assert.deepEqual(aContexts.map(getPath), [
                    "/Equipments(Category='C',ID=2)/EQUIPMENT_2_PRODUCT(1)",
                    "/Equipments(Category='C',ID=2)/EQUIPMENT_2_PRODUCT(2)",
                    "/Equipments(Category='C',ID=2)/EQUIPMENT_2_PRODUCT(3)"
                ]);
            }),
            that.oModel.submitBatch("group")
        ]);
    });
});
[false, true].forEach(function (bGrowing) {
    QUnit.test("OLDB#requestContexts w/ sap.m.Table, growing=" + bGrowing, function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" growing=\"" + bGrowing + "\" growingThreshold=\"3\" items=\"{/SalesOrderList}\">\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
        if (!bGrowing) {
            oModel.setSizeLimit(3);
        }
        this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=3", {
            value: [
                { SalesOrderID: "01", Note: "Note 1" },
                { SalesOrderID: "02", Note: "Note 2" },
                { SalesOrderID: "03", Note: "Note 3" }
            ]
        }).expectChange("note", ["Note 1", "Note 2", "Note 3"]);
        return this.createView(assert, sView, oModel).then(function () {
            var oBinding;
            that.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=3&$top=9", {
                value: [
                    { SalesOrderID: "04", Note: "Note 4" },
                    { SalesOrderID: "05", Note: "Note 5" }
                ]
            });
            oTable = that.oView.byId("table");
            oBinding = oTable.getBinding("items");
            return Promise.all([
                oBinding.requestContexts(2, 10).then(function (aContexts) {
                    assert.deepEqual(aContexts.map(getPath), [
                        "/SalesOrderList('03')",
                        "/SalesOrderList('04')",
                        "/SalesOrderList('05')"
                    ]);
                }),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            if (bGrowing) {
                that.expectChange("note", [, , , "Note 4", "Note 5"]);
                oTable.requestItems();
            }
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("OLDB#requestContexts w/ sap.ui.table.Table", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    return oModel.getMetaModel().requestObject("/").then(function () {
        that.expectEvents(assert, "sap.ui.model.odata.v4.ODataListBinding: /SalesOrderList", [
            [, "change", { detailedReason: "AddVirtualContext", reason: "change" }],
            [, "dataRequested"],
            [, "change", { detailedReason: "RemoveVirtualContext", reason: "change" }],
            [, "refresh", { reason: "refresh" }],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]).expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=3", {
            value: [
                { SalesOrderID: "01", Note: "Note 1" },
                { SalesOrderID: "02", Note: "Note 2" },
                { SalesOrderID: "03", Note: "Note 3" }
            ]
        }).expectChange("note", ["Note 1", "Note 2", "Note 3"]);
        return that.createView(assert, sView, oModel);
    }).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectEvents(assert, oBinding, [
            [, "change", { reason: "change" }]
        ]).expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=3&$top=9", {
            value: [
                { SalesOrderID: "04", Note: "Note 4" },
                { SalesOrderID: "05", Note: "Note 5" }
            ]
        });
        return Promise.all([
            oBinding.requestContexts(2, 10).then(function (aContexts) {
                assert.deepEqual(aContexts.map(getPath), [
                    "/SalesOrderList('03')",
                    "/SalesOrderList('04')",
                    "/SalesOrderList('05')"
                ]);
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("note", [, , "Note 3", "Note 4", "Note 5"]);
        oTable.setFirstVisibleRow(2);
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2080228141 - autoExpandSelect & late ODLB#setContext", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<t:Table id=\"table\" rows=\"{}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectEvents(assert, "sap.ui.model.odata.v4.", []).expectChange("note", []);
    return this.createView(assert, sView, oModel).then(function () {
        return oModel.getMetaModel().requestObject("/");
    }).then(function () {
        var oBinding = that.oView.byId("table").getBinding("rows");
        that.expectEvents(assert, "sap.ui.model.odata.v4.ODataListBinding: /SalesOrderList|", [
            [, "change", { detailedReason: "AddVirtualContext", reason: "context" }],
            [, "dataRequested"],
            [, "change", { detailedReason: "RemoveVirtualContext", reason: "change" }],
            [, "refresh", { reason: "refresh" }],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]).expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=3", {
            value: [
                { SalesOrderID: "01", Note: "Note 1" },
                { SalesOrderID: "02", Note: "Note 2" },
                { SalesOrderID: "03", Note: "Note 3" }
            ]
        }).expectChange("note", ["Note 1", "Note 2", "Note 3"]);
        oBinding.setContext(oModel.createBindingContext("/SalesOrderList"));
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODCB: late property", function (assert) {
    var oFormContext, oModel = createModel(sSalesOrderService + "?sap-client=123", { autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')/SO_2_BP}\">\t<Text id=\"city\" text=\"{Address/City}\"/></FlexBox><Text id=\"longitude1\" text=\"{Address/GeoLocation/Longitude}\"/><Text id=\"longitude2\" text=\"{Address/GeoLocation/Longitude}\"/><Text id=\"longitude3\" text=\"{Address/GeoLocation/Longitude}\"/>", that = this;
    this.expectRequest("SalesOrderList('1')/SO_2_BP?sap-client=123" + "&$select=Address/City,BusinessPartnerID", {
        "@odata.etag": "etag",
        Address: {
            City: "Heidelberg"
        },
        BusinessPartnerID: "2"
    }).expectChange("city", "Heidelberg").expectChange("longitude1").expectChange("longitude2").expectChange("longitude3");
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error").withArgs("Failed to drill-down into CompanyName, invalid segment: CompanyName");
        that.expectRequest("SalesOrderList('1')/SO_2_BP?sap-client=123" + "&$select=Address/GeoLocation/Longitude,BusinessPartnerID", {
            "@odata.etag": "etag",
            Address: {
                GeoLocation: {
                    Longitude: "8.7"
                }
            },
            BusinessPartnerID: "2"
        }).expectChange("longitude1", "8.700000000000").expectChange("longitude2", "8.700000000000");
        oFormContext = that.oView.byId("form").getBindingContext();
        assert.strictEqual(oFormContext.getProperty("CompanyName"), undefined);
        that.oView.byId("longitude1").setBindingContext(oFormContext);
        that.oView.byId("longitude2").setBindingContext(oFormContext);
        return Promise.all([
            oFormContext.requestProperty("Address/GeoLocation/Longitude").then(function (sLongitude) {
                assert.strictEqual(sLongitude, "8.7");
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_BP?sap-client=123" + "&$select=BusinessPartnerID,CompanyName", {
            "@odata.etag": "etag",
            BusinessPartnerID: "2",
            CompanyName: "SAP"
        });
        return oFormContext.requestProperty("CompanyName").then(function (sValue) {
            assert.strictEqual(sValue, "SAP");
        });
    }).then(function () {
        that.expectChange("longitude3", "8.700000000000");
        that.oView.byId("longitude3").setBindingContext(oFormContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_BP?sap-client=123" + "&$select=Address/City,Address/GeoLocation/Longitude,BusinessPartnerID", {
            "@odata.etag": "etag",
            Address: {
                City: "Heidelberg",
                GeoLocation: {
                    Longitude: "8.71"
                }
            },
            BusinessPartnerID: "2"
        }).expectChange("longitude1", "8.710000000000").expectChange("longitude2", "8.710000000000").expectChange("longitude3", "8.710000000000");
        return Promise.all([
            oFormContext.requestSideEffects([{ $PropertyPath: "Address" }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2080093480", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Text id=\"id1\" text=\"{SalesOrderID}\"/>\t<FlexBox id=\"action\" binding=\"{" + sAction + "(...)}\"/></FlexBox><FlexBox id=\"result\">\t<Text id=\"id2\" text=\"{SalesOrderID}\"/>\t<FlexBox binding=\"{}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t\t<Text id=\"language\" text=\"{NoteLanguage}\"/>\t</FlexBox>\t<FlexBox binding=\"{SO_2_BP}\">\t\t<Text id=\"name\" text=\"{CompanyName}\"/>\t\t<Text id=\"legalForm\" text=\"{LegalForm}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID", { SalesOrderID: "1" }).expectChange("id1", "1").expectChange("id2").expectChange("note").expectChange("language").expectChange("name").expectChange("legalForm");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/" + sAction,
            payload: {}
        }, {
            SalesOrderID: "1"
        });
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        var oReturnValueContext = aResults[0];
        that.expectChange("id2", "1").expectRequest("SalesOrderList('1')?$select=Note,NoteLanguage,SO_2_BP" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName,LegalForm)", {
            Note: "Note #1",
            NoteLanguage: "en",
            SO_2_BP: {
                BusinessPartnerID: "2",
                CompanyName: "TECUM",
                LegalForm: "Ltd"
            }
        }).expectChange("note", "Note #1").expectChange("language", "en").expectChange("name", "TECUM").expectChange("legalForm", "Ltd");
        that.oView.byId("result").setBindingContext(oReturnValueContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2070180785", function (assert) {
    var oBinding, that = this;
    return this.createView(assert).then(function () {
        var oPromise;
        that.expectRequest("GetEmployeeByID(EmployeeID='1')");
        oBinding = that.oModel.bindContext("/GetEmployeeByID(...)");
        oBinding.setParameter("EmployeeID", "1");
        oPromise = oBinding.execute();
        oBinding.setParameter("EmployeeID", "2");
        return Promise.all([oPromise, that.waitForChanges(assert)]);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='1')");
        oBinding.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='2')");
        return Promise.all([
            oBinding.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODCB w/o cache: late property", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"outer\" binding=\"{/SalesOrderList('1')}\">\t<FlexBox id=\"inner\" binding=\"{SO_2_BP}\">\t\t<Text id=\"companyName\" text=\"{CompanyName}\"/>\t</FlexBox></FlexBox><Text id=\"legalForm\" text=\"{LegalForm}\"/>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
        SalesOrderID: "1",
        SO_2_BP: {
            BusinessPartnerID: "2",
            CompanyName: "TECUM"
        }
    }).expectChange("companyName", "TECUM").expectChange("legalForm");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_BP?$select=BusinessPartnerID,LegalForm", {
            BusinessPartnerID: "2",
            LegalForm: "Ltd"
        }).expectChange("legalForm", "Ltd");
        that.oView.byId("legalForm").setBindingContext(that.oView.byId("inner").getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(that.oView.byId("inner").getBindingContext().getProperty("LegalForm"), "Ltd");
        assert.strictEqual(that.oView.byId("outer").getObjectBinding().getBoundContext().getProperty("SO_2_BP/LegalForm"), "Ltd");
        that.expectChange("legalForm", null);
        that.oView.byId("legalForm").setBindingContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
            SalesOrderID: "1",
            SO_2_BP: {
                BusinessPartnerID: "2",
                CompanyName: "TECUM (refreshed)"
            }
        }).expectChange("companyName", "TECUM (refreshed)");
        that.oView.byId("outer").getObjectBinding().refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODLB w/o cache: late property", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<FlexBox binding=\"{/SalesOrderList('1')}\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t</Table></FlexBox><Text id=\"quantity\" text=\"{Quantity}\"/>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
        SO_2_SOITEM: [
            { ItemPosition: "0010", SalesOrderID: "1" }
        ]
    }).expectChange("position", ["0010"]).expectChange("quantity");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("SalesOrderList('1')" + "/SO_2_SOITEM(SalesOrderID='1',ItemPosition='0010')?$select=Quantity", {
            Quantity: "5"
        }).expectChange("quantity", "5.000");
        that.oView.byId("quantity").setBindingContext(oTable.getBinding("items").getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oTable.getBinding("items").getCurrentContexts()[0].getProperty("Quantity"), "5");
    });
});
QUnit.test("BCP: 2070011343", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/SalesOrderList(\\'1\\')',\t\tparameters : {$select : 'Messages,SO_2_SOITEM/Messages'}}\">\t<Text id=\"id1\" text=\"{SalesOrderID}\"/>\t<Table items=\"{SO_2_SOITEM}\">\t\t<Text text=\"{ItemPosition}\"/>\t</Table>\t<FlexBox id=\"action\" binding=\"{\t\t\tpath : '" + sAction + "(...)',\t\t\tparameters : {$$inheritExpandSelect : true}\t\t}\"/></FlexBox><FlexBox id=\"returnValue\">\t<Text id=\"id2\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/>\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=Messages,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Messages,SalesOrderID)", {
        SalesOrderID: "1",
        SO_2_SOITEM: [
            { ItemPosition: "10", SalesOrderID: "1" }
        ]
    }).expectChange("id1", "1").expectChange("id2").expectChange("note");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/" + sAction + "?$select=Messages,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Messages,SalesOrderID)",
            payload: {}
        }, {
            SalesOrderID: "1",
            SO_2_SOITEM: [
                { ItemPosition: "10", SalesOrderID: "1" }
            ]
        });
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        that.expectChange("id2", "1").expectRequest("SalesOrderList('1')?$select=Note", { Note: "Note #1" }).expectChange("note", "Note #1");
        that.oView.byId("returnValue").setBindingContext(aResults[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Messages,Note", { Note: "Note #1" });
        return Promise.all([
            that.oView.byId("returnValue").getBindingContext().requestSideEffects([{ $PropertyPath: "Messages" }, { $PropertyPath: "Note" }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM?$select=ItemPosition,Messages," + "SalesOrderID&$orderby=ItemPosition&$skip=0&$top=100", {
            value: [
                { ItemPosition: "10", SalesOrderID: "1" }
            ]
        });
        that.oView.byId("table").getBinding("items").sort(new Sorter("ItemPosition"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Messages,Note,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Messages,SalesOrderID)", {
            Note: "Note #1",
            SalesOrderID: "1",
            SO_2_SOITEM: [
                { ItemPosition: "10", SalesOrderID: "1" }
            ]
        }).expectRequest("SalesOrderList('1')/SO_2_SOITEM?$select=ItemPosition,Messages," + "SalesOrderID&$orderby=ItemPosition&$skip=0&$top=100", {
            value: [
                { ItemPosition: "10", SalesOrderID: "1" }
            ]
        });
        that.oView.byId("returnValue").getBindingContext().refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODLB: late property", function (assert) {
    var oModel = createModel(sTeaBusi + "?sap-client=123", { autoExpandSelect: true }), oRowContext, oTable, sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('1')}\">\t<Table id=\"table\" growing=\"true\" growingThreshold=\"2\"\t\t\titems=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true,\t\t\t\t$search : 'foo', $select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t<Text id=\"manager\" text=\"{EMPLOYEE_2_MANAGER/ID}\"/>\t</Table></FlexBox><Input id=\"age1\" value=\"{AGE}\"/><Text id=\"age2\" text=\"{AGE}\"/><Input id=\"team\" value=\"{EMPLOYEE_2_TEAM/TEAM_2_MANAGER/TEAM_ID}\"/><Input id=\"budget\" value=\"{EMPLOYEE_2_TEAM/Budget}\"/>", that = this;
    this.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?sap-client=123&$search=foo" + "&$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$expand=EMPLOYEE_2_MANAGER($select=ID)&$skip=0&$top=2", {
        value: [{
                "@odata.etag": "etag0",
                ID: "2",
                Name: "Frederic Fall",
                EMPLOYEE_2_MANAGER: { ID: "5" }
            }, {
                "@odata.etag": "etag0",
                ID: "3",
                Name: "Jonathan Smith",
                EMPLOYEE_2_MANAGER: { ID: "5" }
            }]
    }).expectChange("name", ["Frederic Fall", "Jonathan Smith"]).expectChange("manager", ["5", "5"]).expectChange("age1").expectChange("age2").expectChange("team").expectChange("budget");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        assert.strictEqual(oTable.getBinding("items").getCount(), undefined);
        assert.strictEqual(oTable.getBinding("items").getLength(), 12);
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES('2')?sap-client=123" + "&$select=AGE,EMPLOYEE_2_TEAM&$expand=EMPLOYEE_2_TEAM($select=Team_Id;" + "$expand=TEAM_2_MANAGER($select=ID,TEAM_ID))", {
            "@odata.etag": "etag0",
            AGE: 42,
            EMPLOYEE_2_TEAM: {
                "@odata.etag": "etag1",
                Team_Id: "1",
                TEAM_2_MANAGER: {
                    "@odata.etag": "ETag",
                    ID: "5",
                    TEAM_ID: "1"
                }
            }
        }).expectChange("age1", "42").expectChange("team", "1");
        oRowContext = oTable.getItems()[0].getBindingContext();
        that.oView.byId("age1").setBindingContext(oRowContext);
        that.oView.byId("team").setBindingContext(oRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("age1", "18").expectRequest({
            method: "PATCH",
            headers: { "If-Match": "etag0" },
            url: "EMPLOYEES('2')?sap-client=123",
            payload: { AGE: 18 }
        }, {
            "@odata.etag": "etag23",
            AGE: 18,
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "1",
                        message: "That is very young",
                        numericSeverity: 3,
                        target: "AGE",
                        transition: false
                    }]
            }
        }).expectMessages([{
                code: "1",
                message: "That is very young",
                target: "/TEAMS('1')/TEAM_2_EMPLOYEES('2')/AGE",
                type: "Warning"
            }]);
        that.oView.byId("age1").getBinding("value").setValue(18);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, "age1", "Warning", "That is very young");
    }).then(function () {
        that.expectChange("team", "changed").expectRequest({
            method: "PATCH",
            headers: { "If-Match": "ETag" },
            url: "MANAGERS('5')?sap-client=123",
            payload: { TEAM_ID: "changed" }
        });
        that.oView.byId("team").getBinding("value").setValue("changed");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES('2')/EMPLOYEE_2_TEAM?sap-client=123" + "&$select=Budget,Team_Id", {
            "@odata.etag": "etag1",
            Budget: "12.45",
            Team_Id: "1"
        }).expectChange("budget", "12.45");
        that.oView.byId("budget").setBindingContext(oRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("age2", "18");
        that.oView.byId("age2").setBindingContext(oRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?sap-client=123&$search=foo" + "&$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$expand=EMPLOYEE_2_MANAGER($select=ID)&$skip=2&$top=2", {
            value: [
                { ID: "4", Name: "Peter Burke", EMPLOYEE_2_MANAGER: { ID: "5" } }
            ]
        }).expectChange("name", [, , "Peter Burke"]).expectChange("manager", [, , "5"]);
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?sap-client=123&$select=AGE,ID,Name" + "&$filter=ID eq '2' or ID eq '3' or ID eq '4'&$top=3", {
            value: [
                { AGE: 43, ID: "2", Name: "Frederic Fall *" },
                { AGE: 29, ID: "3", Name: "Jonathan Smith *" },
                { AGE: 0, ID: "4", Name: "Peter Burke *" }
            ]
        }).expectChange("age1", "43").expectChange("age2", "43").expectChange("name", ["Frederic Fall *", "Jonathan Smith *", "Peter Burke *"]);
        return Promise.all([
            oTable.getBinding("items").getHeaderContext().requestSideEffects(["AGE", "Name"]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("age2", "29");
        oRowContext = oTable.getItems()[1].getBindingContext();
        that.oView.byId("age2").setBindingContext(oRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?sap-client=123&$select=AGE,ID,Name" + "&$filter=ID eq '2' or ID eq '3' or ID eq '4'&$top=3", {
            value: [
                { AGE: 44, ID: "2", Name: "Frederic Fall **" },
                { AGE: 30, ID: "3", Name: "Jonathan Smith **" },
                { AGE: -1, ID: "4", Name: "Peter Burke **" }
            ]
        }).expectChange("age1", "44").expectChange("age2", "30").expectChange("name", ["Frederic Fall **", "Jonathan Smith **", "Peter Burke **"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([
                { $PropertyPath: "TEAM_2_EMPLOYEES/AGE" },
                { $PropertyPath: "TEAM_2_EMPLOYEES/Name" }
            ]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODCB: requestSideEffects for nested expand", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('1')}\">\t<Text id=\"employee_id\" text=\"{ID}\"/>\t<Text id=\"team_id\" text=\"{EMPLOYEE_2_TEAM/Team_Id}\"/>\t<Text id=\"manager_id\" text=\"{EMPLOYEE_2_TEAM/TEAM_2_MANAGER/ID}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')?$select=ID&$expand=EMPLOYEE_2_TEAM($select=Team_Id;" + "$expand=TEAM_2_MANAGER($select=ID))", {
        ID: "1",
        EMPLOYEE_2_TEAM: {
            Team_Id: "2",
            TEAM_2_MANAGER: { ID: "3" }
        }
    }).expectChange("employee_id", "1").expectChange("team_id", "2").expectChange("manager_id", "3");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("EMPLOYEES('1')?$select=EMPLOYEE_2_TEAM&$expand=EMPLOYEE_2_TEAM" + "($select=Team_Id;$expand=TEAM_2_MANAGER($select=ID))", {
            EMPLOYEE_2_TEAM: {
                Team_Id: "2*",
                TEAM_2_MANAGER: { ID: "3*" }
            }
        }).expectChange("team_id", "2*").expectChange("manager_id", "3*");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([
                { $NavigationPropertyPath: "EMPLOYEE_2_EQUIPMENT" },
                { $NavigationPropertyPath: "EMPLOYEE_2_TEAM" }
            ]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: requestSideEffects for nested expand", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"employee_id\" text=\"{ID}\"/>\t<Text id=\"team_id\" text=\"{EMPLOYEE_2_TEAM/Team_Id}\"/>\t<Text id=\"manager_id\" text=\"{EMPLOYEE_2_TEAM/TEAM_2_MANAGER/ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID&$expand=EMPLOYEE_2_TEAM($select=Team_Id;" + "$expand=TEAM_2_MANAGER($select=ID))&$skip=0&$top=100", {
        value: [{
                ID: "1",
                EMPLOYEE_2_TEAM: {
                    Team_Id: "2",
                    TEAM_2_MANAGER: { ID: "3" }
                }
            }]
    }).expectChange("employee_id", ["1"]).expectChange("team_id", ["2"]).expectChange("manager_id", ["3"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("EMPLOYEES?$select=ID&$expand=EMPLOYEE_2_TEAM($select=Team_Id;" + "$expand=TEAM_2_MANAGER($select=ID))&$filter=ID eq '1'", {
            value: [{
                    ID: "1",
                    EMPLOYEE_2_TEAM: {
                        Team_Id: "2*",
                        TEAM_2_MANAGER: { ID: "3*" }
                    }
                }]
        }).expectChange("team_id", ["2*"]).expectChange("manager_id", ["3*"]);
        return Promise.all([
            that.oView.byId("table").getItems()[0].getBindingContext().requestSideEffects([
                { $NavigationPropertyPath: "EMPLOYEE_2_EQUIPMENT" },
                { $NavigationPropertyPath: "EMPLOYEE_2_TEAM" }
            ]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: absolute paths", function (assert) {
    var oBusinessPartnerContext, oModel = createModel(sSalesOrderService + "?sap-client=123", { autoExpandSelect: true }), sEntityContainer = "/com.sap.gateway.default.zui5_epm_sample.v0002.Container", oItemsTable, sView = "<Table id=\"contacts\" items=\"{/ContactList}\">\t<Text id=\"lastName\" text=\"{LastName}\"/></Table><FlexBox id=\"partner\" binding=\"{path : 'CONTACT_2_BP', parameters : {$$ownRequest : true}}\">\t<Text id=\"companyName\" text=\"{CompanyName}\"/>\t<Text id=\"webAddress\" text=\"{WebAddress}\"/></FlexBox><FlexBox id=\"order\" binding=\"{/SalesOrderList('SO1')}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Table id=\"items\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t\t<Text id=\"quantity\" text=\"{Quantity}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("ContactList?sap-client=123&$select=ContactGUID,LastName" + "&$skip=0&$top=100", {
        value: [{ ContactGUID: "guid", LastName: "Doe" }]
    }).expectChange("lastName", "Doe").expectRequest("SalesOrderList('SO1')?sap-client=123&$select=SalesOrderID", {
        SalesOrderID: "SO1"
    }).expectChange("id", "SO1").expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=GrossAmount,ItemPosition,Note,Quantity,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                GrossAmount: "42",
                ItemPosition: "0010",
                Note: "Note 0010",
                Quantity: "3",
                SalesOrderID: "SO1"
            }, {
                GrossAmount: "23",
                ItemPosition: "0020",
                Note: "Note 0020",
                Quantity: "1",
                SalesOrderID: "SO1"
            }]
    }).expectChange("grossAmount", ["42", "23"]).expectChange("note", ["Note 0010", "Note 0020"]).expectChange("quantity", ["3.000", "1.000"]).expectChange("companyName").expectChange("webAddress");
    return this.createView(assert, sView, oModel).then(function () {
        var oBusinessPartner = that.oView.byId("partner");
        that.expectRequest("ContactList(guid)/CONTACT_2_BP?sap-client=123" + "&$select=BusinessPartnerID,CompanyName,WebAddress", {
            BusinessPartnerID: "BP1",
            CompanyName: "TECUM",
            WebAddress: "www.tecum.com"
        }).expectChange("companyName", "TECUM").expectChange("webAddress", "www.tecum.com");
        oBusinessPartner.setBindingContext(that.oView.byId("contacts").getItems()[0].getBindingContext());
        oBusinessPartnerContext = oBusinessPartner.getBindingContext();
        return that.waitForChanges(assert, "get business partner");
    }).then(function () {
        that.expectRequest("ContactList(guid)/CONTACT_2_BP?sap-client=123" + "&$select=BusinessPartnerID,CompanyName,WebAddress", {
            BusinessPartnerID: "BP1",
            CompanyName: "TECUM*",
            WebAddress: "www.tecum.com*"
        }).expectChange("companyName", "TECUM*").expectChange("webAddress", "www.tecum.com*").expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=ItemPosition,Note,SalesOrderID" + "&$filter=SalesOrderID eq 'SO1' and ItemPosition eq '0010'" + " or SalesOrderID eq 'SO1' and ItemPosition eq '0020'&$top=2", {
            value: [{
                    ItemPosition: "0010",
                    Note: "Note 0010*",
                    SalesOrderID: "SO1"
                }, {
                    ItemPosition: "0020",
                    Note: "Note 0020*",
                    SalesOrderID: "SO1"
                }]
        }).expectChange("note", ["Note 0010*", "Note 0020*"]);
        return Promise.all([
            oBusinessPartnerContext.requestSideEffects([
                { $PropertyPath: "CompanyName" },
                { $PropertyPath: sEntityContainer + "/ContactList/CONTACT_2_BP/WebAddress" },
                { $PropertyPath: sEntityContainer + "/SalesOrderList/SO_2_SOITEM/Note" }
            ]),
            that.waitForChanges(assert, "(1)")
        ]);
    }).then(function () {
        that.expectRequest("ContactList(guid)/CONTACT_2_BP?sap-client=123" + "&$select=BusinessPartnerID,CompanyName", {
            BusinessPartnerID: "BP1",
            CompanyName: "TECUM*2"
        }).expectChange("companyName", "TECUM*2").expectRequest("SalesOrderList('SO1')?sap-client=123&$select=SalesOrderID", {
            SalesOrderID: "SO1"
        }).expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=GrossAmount,ItemPosition,Note,Quantity,SalesOrderID" + "&$skip=0&$top=100", {
            value: [{
                    GrossAmount: "42.1",
                    ItemPosition: "0010",
                    Note: "Note 0010*2",
                    Quantity: "4",
                    SalesOrderID: "SO1"
                }, {
                    GrossAmount: "23.1",
                    ItemPosition: "0020",
                    Note: "Note 0020*2",
                    Quantity: "2",
                    SalesOrderID: "SO1"
                }]
        }).expectChange("grossAmount", ["42.1", "23.1"]).expectChange("note", ["Note 0010*2", "Note 0020*2"]).expectChange("quantity", ["4.000", "2.000"]);
        return Promise.all([
            oBusinessPartnerContext.requestSideEffects([
                { $PropertyPath: "CompanyName" },
                { $NavigationPropertyPath: sEntityContainer + "/SalesOrderList" },
                { $NavigationPropertyPath: sEntityContainer + "/ProductList" }
            ]),
            that.waitForChanges(assert, "(2)")
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=GrossAmount,ItemPosition,SalesOrderID" + "&$filter=SalesOrderID eq 'SO1' and ItemPosition eq '0010'", {
            value: [{
                    GrossAmount: "42.2",
                    ItemPosition: "0010",
                    SalesOrderID: "SO1"
                }]
        }).expectChange("grossAmount", ["42.2"]).expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=ItemPosition,Note,Quantity,SalesOrderID" + "&$filter=SalesOrderID eq 'SO1' and ItemPosition eq '0010'" + " or SalesOrderID eq 'SO1' and ItemPosition eq '0020'&$top=2", {
            value: [{
                    ItemPosition: "0010",
                    Quantity: "5",
                    SalesOrderID: "SO1"
                }, {
                    ItemPosition: "0020",
                    Quantity: "3",
                    SalesOrderID: "SO1"
                }]
        }).expectChange("quantity", ["5.000", "3.000"]);
        oItemsTable = that.oView.byId("items");
        return Promise.all([
            oItemsTable.getItems()[0].getBindingContext().requestSideEffects([
                { $PropertyPath: "GrossAmount" },
                { $PropertyPath: "SOITEM_2_SO/SO_2_SOITEM/Note" },
                { $PropertyPath: sEntityContainer + "/SalesOrderList/SO_2_SOITEM/Quantity" }
            ]),
            that.waitForChanges(assert, "(3)")
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('SO1')/SO_2_SOITEM?sap-client=123" + "&$select=GrossAmount,ItemPosition,Note,Quantity,SalesOrderID" + "&$skip=0&$top=100", {
            value: [{
                    GrossAmount: "42.4",
                    ItemPosition: "0010",
                    Note: "Note 0010*4",
                    Quantity: "6",
                    SalesOrderID: "SO1"
                }, {
                    GrossAmount: "23.4",
                    ItemPosition: "0020",
                    Note: "Note 0020*4",
                    Quantity: "4",
                    SalesOrderID: "SO1"
                }]
        }).expectChange("grossAmount", ["42.4", "23.4"]).expectChange("note", ["Note 0010*4", "Note 0020*4"]).expectChange("quantity", ["6.000", "4.000"]);
        return Promise.all([
            oItemsTable.getItems()[0].getBindingContext().requestSideEffects([
                "GrossAmount",
                sEntityContainer + "/SalesOrderList/SO_2_SOITEM"
            ]),
            that.waitForChanges(assert, "(4)")
        ]);
    });
});
QUnit.test("ODLB: late property at nested entity", function (assert) {
    var oModel = createModel(sSalesOrderService + "?sap-client=123", { autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList('1')/SO_2_SOITEM}\">\t<Text id=\"product\" text=\"{SOITEM_2_PRODUCT/Name}\"/></Table><Text id=\"businessPartner\" text=\"{SOITEM_2_PRODUCT/PRODUCT_2_BP/CompanyName}\"/>", that = this;
    this.expectRequest("SalesOrderList('1')/SO_2_SOITEM?sap-client=123" + "&$select=ItemPosition,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=Name,ProductID)&$skip=0&$top=100", {
        value: [{
                "@odata.etag": "etag0",
                ItemPosition: "0010",
                SalesOrderID: "1",
                SOITEM_2_PRODUCT: {
                    "@odata.etag": "etag1",
                    Name: "Notebook Basic 15",
                    ProductID: "HT-1000"
                }
            }]
    }).expectChange("product", ["Notebook Basic 15"]).expectChange("businessPartner");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')" + "/SO_2_SOITEM(SalesOrderID='1',ItemPosition='0010')" + "/SOITEM_2_PRODUCT?sap-client=123&$select=ProductID" + "&$expand=PRODUCT_2_BP($select=BusinessPartnerID,CompanyName)", {
            "@odata.etag": "etag1",
            ProductID: "HT-1000",
            PRODUCT_2_BP: {
                "@odata.etag": "etag2",
                BusinessPartnerID: "0100000005",
                CompanyName: "TECUM"
            }
        }).expectChange("businessPartner", "TECUM");
        that.oView.byId("businessPartner").setBindingContext(that.oView.byId("table").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODCB: late property at nested entity", function (assert) {
    var oModel = createModel(sSalesOrderService + "?sap-client=123", { autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')/SO_2_SOITEM('0010')}\">\t<Text id=\"product\" text=\"{SOITEM_2_PRODUCT/Name}\"/></FlexBox><Text id=\"businessPartner\" text=\"{SOITEM_2_PRODUCT/PRODUCT_2_BP/CompanyName}\"/>", that = this;
    this.expectRequest("SalesOrderList('1')/SO_2_SOITEM('0010')?sap-client=123" + "&$select=ItemPosition,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=Name,ProductID)", {
        ItemPosition: "0010",
        SalesOrderID: "1",
        SOITEM_2_PRODUCT: {
            "@odata.etag": "ETag",
            Name: "Notebook Basic 15",
            ProductID: "HT-1000"
        }
    }).expectChange("product", "Notebook Basic 15").expectChange("businessPartner");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM('0010')/SOITEM_2_PRODUCT" + "?sap-client=123&$select=ProductID" + "&$expand=PRODUCT_2_BP($select=BusinessPartnerID,CompanyName)", {
            "@odata.etag": "ETag",
            ProductID: "HT-1000",
            PRODUCT_2_BP: {
                BusinessPartnerID: "0100000005",
                CompanyName: "TECUM"
            }
        }).expectChange("businessPartner", "TECUM");
        that.oView.byId("businessPartner").setBindingContext(that.oView.byId("form").getBindingContext());
        return that.waitForChanges(assert);
    });
});
[{
        error: "ETag changed",
        lateETag: "changedETag",
        lateID: "HT-1000"
    }, {
        error: "Key predicate changed from ('HT-1000') to ('HT-2000')",
        lateETag: "ETag",
        lateID: "HT-2000"
    }].forEach(function (oFixture) {
    QUnit.test("ODCB: late property at nested entity fails: " + oFixture.error, function (assert) {
        var oModel = createModel(sSalesOrderService + "?sap-client=123", { autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')/SO_2_SOITEM('0010')}\">\t<Text id=\"product\" text=\"{SOITEM_2_PRODUCT/Name}\"/></FlexBox><Text id=\"businessPartner\" text=\"{SOITEM_2_PRODUCT/PRODUCT_2_BP/CompanyName}\"/>", that = this;
        this.expectRequest("SalesOrderList('1')/SO_2_SOITEM('0010')?sap-client=123" + "&$select=ItemPosition,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=Name,ProductID)", {
            ItemPosition: "0010",
            SalesOrderID: "1",
            SOITEM_2_PRODUCT: {
                "@odata.etag": "ETag",
                Name: "Notebook Basic 15",
                ProductID: "HT-1000"
            }
        }).expectChange("product", "Notebook Basic 15").expectChange("businessPartner");
        return this.createView(assert, sView, oModel).then(function () {
            var sMessage = "GET SalesOrderList('1')/SO_2_SOITEM('0010')/SOITEM_2_PRODUCT" + "?$select=ProductID&$expand=PRODUCT_2_BP($select=BusinessPartnerID," + "CompanyName): " + oFixture.error;
            that.oLogMock.expects("error").withArgs("Failed to read path /SalesOrderList('1')/SO_2_SOITEM('0010')/" + "SOITEM_2_PRODUCT/PRODUCT_2_BP/CompanyName");
            that.expectRequest("SalesOrderList('1')/SO_2_SOITEM('0010')/SOITEM_2_PRODUCT" + "?sap-client=123&$select=ProductID" + "&$expand=PRODUCT_2_BP($select=BusinessPartnerID,CompanyName)", {
                "@odata.etag": oFixture.lateEtag,
                ProductID: oFixture.lateID,
                PRODUCT_2_BP: {
                    BusinessPartnerID: "0100000005",
                    CompanyName: "TECUM"
                }
            }).expectChange("businessPartner", null).expectMessages([{
                    "code": undefined,
                    "descriptionUrl": undefined,
                    "message": sMessage,
                    "persistent": true,
                    "target": "",
                    "technical": true,
                    "type": "Error"
                }]);
            that.oView.byId("businessPartner").setBindingContext(that.oView.byId("form").getBindingContext());
            return that.waitForChanges(assert);
        });
    });
    QUnit.test("create an entity and immediately reset changes (no UI)", function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
        return this.createView(assert, "", oModel).then(function () {
            var oListBindingWithoutUI = oModel.bindList("/SalesOrderList"), oCreatedPromise = oListBindingWithoutUI.create({}, true).created();
            assert.ok(oModel.hasPendingChanges());
            assert.ok(oListBindingWithoutUI.hasPendingChanges());
            assert.strictEqual(oListBindingWithoutUI.getLength(), 1 + 10);
            oModel.resetChanges();
            assert.notOk(oModel.hasPendingChanges());
            assert.notOk(oListBindingWithoutUI.hasPendingChanges());
            assert.strictEqual(oListBindingWithoutUI.getLength(), 0);
            return oCreatedPromise.then(mustFail(assert), function (oError) {
                assert.ok(oError.canceled);
                assert.notOk(oModel.hasPendingChanges());
                assert.notOk(oListBindingWithoutUI.hasPendingChanges());
                assert.strictEqual(oListBindingWithoutUI.getLength(), 0);
                return Promise.all([
                    checkCanceled(assert, oCreatedPromise),
                    that.waitForChanges(assert)
                ]);
            });
        });
    });
});
QUnit.test("ODCB: late property at complex type", function (assert) {
    var oModel = createModel(sSalesOrderService, { autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/BusinessPartnerList('1')/Address}\">\t<Text id=\"city\" text=\"{City}\"/></FlexBox><Text id=\"postalCode\" text=\"{PostalCode}\"/>", that = this;
    this.expectRequest("BusinessPartnerList('1')/Address?$select=City", {
        "@odata.etag": "etag",
        City: "Heidelberg"
    }).expectChange("city", "Heidelberg").expectChange("postalCode");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("BusinessPartnerList('1')/Address?$select=PostalCode", {
            "@odata.etag": "etag",
            PostalCode: "69190"
        }).expectChange("postalCode", "69190");
        that.oView.byId("postalCode").setBindingContext(that.oView.byId("form").getBindingContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODCB: read failure & message", function (assert) {
    var oError = createError({
        message: "Could not read",
        target: "Name"
    }), oModel = createTeaBusiModel({ groupId: "$direct" }), sView = "<FlexBox binding=\"{/EMPLOYEES('42')}\">\t<Input id=\"text\" value=\"{Name}\"/></FlexBox>", that = this;
    this.oLogMock.expects("error").withExactArgs("Failed to read path /EMPLOYEES('42')", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataContextBinding");
    this.oLogMock.expects("error").withExactArgs("Failed to read path /EMPLOYEES('42')/Name", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataPropertyBinding");
    this.expectRequest("EMPLOYEES('42')", oError).expectMessages([{
            code: "CODE",
            message: "Could not read",
            persistent: true,
            target: "/EMPLOYEES('42')/Name",
            technical: true,
            technicalDetails: {
                httpStatus: 500,
                originalMessage: {
                    code: "CODE",
                    message: "Could not read",
                    target: "Name"
                }
            },
            type: "Error"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "text", "Error", "Could not read");
    }).then(function () {
        that.oView.byId("text").unbindProperty("value");
        return Promise.all([
            that.checkValueState(assert, "text", "None", ""),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(that.oView.byId("text").getValue(), "");
    });
});
QUnit.test("ODPB: read failure & message", function (assert) {
    var oError = createError({
        message: "Could not read",
        target: ""
    }), oModel = createTeaBusiModel({ groupId: "$direct" }), sView = "<Input id=\"text\" value=\"{/EMPLOYEES('42')/Name}\"/>", that = this;
    this.oLogMock.expects("error").withExactArgs("Failed to read path /EMPLOYEES('42')/Name", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataPropertyBinding");
    this.expectRequest("EMPLOYEES('42')/Name", oError).expectMessages([{
            code: "CODE",
            message: "Could not read",
            persistent: true,
            target: "/EMPLOYEES('42')/Name",
            technical: true,
            type: "Error"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "text", "Error", "Could not read");
    });
});
QUnit.test("Relative ODLB inherits parent ODCB's query options on filter", function (assert) {
    var oBinding, oModel = createModel(sTeaBusi + "?c1=a&c2=b"), sView = "<FlexBox binding=\"{path : '/EMPLOYEES(\\'42\\')',\tparameters : {$expand : {EMPLOYEE_2_EQUIPMENTS : {$orderby : 'ID', $select : 'Name'}}}}\">\t<Table id=\"table\" items=\"{EMPLOYEE_2_EQUIPMENTS}\">\t\t<Text id=\"text\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('42')?c1=a&c2=b&$expand=EMPLOYEE_2_EQUIPMENTS($orderby=ID" + ";$select=Name)", {
        EMPLOYEE_2_EQUIPMENTS: [
            { Name: "Notebook Basic 15" },
            { Name: "Monitor Basic 24" },
            { Name: "Monitor Basic 28" }
        ]
    }).expectChange("text", ["Notebook Basic 15", "Monitor Basic 24", "Monitor Basic 28"]);
    return this.createView(assert, sView, oModel).then(function () {
        var sExpectedDownloadUrl = sTeaBusi + "EMPLOYEES('42')/EMPLOYEE_2_EQUIPMENTS?c1=a&c2=b&$orderby=ID&$select=Name";
        oBinding = that.oView.byId("table").getBinding("items");
        assert.strictEqual(oBinding.getDownloadUrl(), sExpectedDownloadUrl);
        return oBinding.requestDownloadUrl().then(function (sDownloadUrl) {
            assert.strictEqual(sDownloadUrl, sExpectedDownloadUrl);
        });
    }).then(function () {
        var sResourceUrl = "EMPLOYEES('42')/EMPLOYEE_2_EQUIPMENTS?$orderby=ID&$select=Name&c1=a" + "&c2=b&$filter=EQUIPMENT_2_PRODUCT/SupplierIdentifier%20eq%202";
        that.expectRequest(sResourceUrl + "&$skip=0&$top=100", {
            value: [
                { Name: "Monitor Basic 24" },
                { Name: "Monitor Basic 28" }
            ]
        }).expectChange("text", ["Monitor Basic 24", "Monitor Basic 28"]);
        oBinding.filter(new Filter("EQUIPMENT_2_PRODUCT/SupplierIdentifier", FilterOperator.EQ, 2));
        assert.throws(function () {
            oBinding.getDownloadUrl();
        }, new Error("Result pending"));
        return Promise.all([
            oBinding.requestDownloadUrl().then(function (sDownloadUrl) {
                assert.strictEqual(sDownloadUrl, sTeaBusi + sResourceUrl);
                assert.strictEqual(oBinding.getDownloadUrl(), sTeaBusi + sResourceUrl);
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Context#refresh(undefined, true)", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\"\t\titems=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tfilters : {path : 'AGE', operator : 'GT', value1 : '42'},\t\t\tsorter : {path : 'AGE'},\t\t\tparameters : {foo : 'bar'}\t\t}\">\t<Text id=\"text\" text=\"{Name}\"/>\t<Input id=\"age\" value=\"{AGE}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?foo=bar&$orderby=AGE&$filter=AGE gt 42" + "&$select=AGE,ID,Name&$skip=0&$top=100", {
        value: [
            { "@odata.etag": "ETag0", ID: "0", Name: "Frederic Fall", AGE: 70 },
            { ID: "1", Name: "Jonathan Smith", AGE: 50 },
            { ID: "2", Name: "Peter Burke", AGE: 77 }
        ]
    }).expectChange("text", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]).expectChange("age", ["70", "50", "77"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('0')?foo=bar",
            headers: { "If-Match": "ETag0" },
            payload: { AGE: 10 }
        }).expectChange("age", ["10"]);
        oTable.getItems()[0].getCells()[1].getBinding("value").setValue(10);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES?foo=bar&$filter=(AGE gt 42) and ID eq '0'" + "&$select=AGE,ID,Name", { value: [] }).expectChange("text", ["Jonathan Smith", "Peter Burke"]).expectChange("age", ["50", "77"]);
        oTable.getItems()[0].getBindingContext().refresh(undefined, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES?foo=bar&$filter=(AGE gt 42) and ID eq '1'" + "&$select=AGE,ID,Name", {
            value: [{
                    ID: "1",
                    Name: "Jonathan Smith",
                    AGE: 51
                }]
        }).expectChange("age", ["51"]);
        oTable.getItems()[0].getBindingContext().refresh(undefined, true);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Context#refresh() with messages", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oMessage1 = {
        code: "2",
        message: "Another Text",
        target: "/EMPLOYEES('1')/ID",
        type: "Warning"
    }, oResponseMessage0 = {
        code: "1",
        message: "Text",
        numericSeverity: 3,
        target: "ID",
        transition: false
    }, oResponseMessage0AfterRefresh = {
        code: "1",
        message: "Text after refresh",
        numericSeverity: 3,
        target: "ID",
        transition: false
    }, oResponseMessage1 = {
        code: "2",
        message: "Another Text",
        numericSeverity: 3,
        target: "ID",
        transition: false
    }, oTable, sView = "<Table id=\"table\"\t\titems=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}\t\t}\">\t<Input id=\"id\" value=\"{ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=100", {
        value: [{
                ID: "0",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [oResponseMessage0]
                }
            }, {
                ID: "1",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [oResponseMessage1]
                }
            }]
    }).expectChange("id", ["0", "1"]).expectMessages([{
            code: "1",
            message: "Text",
            target: "/EMPLOYEES('0')/ID",
            technicalDetails: {
                originalMessage: oResponseMessage0
            },
            type: "Warning"
        }, oMessage1]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        return Promise.all([
            that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Warning", "Text"),
            that.checkValueState(assert, oTable.getItems()[1].getCells()[0], "Warning", "Another Text")
        ]);
    }).then(function () {
        var oContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest("EMPLOYEES('0')?$select=ID,__CT__FAKE__Message/__FAKE__Messages", {
            ID: "0",
            __CT__FAKE__Message: {
                __FAKE__Messages: [oResponseMessage0AfterRefresh]
            }
        }).expectMessages([{
                code: "1",
                message: "Text after refresh",
                target: "/EMPLOYEES('0')/ID",
                type: "Warning"
            }, oMessage1]);
        oContext.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Warning", "Text after refresh");
    }).then(function () {
        return that.checkValueState(assert, oTable.getItems()[1].getCells()[0], "Warning", "Another Text");
    });
});
QUnit.test("Context#refresh() error messages", function (assert) {
    var oError = createError({
        message: "Not found",
        target: "ID"
    }, 404), oModel = createTeaBusiModel({ autoExpandSelect: true, groupId: "$direct" }), oTable, sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Input value=\"{ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID&$skip=0&$top=100", {
        value: [{ ID: "0" }]
    });
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.oLogMock.expects("error").withExactArgs("Failed to refresh entity: /EMPLOYEES('0')[0]", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataListBinding");
        that.expectRequest("EMPLOYEES('0')?$select=ID", oError).expectMessages([{
                code: "CODE",
                message: "Not found",
                persistent: true,
                target: "/EMPLOYEES('0')/ID",
                technical: true,
                type: "Error"
            }]);
        oTable.getItems()[0].getBindingContext().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Error", "Not found");
    });
});
QUnit.test("Nested ODLB: contexts deleted too early", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"rootTable\" items=\"{/SalesOrderList}\">\t<Text text=\"{SalesOrderID}\"/>\t<Table items=\"{path : 'SO_2_SOITEM', templateShareable : false}\">\t\t<Text text=\"{ItemPosition}\"/>\t</Table></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)&$skip=0&$top=100", {
        value: [{
                SalesOrderID: "1",
                SO_2_SOITEM: []
            }, {
                SalesOrderID: "2",
                SO_2_SOITEM: [
                    { ItemPosition: "0010", SalesOrderID: "2" }
                ]
            }]
    });
    return this.createView(assert, sView, oModel).then(function () {
        var oRootTable = that.oView.byId("rootTable");
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('1')"
        }).expectRequest("SalesOrderList?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)&$skip=0&$top=100", {
            value: [{
                    SalesOrderID: "2",
                    SO_2_SOITEM: [
                        { ItemPosition: "0010", SalesOrderID: "2" }
                    ]
                }]
        });
        return Promise.all([
            oRootTable.getItems()[0].getBindingContext().delete().then(function () {
                return oRootTable.getBinding("items").requestRefresh();
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Context.refresh() in a list relative to a return value context", function (assert) {
    var oTable, sView = "<FlexBox binding=\"{/SalesOrderList('1')}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<FlexBox id=\"action\" binding=\"{\t\t\tpath : 'com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm(...)',\t\t\tparameters : {$expand : {SO_2_SOITEM : {$expand : {SOITEM_2_PRODUCT : null}}}}\t\t}\"/></FlexBox><FlexBox id=\"rvc\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Input id=\"name\" value=\"{SOITEM_2_PRODUCT/Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')", { SalesOrderID: "1" }).expectChange("id", "1").expectChange("name", []);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/" + "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm" + "?$expand=SO_2_SOITEM($expand=SOITEM_2_PRODUCT)",
            payload: {}
        }, {
            SalesOrderID: "1",
            SO_2_SOITEM: [{
                    ItemPosition: "0010",
                    SalesOrderID: "1",
                    SOITEM_2_PRODUCT: {
                        Name: "Notebook Basic 15",
                        ProductID: "HT-1000"
                    }
                }]
        });
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        that.expectChange("name", ["Notebook Basic 15"]);
        that.oView.byId("rvc").setBindingContext(aResults[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1'," + "ItemPosition='0010')?$expand=SOITEM_2_PRODUCT", {
            ItemPosition: "0010",
            SalesOrderID: "1",
            SOITEM_2_PRODUCT: {
                Name: "Notebook Basic 15.1",
                ProductID: "HT-1000"
            }
        }).expectChange("name", ["Notebook Basic 15.1"]);
        oTable.getItems()[0].getBindingContext().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("name", ["Notebook Basic 15.2"]).expectRequest({
            method: "PATCH",
            url: "ProductList('HT-1000')",
            payload: { Name: "Notebook Basic 15.2" }
        });
        oTable.getItems()[0].getCells()[0].getBinding("value").setValue("Notebook Basic 15.2");
        return that.waitForChanges(assert);
    });
});
[function (oTable) {
        this.expectRequest("EMPLOYEES('0')?$select=AGE,ID,Name", { ID: "0", Name: "Frederic Fall", AGE: 70 }).expectRequest("EMPLOYEES('0')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID,Name&$skip=0&$top=100", {
            value: [{
                    Category: "Electronics",
                    ID: "1",
                    Name: "Office PC"
                }]
        });
        oTable.getItems()[0].getBindingContext().refresh();
    }, function (oTable) {
        this.expectRequest("EMPLOYEES?$select=AGE,ID,Name&$skip=0&$top=100", {
            value: [{ ID: "0", Name: "Frederic Fall", AGE: 70 }]
        }).expectRequest("EMPLOYEES('0')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID,Name&$skip=0&$top=100", {
            value: [{
                    Category: "Electronics",
                    ID: "1",
                    Name: "Office PC"
                }]
        });
        oTable.getBinding("items").refresh();
    }].forEach(function (fnRefresh, i) {
    QUnit.test("refresh: No drill-down error for deleted data #" + i, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', templateShareable : false}\">\t<Text id=\"text\" text=\"{Name}\"/>\t<Text id=\"age\" text=\"{AGE}\"/></Table><Table id=\"detailTable\" items=\"{path : 'EMPLOYEE_2_EQUIPMENTS',\t\tparameters : {$$ownRequest : true}}\">\t<Text id=\"equipmentName\" text=\"{Name}\"/></Table>", that = this;
        this.expectRequest("EMPLOYEES?$select=AGE,ID,Name&$skip=0&$top=100", {
            value: [{
                    ID: "0",
                    Name: "Frederic Fall",
                    AGE: 70
                }]
        }).expectChange("text", ["Frederic Fall"]).expectChange("age", ["70"]).expectChange("equipmentName", []);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            that.expectRequest("EMPLOYEES('0')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID,Name&$skip=0&$top=100", {
                value: [{
                        Category: "Electronics",
                        ID: "1",
                        Name: "Office PC"
                    }, {
                        Category: "Electronics",
                        ID: "2",
                        Name: "Tablet X"
                    }]
            }).expectChange("equipmentName", ["Office PC", "Tablet X"]);
            that.oView.byId("detailTable").setBindingContext(oTable.getItems()[0].getBindingContext());
            return that.waitForChanges(assert);
        }).then(function () {
            fnRefresh.call(that, oTable);
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("Absolute ODLB with sort, relative ODCB resolved on selection", function (assert) {
    var oForm, oTable, oTableBinding, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', parameters : {$expand : 'EMPLOYEE_2_MANAGER'}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table><FlexBox id=\"form\" binding=\"{EMPLOYEE_2_MANAGER}\">\t<Text id=\"id\" text=\"{ID}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES?$expand=EMPLOYEE_2_MANAGER&$skip=0&$top=100", {
        value: [
            { Name: "Jonathan Smith", EMPLOYEE_2_MANAGER: { ID: "2" } },
            { Name: "Frederic Fall", EMPLOYEE_2_MANAGER: { ID: "1" } }
        ]
    }).expectChange("id").expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
    return this.createView(assert, sView).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectRequest("EMPLOYEES?$expand=EMPLOYEE_2_MANAGER&$orderby=Name" + "&$skip=0&$top=100", {
            value: [
                { Name: "Frederic Fall", EMPLOYEE_2_MANAGER: { ID: "1" } },
                { Name: "Jonathan Smith", EMPLOYEE_2_MANAGER: { ID: "2" } }
            ]
        }).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
        oTableBinding.sort(new Sorter("Name"));
        return that.waitForChanges(assert);
    }).then(function () {
        oForm = that.oView.byId("form");
        that.expectChange("id", "2");
        oForm.setBindingContext(oTableBinding.getCurrentContexts()[1]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", "1");
        oForm.setBindingContext(oTableBinding.getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Absolute ODLB refresh", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', \t\tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t<dependents><plugins:DataStateIndicator/></dependents>\t<Input id=\"name\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=100", {
        value: [{
                ID: "1",
                Name: "Jonathan Smith",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "Text",
                            numericSeverity: 3,
                            target: "Name",
                            transition: false
                        }]
                }
            }, {
                ID: "2",
                Name: "Frederic Fall",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]).expectMessages([{
            code: "1",
            message: "Text",
            target: "/EMPLOYEES('1')/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Warning", "Text");
    }).then(function () {
        return resolveLater(function () {
            assert.strictEqual(oTable.getAggregation("_messageStrip").getType(), "Warning", "JIRA: CPOUI5ODATAV4-460");
        });
    }).then(function () {
        that.expectRequest("EMPLOYEES?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=100", {
            value: [{
                    Name: "Frederic Fall",
                    __CT__FAKE__Message: { __FAKE__Messages: [] }
                }, {
                    Name: "Peter Burke",
                    __CT__FAKE__Message: { __FAKE__Messages: [] }
                }]
        }).expectChange("name", ["Frederic Fall", "Peter Burke"]).expectMessages([]);
        oTable.getBinding("items").refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oTable.getAggregation("_messageStrip").getVisible(), false, "JIRA: CPOUI5ODATAV4-460");
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "None", "");
    });
});
QUnit.test("Absolute ODLB: messages for entries without key properties", function (assert) {
    var oMessage1 = {
        code: "1",
        message: "Text",
        target: "/EMPLOYEES/1/Name",
        type: "Warning"
    }, oMessage2 = {
        code: "2",
        message: "Text2",
        target: "/EMPLOYEES/2/Name",
        type: "Warning"
    }, oTable, sView = "<t:Table id=\"table\" rows=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tparameters : {$select : 'Name,__CT__FAKE__Message/__FAKE__Messages'}\t\t}\" threshold=\"0\" visibleRowCount=\"2\">\t<Input id=\"name\" value=\"{Name}\"/></t:Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=Name,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=2", {
        value: [{
                Name: "Jonathan Smith",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }, {
                Name: "Frederic Fall",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "Text",
                            transition: false,
                            target: "Name",
                            numericSeverity: 3
                        }]
                }
            }]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]).expectMessages([oMessage1]);
    return this.createView(assert, sView).then(function () {
        oTable = that.oView.byId("table");
        return that.checkValueState(assert, oTable.getRows()[1].getCells()[0], "Warning", "Text");
    }).then(function () {
        that.expectRequest("EMPLOYEES?$select=Name,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=2&$top=1", {
            value: [{
                    Name: "Peter Burke",
                    __CT__FAKE__Message: {
                        __FAKE__Messages: [{
                                code: "2",
                                message: "Text2",
                                transition: false,
                                target: "Name",
                                numericSeverity: 3
                            }]
                    }
                }]
        }).expectChange("name", null, null).expectChange("name", [, "Frederic Fall", "Peter Burke"]).expectMessages([oMessage1, oMessage2]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oTable.getRows()[0].getCells()[0], "Warning", "Text");
    }).then(function () {
        return that.checkValueState(assert, oTable.getRows()[1].getCells()[0], "Warning", "Text2");
    });
});
QUnit.test("Absolute ODCB refresh & message", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox id=\"form\" binding=\"{path : '/EMPLOYEES(\\'2\\')', \tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t<Input id=\"text\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages", {
        ID: "1",
        Name: "Jonathan Smith",
        __CT__FAKE__Message: {
            __FAKE__Messages: [{
                    code: "1",
                    message: "Text",
                    numericSeverity: 3,
                    target: "Name",
                    transition: false
                }]
        }
    }).expectChange("text", "Jonathan Smith").expectMessages([{
            code: "1",
            message: "Text",
            target: "/EMPLOYEES('2')/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "text", "Warning", "Text");
    }).then(function () {
        var oError = createError({ message: "Employee does not exist" });
        that.oLogMock.expects("error").withExactArgs("Failed to read path /EMPLOYEES('2')", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataContextBinding");
        that.oLogMock.expects("error").withExactArgs("Failed to read path /EMPLOYEES('2')/Name", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataPropertyBinding");
        that.expectRequest("EMPLOYEES('2')?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages", oError).expectChange("text", null).expectMessages([{
                code: "CODE",
                message: "Employee does not exist",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oView.byId("form").getObjectBinding().refresh();
        return that.waitForChanges(assert);
    });
});
[false, true].forEach(function (bViaContext) {
    QUnit.test("Absolute ODCB refresh, via bound context " + bViaContext, function (assert) {
        var sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", that = this;
        this.expectRequest("EMPLOYEES('2')", { Name: "Jonathan Smith" }).expectChange("text", "Jonathan Smith");
        return this.createView(assert, sView).then(function () {
            var oBinding = that.oView.byId("form").getObjectBinding();
            that.expectRequest("EMPLOYEES('2')", { Name: "Jonathan Smith" });
            if (bViaContext) {
                oBinding.getBoundContext().refresh();
            }
            else {
                oBinding.refresh();
            }
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("Absolute ODPB refresh", function (assert) {
    var sView = "<Text id=\"name\" text=\"{/EMPLOYEES('2')/Name}\"/>", that = this;
    this.expectRequest("EMPLOYEES('2')/Name", { value: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
    return this.createView(assert, sView).then(function () {
        that.expectRequest("EMPLOYEES('2')/Name", { value: "Jonathan Schmidt" }).expectChange("name", "Jonathan Schmidt");
        that.oView.byId("name").getBinding("text").refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODCB: requestRefresh", function (assert) {
    var oBinding, oContext, sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('1')}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')", { ID: "1", Name: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
    return this.createView(assert, sView).then(function () {
        oBinding = that.oView.byId("form").getObjectBinding();
        oContext = oBinding.getBoundContext();
        that.expectRequest("EMPLOYEES('1')", { ID: "1", Name: "Jonathan Smith *" }).expectChange("name", "Jonathan Smith *");
        return Promise.all([
            oBinding.requestRefresh().then(function () {
                assert.strictEqual(oContext.getProperty("Name"), "Jonathan Smith *");
            }),
            that.waitForChanges(assert, "requestRefresh on binding")
        ]);
    }).then(function () {
        that.expectRequest("EMPLOYEES('1')", { ID: "1", Name: "Jonathan Smith **" }).expectChange("name", "Jonathan Smith **");
        return Promise.all([
            oContext.requestRefresh().then(function () {
                assert.strictEqual(oContext.getProperty("Name"), "Jonathan Smith **");
            }),
            that.waitForChanges(assert, "requestRefresh on context")
        ]);
    });
});
QUnit.test("ODLB: requestRefresh", function (assert) {
    var oBinding, oContext, sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$skip=0&$top=100", { value: [{ ID: "1", Name: "Jonathan Smith" }] }).expectChange("name", ["Jonathan Smith"]);
    return this.createView(assert, sView).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        oContext = oBinding.getCurrentContexts()[0];
        that.expectRequest("EMPLOYEES?$skip=0&$top=100", { value: [{ ID: "1", Name: "Jonathan Smith *" }] }).expectChange("name", ["Jonathan Smith *"]);
        return Promise.all([
            oBinding.requestRefresh().then(function () {
                assert.strictEqual(oContext.getProperty("Name"), "Jonathan Smith *");
            }),
            that.waitForChanges(assert, "requestRefresh on binding")
        ]);
    }).then(function () {
        that.expectRequest("EMPLOYEES('1')", { ID: "1", Name: "Jonathan Smith **" }).expectChange("name", ["Jonathan Smith **"]);
        return Promise.all([
            oContext.requestRefresh().then(function () {
                assert.strictEqual(oContext.getProperty("Name"), "Jonathan Smith **");
            }),
            oContext.requestProperty("Name").then(function (sName) {
                assert.strictEqual(sName, "Jonathan Smith *", "still the old value");
            }),
            that.waitForChanges(assert, "requestRefresh on context")
        ]);
    });
});
QUnit.test("ActionImport", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", oModelMessage = {
        code: "1",
        message: "Warning Text",
        target: "/ChangeTeamBudgetByID(...)/Name",
        type: "Warning"
    }, oResponseMessage = {
        code: "1",
        message: "Warning Text",
        numericSeverity: 3,
        target: "Name",
        transition: false
    }, that = this;
    this.expectChange("name", null);
    return this.createView(assert, sView).then(function () {
        that.expectRequest({
            method: "POST",
            url: "ChangeTeamBudgetByID",
            payload: {
                Budget: "1234.1234",
                TeamID: "TEAM_01"
            }
        }, {
            Name: "Business Suite",
            __CT__FAKE__Message: {
                __FAKE__Messages: [oResponseMessage]
            }
        }).expectMessages([oModelMessage]).expectChange("name", "Business Suite");
        return Promise.all([
            that.oView.byId("form").getObjectBinding().setParameter("TeamID", "TEAM_01").setParameter("Budget", "1234.1234").execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "name", "Warning", "Warning Text");
    });
});
QUnit.test("Allow binding of operation parameters: type determination", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t<Input id=\"budget\" value=\"{$Parameter/Budget}\"/>\t<Input id=\"teamId\" value=\"{$Parameter/TeamID}\"/></FlexBox>", that = this;
    this.expectChange("budget", null).expectChange("teamId", "");
    return this.createView(assert, sView).then(function () {
        var oBudgetType = that.oView.byId("budget").getBinding("value").getType(), oTeamIdType = that.oView.byId("teamId").getBinding("value").getType();
        assert.strictEqual(oBudgetType.getName(), "sap.ui.model.odata.type.Decimal");
        assert.deepEqual(oBudgetType.oConstraints, {
            nullable: false,
            precision: 16,
            scale: Infinity
        });
        assert.strictEqual(oTeamIdType.getName(), "sap.ui.model.odata.type.String");
        assert.deepEqual(oTeamIdType.oConstraints, {
            maxLength: 10,
            nullable: false
        });
    });
});
QUnit.test("Allow binding of operation parameters: OneTime", function (assert) {
    var sView = "<FlexBox id=\"form\">\t<Input id=\"budget\" value=\"{Budget}\"/>\t<Input id=\"teamId\" value=\"{TeamID}\"/></FlexBox>", that = this;
    this.expectChange("budget").expectChange("teamId");
    return this.createView(assert, sView).then(function () {
        var oOperationBinding = that.oModel.bindContext("/ChangeTeamBudgetByID(...)");
        oOperationBinding.setParameter("Budget", "1234.1234").setParameter("TeamID", "TEAM_01");
        that.expectChange("budget", "1,234.1234").expectChange("teamId", "TEAM_01");
        that.oView.byId("form").setBindingContext(oOperationBinding.getParameterContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("Allow binding of operation parameters: OneWay", function (assert) {
    var oOperationBinding, sView = "<FlexBox id=\"form\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t<Input id=\"budget\" value=\"{$Parameter/Budget}\"/>\t<Input id=\"teamId\" value=\"{$Parameter/TeamID}\"/></FlexBox>", that = this;
    this.expectChange("budget", null).expectChange("teamId", "");
    return this.createView(assert, sView).then(function () {
        oOperationBinding = that.oView.byId("form").getObjectBinding();
        that.expectChange("budget", "1,234.1234").expectChange("teamId", "TEAM_01");
        oOperationBinding.setParameter("Budget", "1234.1234").setParameter("TeamID", "TEAM_01");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "ChangeTeamBudgetByID",
            payload: {
                Budget: "1234.1234",
                TeamID: "TEAM_01"
            }
        });
        oOperationBinding.execute();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("budget", "56,789");
        oOperationBinding.setParameter("Budget", "56789");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("budget", "98,765");
        return Promise.all([
            oOperationBinding.getParameterContext().setProperty("Budget", "98765"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("budget", "12,345");
        that.oView.byId("budget").getBinding("value").setValue("12345");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("budget", "54,321");
        return Promise.all([
            that.oView.byId("form").getBindingContext().setProperty("$Parameter/Budget", "54321"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("teamId", null);
        that.oView.byId("teamId").getBinding("value").setContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        oOperationBinding.setParameter("TeamID", "n/a");
    });
});
QUnit.test("Allow binding of operation parameters: Changing with controls", function (assert) {
    var oModel = createTeaBusiModel({ groupId: "$direct" }), oOperation, oParameterContext, sView = "<FlexBox id=\"operation\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t<FlexBox id=\"parameter\" binding=\"{$Parameter}\">\t\t<Input id=\"budget\" value=\"{Budget}\"/>\t\t<Input id=\"teamId\" value=\"{TeamID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectChange("budget", null).expectChange("teamId", "");
    return this.createView(assert, sView, oModel).then(function () {
        oOperation = that.oView.byId("operation").getObjectBinding();
        oParameterContext = oOperation.getParameterContext();
        that.expectChange("budget", "1,234.1234");
        that.oView.byId("budget").getBinding("value").setValue("1234.1234");
        assert.strictEqual(oParameterContext.getProperty("Budget"), "1234.1234");
        return that.waitForChanges(assert);
    }).then(function () {
        var oPromise;
        that.expectChange("budget", "4,321.1234");
        oPromise = oOperation.getBoundContext().setProperty("$Parameter/Budget", "4321.1234");
        assert.strictEqual(oParameterContext.getProperty("Budget"), "4321.1234");
        return Promise.all([oPromise, that.waitForChanges(assert)]);
    }).then(function () {
        that.expectChange("teamId", "TEAM_01");
        return Promise.all([
            that.oView.byId("parameter").getBindingContext().setProperty("TeamID", "TEAM_01", null),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "ChangeTeamBudgetByID",
            payload: {
                Budget: "4321.1234",
                TeamID: "TEAM_01"
            }
        }, {});
        oOperation.execute();
        return that.waitForChanges(assert);
    }).then(function () {
        var oError = createError({
            message: "Invalid Budget",
            target: "Foo",
            "@Common.additionalTargets": ["Budget", "Bar", "TeamID"]
        });
        that.oLogMock.expects("error").withExactArgs("Failed to execute /ChangeTeamBudgetByID(...)", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataContextBinding");
        that.expectRequest({
            method: "POST",
            url: "ChangeTeamBudgetByID",
            payload: {
                Budget: "-42",
                TeamID: "TEAM_01"
            }
        }, oError).expectMessages([{
                code: "CODE",
                message: "Invalid Budget",
                persistent: true,
                targets: [
                    "/ChangeTeamBudgetByID(...)/$Parameter/Budget",
                    "/ChangeTeamBudgetByID(...)/$Parameter/TeamID"
                ],
                technical: true,
                type: "Error"
            }]).expectChange("budget", "-42");
        return Promise.all([
            oOperation.setParameter("Budget", "-42").execute().then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0, oError);
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "budget", "Error", "Invalid Budget");
    });
});
testXMLTemplating("Operation parameters with sap.ui.model.odata.v4.AnnotationHelper.format", { models: { meta: createTeaBusiModel().getMetaModel() } }, "<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\"><template:alias name=\"value\" value=\"sap.ui.model.odata.v4.AnnotationHelper.value\">\t<FlexBox id=\"form\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t\t<FlexBox binding=\"{$Parameter}\">\t\t\t<template:repeat list=\"{meta>/ChangeTeamBudgetByID/$Action/0/$Parameter}\" var=\"param\">\t\t\t\t<Input id=\"{param>$Name}\" value=\"{param>@@format}\"/>\t\t\t</template:repeat>\t\t\t<Input\t\t\t\tvalue=\"{meta>/ChangeTeamBudgetByID/TeamID@@format({$$noPatch : true$))}\"/>\t\t\t<Input\t\t\t\tvalue=\"{meta>/ChangeTeamBudgetByID/Budget@@format({$$noPatch : true$), null)}\"/>\t\t\t<Text text=\"{meta>/ChangeTeamBudgetByID/Budget@@format(null, $(shortLimit : 1000,\t\t\t\tstyle : 'short'$))}\"/>\t\t\t<Input value=\"{meta>/ChangeTeamBudgetByID/TeamID@@value}\"/>\t\t\t<Input value=\"{meta>/ChangeTeamBudgetByID/TeamID@@value($($$noPatch : true$))}\"/>\t\t</FlexBox>\t</FlexBox></template:alias></template:alias>", "<FlexBox id=\"form\" binding=\"{/ChangeTeamBudgetByID(...)}\">\t<FlexBox binding=\"{$Parameter}\">\t\t<Input id=\"TeamID\" value=\"{path:'TeamID',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':10,'nullable':false},\t\t\tformatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input id=\"Budget\" value=\"{path:'Budget',type:'sap.ui.model.odata.type.Decimal',\t\t\tconstraints:{'precision':16,'scale':'variable','nullable':false}}\"/>\t\t<Input value=\"{path:'TeamID',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':10,'nullable':false},\t\t\tformatOptions:{'parseKeepsEmptyString':true},\t\t\tparameters:{'$$noPatch':true}}\"/>\t\t<Input value=\"{path:'Budget',type:'sap.ui.model.odata.type.Decimal',\t\t\tconstraints:{'precision':16,'scale':'variable','nullable':false},\t\t\tparameters:{'$$noPatch':true}}\"/>\t\t<Text text=\"{path:'Budget',type:'sap.ui.model.odata.type.Decimal',\t\t\tconstraints:{'precision':16,'scale':'variable','nullable':false},\t\t\tformatOptions:{'shortLimit':1000,'style':'short'}}\"/>\t\t<Input value=\"{TeamID}\"/>\t\t<Input value=\"{path:'TeamID',parameters:{'$$noPatch':true}}\"/>\t</FlexBox></FlexBox>");
testXMLTemplating("Annotations on operations and parameters sap.ui.model.odata.v4.AnnotationHelper.format", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\">\t<FlexBox binding=\"{special.cases.SendAutograph(...)}\"\t\tvisible=\"{meta>/Artists/special.cases.SendAutograph@Org.OData.Core.V1.OperationAvailable@@format}\">\t\t<FlexBox binding=\"{$Parameter}\">\t\t\t<template:with path=\"meta>/Artists/special.cases.SendAutograph/$Parameter/Channel\"\t\t\t\tvar=\"param\">\t\t\t\t\t<Input id=\"param\" value=\"{Channel}\"\t\t\t\t\t\tplaceholder=\"{param>@com.sap.vocabularies.Common.v1.Text/@@format}\"/>\t\t\t\t\t<template:with path=\"param>@com.sap.vocabularies.Common.v1.ValueListMapping\"\t\t\t\t\t\tvar=\"vh\">\t\t\t\t\t\t\t<FlexBox id=\"valueHelp\">\t\t\t\t\t\t\t\t<SearchField \t\t\t\t\t\t\t\t\tvalue=\"{vh>Parameters/0/LocalDataProperty@@format}\"/>\t\t\t\t\t\t\t</FlexBox>\t\t\t\t\t</template:with>\t\t\t</template:with>\t\t</FlexBox>\t</FlexBox></template:alias>", "<FlexBox binding=\"{special.cases.SendAutograph(...)}\" \tvisible=\"{path:'sendsAutographs',type:'sap.ui.model.odata.type.Boolean'}\">\t<FlexBox binding=\"{$Parameter}\">\t\t<Input id=\"param\" value=\"{Channel}\" placeholder=\"{path:'_it/defaultChannel'\t\t\t,type:'sap.ui.model.odata.type.String'\t\t\t,formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<FlexBox id=\"valueHelp\">\t\t\t<SearchField value=\"{path:'_it/lastUsedChannel'\t\t\t\t,type:'sap.ui.model.odata.type.String'\t\t\t\t,formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t</FlexBox>\t</FlexBox></FlexBox>");
QUnit.test("Allow binding of complex operation parameters", function (assert) {
    var oOperation, oModel = createSpecialCasesModel(), sView = "<FlexBox id=\"operation\" binding=\"{/HirePerson(...)}\">\t<FlexBox id=\"parameter\" binding=\"{$Parameter}\">\t\t<FlexBox binding=\"{Person}\">\t\t\t<Input id=\"name\" value=\"{Name}\"/>\t\t\t<Input id=\"salary\" value=\"{Salary}\"/>\t\t\t<FlexBox binding=\"{Address}\">\t\t\t\t<Input id=\"city\" value=\"{City}\"/>\t\t\t\t<Input id=\"zip\" value=\"{ZIP}\"/>\t\t\t</FlexBox>\t\t</FlexBox>\t</FlexBox></FlexBox>", that = this;
    this.expectChange("city", "").expectChange("name", "").expectChange("salary", null).expectChange("zip", "");
    return this.createView(assert, sView, oModel).then(function () {
        oOperation = that.oView.byId("operation").getObjectBinding();
        that.expectChange("city", "Tatooine").expectChange("name", "R2D2").expectChange("salary", "12,345,678").expectChange("zip", "12345");
        oOperation.setParameter("Person", {
            Address: {
                City: "Tatooine",
                ZIP: "12345"
            },
            Name: "R2D2",
            Salary: 12345678
        });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("city", "").expectChange("name", "").expectChange("salary", "12,345").expectChange("zip", "67890");
        oOperation.setParameter("Person", {
            Address: {
                ZIP: "67890"
            },
            Salary: 12345
        });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("salary", "54,321").expectChange("zip", "");
        oOperation.setParameter("Person", {
            Salary: 54321
        });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("name", "C3PO");
        that.oView.byId("name").getBinding("value").setValue("C3PO");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("city", "Kashyyk");
        that.oView.byId("city").getBinding("value").setValue("Kashyyk");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("zip", "12345");
        that.oView.byId("zip").getBinding("value").setValue("12345");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "HirePerson",
            payload: {
                Person: {
                    Address: {
                        City: "Kashyyk",
                        ZIP: "12345"
                    },
                    Name: "C3PO",
                    Salary: 54321
                }
            }
        }, {});
        return Promise.all([oOperation.execute(), that.waitForChanges(assert)]);
    });
});
QUnit.test("ODCB#setParameter with complex type holds the reference", function (assert) {
    var oModel = createSpecialCasesModel(), oOperation = oModel.bindContext("/HirePerson(...)"), oPerson = {
        Address: {
            City: "Tatooine",
            ZIP: "12345",
            "@$ui5.foo": "foo0"
        },
        Name: "R2D2",
        Salary: 12345678,
        "@$ui5.foo": "foo1"
    }, sPerson, that = this;
    return this.createView(assert, "", oModel).then(function () {
        oOperation.setParameter("Person", oPerson);
        oPerson.Salary = 54321;
        oPerson.Address.City = "Kashyyk";
        sPerson = JSON.stringify(oPerson);
        that.expectRequest({
            method: "POST",
            url: "HirePerson",
            payload: {
                Person: {
                    Address: {
                        City: "Kashyyk",
                        ZIP: "12345"
                    },
                    Name: "R2D2",
                    Salary: 54321
                }
            }
        }, {});
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(JSON.stringify(oPerson), sPerson);
        assert.strictEqual(JSON.stringify(oOperation.getParameterContext().getObject("Person")), sPerson);
    });
});
QUnit.test("Absolute ODLB changing parameters; sap-valid-*", function (assert) {
    var sView = "<Table id=\"table\" items=\"{\tpath : '/EMPLOYEES',\tparameters : {\t\t$$ownRequest : true,\t\t$select : 'Name',\t\tfoo : 'bar',\t\t'sap-valid-at' : 'now'\t}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=Name&foo=bar&sap-valid-at=now&$skip=0&$top=100", {
        value: [
            { Name: "Jonathan Smith" },
            { Name: "Frederic Fall" }
        ]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
    return this.createView(assert, sView).then(function () {
        that.expectRequest("EMPLOYEES?$select=ID,Name&foo=bar" + "&$expand=EMPLOYEE_2_MANAGER($select=ID)&$search=Fall" + "&sap-valid-from=2016-01-01&sap-valid-to=2016-12-31T23:59:59.9Z" + "&$skip=0&$top=100", {
            value: [{
                    EMPLOYEE_2_MANAGER: { ID: "0" },
                    ID: "2",
                    Name: "Frederic Fall"
                }]
        }).expectChange("name", ["Frederic Fall"]);
        that.oView.byId("table").getBinding("items").changeParameters({
            $$ownRequest: true,
            $$sharedRequest: undefined,
            $expand: { EMPLOYEE_2_MANAGER: { $select: "ID" } },
            $search: "Fall",
            $select: ["ID", "Name"],
            "sap-valid-at": undefined,
            "sap-valid-from": "2016-01-01",
            "sap-valid-to": "2016-12-31T23:59:59.9Z"
        });
        return that.waitForChanges(assert);
    });
});
QUnit.test("Absolute ODCB changing parameters", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", { Name: "Jonathan Smith" }).expectChange("text", "Jonathan Smith");
    return this.createView(assert, sView).then(function () {
        that.expectRequest("EMPLOYEES('2')?$apply=foo", { Name: "Jonathan Schmidt" }).expectChange("text", "Jonathan Schmidt");
        that.oView.byId("form").getObjectBinding().changeParameters({ $apply: "foo" });
        return that.waitForChanges(assert);
    });
});
QUnit.test("Absolute ODLB with ECD, missing key column", function (assert) {
    var sView = "<Table growing=\"true\" items=\"{path : '/EMPLOYEES', parameters : {$select : 'Name'}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>";
    this.expectRequest("EMPLOYEES?$select=Name&$skip=0&$top=20", {
        value: [
            { Name: "Jonathan Smith" },
            { Name: "Frederic Fall" }
        ]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
    return this.createView(assert, sView);
});
QUnit.test("ODLB: $count and filter()", function (assert) {
    var oTable, oTableBinding, sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" items=\"{path : '/SalesOrderList', parameters : {$select : 'SalesOrderID'}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" }
        ]
    }).expectChange("count").expectChange("id", ["0500000001", "0500000002"]);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectChange("count", "2");
        assert.strictEqual(oTableBinding.getCount(), 2);
        assert.strictEqual(oTableBinding.getLength(), 2);
        that.oView.byId("count").setBindingContext(oTableBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID" + "&$filter=SalesOrderID gt '0500000001'&$skip=0&$top=100", { value: [{ SalesOrderID: "0500000002" }] }).expectChange("count", "1").expectChange("id", ["0500000002"]);
        oTableBinding.filter(new Filter("SalesOrderID", FilterOperator.GT, "0500000001"));
        return that.waitForChanges(assert);
    });
});
QUnit.test("OLDB: case insensitive filtering", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/ProductList'}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("ProductList?$select=Name,ProductID&$skip=0&$top=100", {
        value: [{
                ProductID: "1",
                Name: "Pommes"
            }, {
                ProductID: "2",
                Name: "Salat"
            }]
    }).expectChange("name", ["Pommes", "Salat"]);
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("ProductList?$select=Name,ProductID" + "&$filter=tolower(Name) eq tolower('salat')&$skip=0&$top=100", {
            value: [{
                    ProductID: "2",
                    Name: "Salat"
                }]
        }).expectChange("name", ["Salat"]);
        oListBinding.filter(new Filter({
            filters: [
                new Filter({
                    caseSensitive: false,
                    operator: FilterOperator.EQ,
                    path: "Name",
                    value1: "salat"
                })
            ]
        }));
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODLB: $count and sort()", function (assert) {
    var oTable, oTableBinding, sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" items=\"{path : '/SalesOrderList', parameters : {$select : 'SalesOrderID'}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" }
        ]
    }).expectChange("count").expectChange("id", ["0500000001", "0500000002"]);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectChange("count", "2");
        that.oView.byId("count").setBindingContext(oTableBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$orderby=SalesOrderID desc" + "&$skip=0&$top=100", {
            value: [
                { SalesOrderID: "0500000002" },
                { SalesOrderID: "0500000001" }
            ]
        }).expectChange("id", ["0500000002", "0500000001"]);
        oTableBinding.sort(new Sorter("SalesOrderID", true));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('0500000002')"
        }).expectChange("count", "1").expectChange("id", ["0500000001"]);
        return Promise.all([
            oTable.getItems()[0].getBindingContext().delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: $count and changeParameters()", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, oTableBinding, sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" items=\"{path : '/SalesOrderList',\t\tparameters : {$expand : 'SO_2_BP', $select : 'SalesOrderID'}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$expand=SO_2_BP&$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000001", SO_2_BP: null },
            { SalesOrderID: "0500000002", SO_2_BP: null }
        ]
    }).expectChange("count").expectChange("id", ["0500000001", "0500000002"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectChange("count", "2");
        that.oView.byId("count").setBindingContext(oTableBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$expand=SO_2_BP&$select=SalesOrderID" + "&$filter=SalesOrderID gt '0500000001'&$skip=0&$top=100", { value: [{ SalesOrderID: "0500000002", SO_2_BP: null }] }).expectChange("count", "1").expectChange("id", ["0500000002"]);
        oTableBinding.changeParameters({
            $expand: "SO_2_BP",
            $filter: "SalesOrderID gt '0500000001'",
            $select: "SalesOrderID"
        });
        return that.waitForChanges(assert);
    });
});
QUnit.test("multiple delete: index for gap-filling read requests", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"3\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=3", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" },
            { SalesOrderID: "0500000003" }
        ]
    }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
    return this.createView(assert, sView, oModel).then(function () {
        var aItems = that.oView.byId("table").getItems();
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('0500000002')"
        }).expectRequest({
            method: "DELETE",
            url: "SalesOrderList('0500000003')"
        }).expectRequest("SalesOrderList?$select=SalesOrderID&$skip=1&$top=2", {
            value: [{ SalesOrderID: "0500000004" }]
        }).expectChange("id", [, "0500000004"]);
        return Promise.all([
            aItems[1].getBindingContext().delete(),
            aItems[2].getBindingContext().delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("growing while deleting: index for gap-filling read request", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"3\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=3", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" },
            { SalesOrderID: "0500000003" }
        ]
    }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oDeletePromise;
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('0500000002')"
        }).expectRequest("SalesOrderList?$select=SalesOrderID&$skip=2&$top=4", {
            value: [{ SalesOrderID: "0500000004" }]
        }).expectChange("id", [, , "0500000004"]);
        oTable = that.oView.byId("table");
        oDeletePromise = oTable.getItems()[1].getBindingContext().delete();
        oTable.requestItems();
        return Promise.all([
            oDeletePromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.deepEqual(oTable.getBinding("items").getCurrentContexts().map(getPath), [
            "/SalesOrderList('0500000001')",
            "/SalesOrderList('0500000003')",
            "/SalesOrderList('0500000004')"
        ]);
    });
});
QUnit.test("refreshing row while deleting", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" },
            { SalesOrderID: "0500000003" }
        ]
    }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oDeletePromise;
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('0500000002')"
        }).expectRequest("SalesOrderList('0500000003')?$select=SalesOrderID", {
            SalesOrderID: "0500000003"
        }).expectChange("id", [, "0500000003"]);
        oTable = that.oView.byId("table");
        oDeletePromise = oTable.getItems()[1].getBindingContext().delete();
        oTable.getItems()[2].getBindingContext().refresh();
        return Promise.all([
            oDeletePromise,
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2080123400", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"list\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table><Table id=\"detail\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\" \t\tgrowing=\"true\"> <!-- ensures that the rows and child bindings are kept alive -->\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "1" },
            { SalesOrderID: "2" }
        ]
    }).expectChange("id", ["1", "2"]).expectChange("note", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,Note,SalesOrderID&$skip=0&$top=20", {
            value: [
                { ItemPosition: "10", Note: "Note 1", SalesOrderID: "1" }
            ]
        }).expectChange("note", ["Note 1"]);
        that.oView.byId("detail").setBindingContext(that.oView.byId("list").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        var fnResolve, oRowContext = that.oView.byId("list").getItems()[1].getBindingContext();
        that.expectRequest("SalesOrderList('2')/SO_2_SOITEM" + "?$select=ItemPosition,Note,SalesOrderID&$skip=0&$top=20", new Promise(function (resolve) {
            fnResolve = resolve.bind(null, {
                value: [
                    { ItemPosition: "10", Note: "n/a", SalesOrderID: "2" }
                ]
            });
        })).expectCanceledError("Failed to get contexts for " + sSalesOrderService + "SalesOrderList('2')/SO_2_SOITEM with start index 0 and length 20", sODLB + ": /SalesOrderList('2')[1]|SO_2_SOITEM" + " is ignoring response from inactive cache: " + sSalesOrderService + "SalesOrderList('2')/SO_2_SOITEM?$select=ItemPosition,Note,SalesOrderID").expectRequest("SalesOrderList('2')/SO_2_SOITEM" + "?$select=ItemPosition,Note,SalesOrderID&$skip=0&$top=20", {
            value: [
                { ItemPosition: "10", Note: "Note 2", SalesOrderID: "2" }
            ]
        }).expectChange("note", ["Note 2"]);
        return Promise.all([
            resolveLater(function () {
                resolveLater(fnResolve);
                return oRowContext.requestSideEffects(["SO_2_SOITEM"]);
            }, 0),
            that.oView.byId("detail").setBindingContext(oRowContext),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("growing while deleting: adjust the pending read request", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"3\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=3", {
        value: [
            { SalesOrderID: "0500000001" },
            { SalesOrderID: "0500000002" },
            { SalesOrderID: "0500000003" }
        ]
    }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID" + "&$filter=SalesOrderID eq '0500000002'", {
            value: []
        }).expectRequest("SalesOrderList?$select=SalesOrderID&$skip=3&$top=3", {
            value: [{ SalesOrderID: "0500000004" }]
        }).expectRequest("SalesOrderList?$select=SalesOrderID&$skip=5&$top=1", { value: [] }).expectChange("id", null).expectChange("id", [, , "0500000004"]);
        oTable = that.oView.byId("table");
        oTable.getItems()[1].getBindingContext().refresh(undefined, true);
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.deepEqual(oTable.getBinding("items").getCurrentContexts().map(getPath), [
            "/SalesOrderList('0500000001')",
            "/SalesOrderList('0500000003')",
            "/SalesOrderList('0500000004')"
        ]);
    });
});
QUnit.test("Delete multiple entities in a table w/o own cache", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('1')}\" id=\"form\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
        SO_2_SOITEM: [
            { SalesOrderID: "1", "ItemPosition": "0010" },
            { SalesOrderID: "1", "ItemPosition": "0020" },
            { SalesOrderID: "1", "ItemPosition": "0030" },
            { SalesOrderID: "1", "ItemPosition": "0040" }
        ]
    }).expectChange("position", ["0010", "0020", "0030", "0040"]);
    return this.createView(assert, sView, oModel).then(function () {
        var aItems = that.oView.byId("table").getItems();
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1',ItemPosition='0020')"
        }).expectRequest({
            method: "DELETE",
            url: "SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1',ItemPosition='0030')"
        }).expectChange("position", [, "0040"]);
        return Promise.all([
            aItems[1].getBindingContext().delete(),
            aItems[2].getBindingContext().delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: refresh via parent context binding, shared cache", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{path :'/SalesOrderList(\\'0500000001\\')', \t\tparameters : {$expand : {SO_2_SOITEM : {$select : 'ItemPosition'}}}}\">\t<Text id=\"count\" text=\"{headerContext>$count}\"/>\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"item\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('0500000001')?$expand=SO_2_SOITEM($select=ItemPosition)", {
        SalesOrderID: "0500000001",
        SO_2_SOITEM: [
            { ItemPosition: "0000000010" },
            { ItemPosition: "0000000020" },
            { ItemPosition: "0000000030" }
        ]
    }).expectChange("count").expectChange("item", ["0000000010", "0000000020", "0000000030"]);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        that.expectChange("count", "3");
        that.oView.setModel(that.oView.getModel(), "headerContext");
        that.oView.byId("count").setBindingContext(that.oView.byId("table").getBinding("items").getHeaderContext(), "headerContext");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000001')" + "?$expand=SO_2_SOITEM($select=ItemPosition)", {
            SalesOrderID: "0500000001",
            SO_2_SOITEM: [
                { ItemPosition: "0000000010" },
                { ItemPosition: "0000000030" }
            ]
        }).expectChange("count", "2").expectChange("item", [, "0000000030"]);
        that.oView.byId("form").getObjectBinding().refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2180148277", function (assert) {
    var oTable, sView = "<FlexBox binding=\"{/SalesOrderList('0')}\">\t<Text id=\"count\" text=\"{headerContext>$count}\"/>\t<Text id=\"oldCount\" text=\"{headerContext>$count}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"item\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('0')/SO_2_SOITEM?$skip=0&$top=100", {
        value: [{ ItemPosition: "10" }, { ItemPosition: "20" }]
    }).expectChange("count").expectChange("oldCount").expectChange("item", ["10", "20"]);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("count", "2").expectChange("oldCount", "2");
        that.oView.setModel(that.oView.getModel(), "headerContext");
        that.oView.setBindingContext(oTable.getBinding("items").getHeaderContext(), "headerContext");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM?$skip=0&$top=100", {
            value: [{ ItemPosition: "11" }]
        }).expectChange("count", "1").expectChange("item", ["11"]).expectChange("oldCount", null);
        oTable.setBindingContext(null);
        oTable.bindObject("/SalesOrderList('1')");
        that.oView.byId("count").setBindingContext(oTable.getBinding("items").getHeaderContext(), "headerContext");
        return that.waitForChanges(assert);
    });
});
QUnit.test("Refresh a suspended binding hierarchy", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('0500000001')}\">\t<Text id=\"note\" text=\"{Note}\"/>\t<Text id=\"count\" text=\"{headerContext>$count}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"item\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('0500000001')?$select=Note,SalesOrderID", { SalesOrderID: "0500000001", Note: "initial" }).expectRequest("SalesOrderList('0500000001')/SO_2_SOITEM?$select=ItemPosition," + "SalesOrderID&$skip=0&$top=100", {
        value: [
            { ItemPosition: "0000000010" },
            { ItemPosition: "0000000020" }
        ]
    }).expectChange("count").expectChange("note", "initial").expectChange("item", ["0000000010", "0000000020"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oCount = that.oView.byId("count");
        that.expectChange("count", "2");
        oCount.setModel(that.oView.getModel(), "headerContext");
        oCount.setBindingContext(that.oView.byId("table").getBinding("items").getHeaderContext(), "headerContext");
        return that.waitForChanges(assert);
    }).then(function () {
        oBinding = that.oView.byId("form").getObjectBinding();
        oBinding.suspend();
        oBinding.refresh();
        return resolveLater();
    }).then(function () {
        that.expectEvents(assert, "sap.ui.model.odata.v4.OData", [
            ["ListBinding: /SalesOrderList('0500000001')|SO_2_SOITEM", "refresh", { reason: "refresh" }],
            ["ContextBinding: /SalesOrderList('0500000001')", "change", { reason: "refresh" }],
            ["ContextBinding: /SalesOrderList('0500000001')", "dataRequested"],
            ["ListBinding: /SalesOrderList('0500000001')|SO_2_SOITEM", "dataRequested"],
            ["ContextBinding: /SalesOrderList('0500000001')", "dataReceived", { data: {} }],
            ["PropertyBinding: /SalesOrderList('0500000001')|Note", "change", { reason: "refresh" }],
            ["ListBinding: /SalesOrderList('0500000001')|SO_2_SOITEM", "change", { reason: "change" }],
            ["ListBinding: /SalesOrderList('0500000001')|SO_2_SOITEM", "dataReceived", { data: {} }],
            ["PropertyBinding: /SalesOrderList('0500000001')/SO_2_SOITEM|$count", "change", { reason: "change" }],
            ["PropertyBinding: /SalesOrderList('0500000001')/SO_2_SOITEM/2[2]|ItemPosition", "change", { reason: "change" }]
        ]).expectRequest("SalesOrderList('0500000001')?$select=Note,SalesOrderID", { SalesOrderID: "0500000001", Note: "refreshed" }).expectRequest("SalesOrderList('0500000001')/SO_2_SOITEM?$select=ItemPosition," + "SalesOrderID&$skip=0&$top=100", {
            value: [
                { ItemPosition: "0000000010" },
                { ItemPosition: "0000000020" },
                { ItemPosition: "0000000030" }
            ]
        }).expectChange("count", "3").expectChange("note", "refreshed").expectChange("item", [, , "0000000030"]);
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Modify a foreign property", function (assert) {
    var sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input id=\"item\" value=\"{SO_2_BP/CompanyName}\"/></Table>", oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)&$skip=0&$top=100", {
        value: [{
                SalesOrderID: "0500000002",
                SO_2_BP: {
                    "@odata.etag": "ETag",
                    BusinessPartnerID: "42",
                    CompanyName: "Foo"
                }
            }]
    }).expectChange("item", ["Foo"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "BusinessPartnerList('42')",
            headers: { "If-Match": "ETag" },
            payload: { CompanyName: "Bar" }
        }, { CompanyName: "Bar" }).expectChange("item", ["Bar"]);
        that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value").setValue("Bar");
        return that.waitForChanges(assert);
    });
});
QUnit.test("Modify a property, server responds with 204 (No Content)", function (assert) {
    var sView = "<FlexBox binding=\"{/EMPLOYEES('2')}\">\t\t\t\t\t\t<Input id=\"text\" value=\"{Name}\"/>\t\t\t\t\t</FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", { Name: "Jonathan Smith" }).expectChange("text", "Jonathan Smith");
    return this.createView(assert, sView).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('2')",
            payload: { Name: "Jonathan Schmidt" }
        }).expectChange("text", "Jonathan Schmidt");
        that.oView.byId("text").getBinding("value").setValue("Jonathan Schmidt");
        return that.waitForChanges(assert);
    });
});
QUnit.test("Entity with key aliases", function (assert) {
    var sView = "<Table id=\"table\" items=\"{/EntitiesWithComplexKey}\">\t<Input id=\"item\" value=\"{Value}\"/></Table>", oModel = createSpecialCasesModel({ autoExpandSelect: true }), that = this;
    this.expectRequest("EntitiesWithComplexKey?$select=Key/P1,Key/P2,Value&$skip=0&$top=100", {
        value: [{
                Key: {
                    P1: "foo",
                    P2: 42
                },
                Value: "Old",
                "@odata.etag": "ETag"
            }]
    }).expectChange("item", ["Old"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "EntitiesWithComplexKey(Key1='foo',Key2=42)",
            headers: { "If-Match": "ETag" },
            payload: { Value: "New" }
        }, { Value: "New" }).expectChange("item", ["New"]);
        that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value").setValue("New");
        return that.waitForChanges(assert);
    });
});
QUnit.test("Filter entities by messages", function (assert) {
    var oBinding, oContext, sView = "<Table id=\"table\" items=\"{path : '/EntitiesWithComplexKey', \t\tparameters : {$select : 'Messages'}}\">\t<Input id=\"item\" value=\"{Value}\"/></Table>", oModel = createSpecialCasesModel({ autoExpandSelect: true }), that = this;
    this.expectRequest("EntitiesWithComplexKey?$select=Key/P1,Key/P2,Messages,Value" + "&$skip=0&$top=100", {
        value: [{
                Key: {
                    P1: "baz",
                    P2: 44
                },
                Messages: [],
                Value: "Baz"
            }, {
                Key: {
                    P1: "f/o'o",
                    P2: 42
                },
                Messages: [{
                        message: "Foo error",
                        numericSeverity: 4,
                        target: "Value"
                    }, {
                        message: "Foo warning",
                        numericSeverity: 3,
                        target: "Value"
                    }],
                Value: "Foo"
            }, {
                Key: {
                    P1: "bar",
                    P2: 43
                },
                Messages: [{
                        message: "Bar error",
                        numericSeverity: 4,
                        target: "Value"
                    }],
                Value: "Bar"
            }]
    }).expectChange("item", ["Baz", "Foo", "Bar"]).expectMessages([{
            message: "Foo error",
            target: "/EntitiesWithComplexKey(Key1='f%2Fo''o',Key2=42)/Value",
            type: "Error"
        }, {
            message: "Foo warning",
            target: "/EntitiesWithComplexKey(Key1='f%2Fo''o',Key2=42)/Value",
            type: "Warning"
        }, {
            message: "Bar error",
            target: "/EntitiesWithComplexKey(Key1='bar',Key2=43)/Value",
            type: "Error"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        that.oLogMock.expects("error").withExactArgs("POST on 'EntitiesWithComplexKey' failed; " + "will be repeated automatically", sinon.match("Request intentionally failed"), "sap.ui.model.odata.v4.ODataListBinding");
        that.expectChange("item", ["", "Baz", "Foo", "Bar"]).expectRequest({
            method: "POST",
            url: "EntitiesWithComplexKey",
            payload: {}
        }, createErrorInsideBatch({ target: "Value" })).expectMessages([{
                message: "Foo error",
                target: "/EntitiesWithComplexKey(Key1='f%2Fo''o',Key2=42)/Value",
                type: "Error"
            }, {
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                target: "/EntitiesWithComplexKey($uid=...)/Value",
                technical: true,
                type: "Error"
            }, {
                message: "Foo warning",
                target: "/EntitiesWithComplexKey(Key1='f%2Fo''o',Key2=42)/Value",
                type: "Warning"
            }, {
                message: "Bar error",
                target: "/EntitiesWithComplexKey(Key1='bar',Key2=43)/Value",
                type: "Error"
            }]);
        oContext = oBinding.create({}, true);
        return that.waitForChanges(assert, "produce error message for transient entity");
    }).then(function () {
        return oBinding.requestFilterForMessages().then(function (oFilter) {
            that.expectChange("item", ["Baz", "Foo", "Bar"]);
            oContext.delete();
            return Promise.all([
                checkCanceled(assert, oContext.created()),
                that.waitForChanges(assert, "Clean up")
            ]).then(function () {
                return oFilter;
            });
        });
    }).then(function (oFilter) {
        that.expectRequest("EntitiesWithComplexKey?$select=Key/P1,Key/P2,Messages,Value" + "&$filter=Key/P1 eq 'f/o''o' and Key/P2 eq 42" + " or Key/P1 eq 'bar' and Key/P2 eq 43&$skip=0&$top=100", {
            value: [{
                    Key: {
                        P1: "f/o'o",
                        P2: 42
                    },
                    Messages: [{
                            message: "Foo error",
                            numericSeverity: 4,
                            target: "Value"
                        }, {
                            message: "Foo warning",
                            numericSeverity: 3,
                            target: "Value"
                        }],
                    Value: "Foo"
                }, {
                    Key: {
                        P1: "bar",
                        P2: 43
                    },
                    Messages: [{
                            message: "Bar error",
                            numericSeverity: 4,
                            target: "Value"
                        }],
                    Value: "Bar"
                }]
        }).expectChange("item", ["Foo", "Bar"]);
        oBinding.filter(oFilter);
        return that.waitForChanges(assert);
    });
});
QUnit.test("requestFilterForMessages on a relative list binding", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/SalesOrderList(\\'42\\')', \t\tparameters : {$select : 'Messages'}}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}, \t\t\ttemplateShareable : false}\">\t\t<Text id=\"quantity\" text=\"{Quantity}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Messages,SalesOrderID", {
        Messages: [{
                code: "23",
                message: "Enter a minimum quantity of 2",
                numericSeverity: 3,
                target: "SO_2_SOITEM(SalesOrderID='42',ItemPosition='0010')/Quantity"
            }],
        SalesOrderID: "42"
    }).expectRequest("SalesOrderList('42')/SO_2_SOITEM" + "?$select=ItemPosition,Quantity,SalesOrderID&$skip=0&$top=100", {
        value: [{
                ItemPosition: "0010",
                SalesOrderID: "42",
                Quantity: "1"
            }, {
                ItemPosition: "0020",
                SalesOrderID: "42",
                Quantity: "3"
            }]
    }).expectChange("salesOrderID", "42").expectChange("quantity", ["1.000", "3.000"]).expectMessages([{
            code: "23",
            message: "Enter a minimum quantity of 2",
            persistent: false,
            target: "/SalesOrderList('42')/SO_2_SOITEM(SalesOrderID='42',ItemPosition='0010')" + "/Quantity",
            technical: false,
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        return oBinding.requestFilterForMessages();
    }).then(function (oFilter) {
        that.expectRequest("SalesOrderList('42')/SO_2_SOITEM" + "?$select=ItemPosition,Quantity,SalesOrderID" + "&$filter=SalesOrderID eq '42' and ItemPosition eq '0010'" + "&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "0010",
                    Quantity: "1",
                    SalesOrderID: "42"
                }]
        });
        oBinding.filter(oFilter);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Late property in entity with key aliases", function (assert) {
    var oBinding, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/As(1)}\">\t<Text id=\"avalue\" text=\"{AValue}\"/></FlexBox><Input id=\"value\" value=\"{AtoEntityWithComplexKey/Value}\"/>", that = this;
    this.expectRequest("As(1)?$select=AID,AValue", {
        AID: 1,
        AValue: 23
    }).expectChange("avalue", "23").expectChange("value");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("As(1)?$select=AtoEntityWithComplexKey" + "&$expand=AtoEntityWithComplexKey($select=Key/P1,Key/P2,Value)", {
            AtoEntityWithComplexKey: {
                Key: {
                    P1: "p1",
                    P2: 2
                },
                Value: "42"
            }
        }).expectChange("value", "42");
        oBinding = that.oView.byId("value").getBinding("value");
        oBinding.setContext(that.oView.byId("form").getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("value", "changed").expectRequest({
            method: "PATCH",
            url: "EntitiesWithComplexKey(Key1='p1',Key2=2)",
            payload: { Value: "changed" }
        });
        oBinding.setValue("changed");
        return that.waitForChanges(assert);
    });
});
QUnit.test("createSent and createCompleted", function (assert) {
    var oBinding, oCreatedContext, oModel = createSalesOrdersModel({ autoExpandSelect: true, groupId: "$direct" }), fnRejectPost, fnResolvePost, fnResolveCreateCompleted, fnResolveCreateSent, oTable, sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t<Input id=\"note\" value=\"{Note}\"/></Table>", that = this;
    function onCreateCompleted(oEvent) {
        assert.ok(fnResolveCreateCompleted, "expect createCompleted");
        assert.strictEqual(oEvent.getParameter("context"), oCreatedContext);
        assert.strictEqual(oEvent.getParameter("success"), fnResolveCreateCompleted.bSuccess);
        fnResolveCreateCompleted();
        fnResolveCreateCompleted = undefined;
    }
    function onCreateSent(oEvent) {
        assert.ok(fnResolveCreateSent, "expect createSent");
        assert.strictEqual(oEvent.getParameter("context"), oCreatedContext);
        fnResolveCreateSent();
        fnResolveCreateSent = undefined;
    }
    function expectCreateCompleted(bSuccess) {
        return new Promise(function (resolve) {
            fnResolveCreateCompleted = resolve;
            fnResolveCreateCompleted.bSuccess = bSuccess;
        });
    }
    function expectCreateSent() {
        return new Promise(function (resolve) {
            fnResolveCreateSent = resolve;
        });
    }
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                Note: "foo",
                SalesOrderID: "42"
            }]
    }).expectChange("note", ["foo"]).expectChange("salesOrderID", ["42"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oCreateSentPromise = expectCreateSent();
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        oBinding.attachCreateCompleted(onCreateCompleted);
        oBinding.attachCreateSent(onCreateSent);
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "bar" }
        }, new Promise(function (_resolve, reject) {
            fnRejectPost = reject;
        })).expectChange("note", ["bar", "foo"]).expectChange("salesOrderID", ["", "42"]);
        oCreatedContext = oBinding.create({ Note: "bar" }, true);
        return Promise.all([
            oCreateSentPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oCreateCompletedPromise = expectCreateCompleted(false), oError = createError({
            "@SAP__common.ExceptionCategory": "Framework_Error",
            code: "SYNTAX_ERROR",
            message: "ABAP Runtime error 'SYNTAX_ERROR'",
            target: "cannot/be/resolved"
        });
        that.expectMessages([{
                code: "SYNTAX_ERROR",
                message: "cannot/be/resolved: ABAP Runtime error 'SYNTAX_ERROR'",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withExactArgs("POST on 'SalesOrderList' failed; will be repeated automatically", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataListBinding");
        fnRejectPost(oError);
        return Promise.all([
            oCreateCompletedPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oCreateSentPromise = expectCreateSent();
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "baz" }
        }, new Promise(function (resolve) {
            fnResolvePost = resolve;
        })).expectChange("note", ["baz"]);
        oTable.getItems()[0].getCells()[1].getBinding("value").setValue("baz");
        return Promise.all([
            oCreateSentPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oCreateCompletedPromise = expectCreateCompleted(true);
        that.expectChange("salesOrderID", ["43"]);
        fnResolvePost({
            Note: "baz",
            SalesOrderID: "43"
        });
        return Promise.all([
            oCreateCompletedPromise,
            oCreatedContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2070287827: restore created entities after failed refresh", function (assert) {
    var oBinding, aCreatedContexts = [], oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                Note: "#42",
                SalesOrderID: "42"
            }]
    }).expectChange("note", ["#42"]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        that.expectChange("note", ["new2", "new1", "#42"]).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "new1" }
        }, {
            Note: "new1",
            SalesOrderID: "43"
        }).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "new2" }
        }, {
            Note: "new2",
            SalesOrderID: "44"
        });
        aCreatedContexts.push(oBinding.create({ Note: "new1" }, true));
        aCreatedContexts.push(oBinding.create({ Note: "new2" }, true));
        return Promise.all([
            aCreatedContexts[0].created(),
            aCreatedContexts[1].created(),
            that.waitForChanges(assert, "1. creating and saving new entities")
        ]);
    }).then(function () {
        var sCreateError = "Entity can not be created", oError = createErrorInsideBatch({
            message: sCreateError,
            "@Common.longtextUrl": "longtext"
        });
        assertIndices(assert, oBinding.getCurrentContexts(), [-2, -1, 0]);
        that.expectChange("note", "new5", -5).expectChange("note", "new4", -4).expectChange("note", "new3", -3).expectChange("note", "new2", -2).expectChange("note", "new1", -1).expectChange("note", "#42", 0).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "new3" }
        }, oError).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "new4" }
        }).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "new5" }
        }).expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100").expectMessages([{
                code: "CODE",
                descriptionUrl: sSalesOrderService + "longtext",
                message: sCreateError,
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withExactArgs("POST on 'SalesOrderList' failed; will be repeated automatically", sinon.match(oError.error.message), "sap.ui.model.odata.v4.ODataListBinding").exactly(3);
        that.oLogMock.expects("error").withExactArgs("Failed to get contexts for " + sSalesOrderService + "SalesOrderList" + " with start index 0 and length 100", sinon.match("request was not processed because the previous request failed"), "sap.ui.model.odata.v4.ODataListBinding");
        aCreatedContexts.push(oBinding.create({ Note: "new3" }, true));
        aCreatedContexts.push(oBinding.create({ Note: "new4" }, true));
        aCreatedContexts.push(oBinding.create({ Note: "new5" }, true));
        return Promise.all([
            oBinding.getHeaderContext().requestSideEffects([""]).then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0.message, "HTTP request was not processed because the previous request failed");
                assert.strictEqual(oError0.cause.message, sCreateError);
            }),
            that.waitForChanges(assert, "2. creation of further entities fails and requested side effects rejected")
        ]);
    }).then(function () {
        var aCurrentContexts = oBinding.getCurrentContexts();
        assertIndices(assert, aCurrentContexts, [-5, -4, -3, -2, -1, 0]);
        assert.ok(aCurrentContexts[0].isTransient());
        assert.ok(aCurrentContexts[1].isTransient());
        assert.ok(aCurrentContexts[2].isTransient());
        assert.notOk(aCurrentContexts[3].isTransient());
        assert.notOk(aCurrentContexts[4].isTransient());
        assert.notOk(aCurrentContexts[5].created());
        that.expectChange("note", [, "new3", "new2", "new1", "#42"]);
        return Promise.all([
            aCreatedContexts[3].delete(),
            aCreatedContexts[3].created().then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Request canceled: POST SalesOrderList; group: $parked.$auto");
                assert.ok(oError.canceled);
            }),
            that.waitForChanges(assert, "4. deletion of second transient context")
        ]);
    }).then(function () {
        assertIndices(assert, oBinding.getCurrentContexts(), [-4, -3, -2, -1, 0]);
    });
});
[false, true].forEach(function (bSkipRefresh) {
    QUnit.test("Create with user input - bSkipRefresh: " + bSkipRefresh, function (assert) {
        var oCreatedContext, oModel = createSalesOrdersModel({
            autoExpandSelect: true,
            updateGroupId: "update"
        }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input id=\"note\" value=\"{Note}\"/>\t<Text id=\"companyName\" binding=\"{SO_2_BP}\" text=\"{CompanyName}\"/></Table>", that = this;
        this.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)&$skip=0&$top=100", {
            value: [{
                    Note: "foo",
                    SalesOrderID: "42",
                    SO_2_BP: {
                        BusinessPartnerID: "123",
                        CompanyName: "SAP"
                    }
                }]
        }).expectChange("note", ["foo"]).expectChange("companyName", "SAP");
        return this.createView(assert, sView, oModel).then(function () {
            var oTable = that.oView.byId("table");
            that.expectChange("note", ["bar", "foo"]).expectChange("note", ["baz"]).expectChange("companyName", null).expectChange("companyName", "SAP");
            oCreatedContext = oTable.getBinding("items").create({ Note: "bar" }, bSkipRefresh);
            oTable.getItems()[0].getCells()[0].getBinding("value").setValue("baz");
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest({
                method: "POST",
                url: "SalesOrderList",
                payload: { Note: "baz" }
            }, {
                Note: "from server",
                SalesOrderID: "43"
            }).expectChange("note", ["from server"]);
            if (bSkipRefresh) {
                that.oLogMock.expects("error").withExactArgs("Failed to drill-down into" + " ('43')/SO_2_BP/CompanyName, invalid segment: SO_2_BP", sSalesOrderService + "SalesOrderList?$select=Note,SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", "sap.ui.model.odata.v4.lib._Cache");
            }
            else {
                that.expectRequest("SalesOrderList('43')?$select=Note,SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
                    Note: "fresh from server",
                    SalesOrderID: "43",
                    SO_2_BP: {
                        BusinessPartnerID: "456",
                        CompanyName: "ACM"
                    }
                }).expectChange("note", ["fresh from server"]).expectChange("companyName", "ACM");
            }
            return Promise.all([
                oCreatedContext.created(),
                that.oModel.submitBatch("update"),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("Create multiple w/o refresh, with $count: (2)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" items=\"{path : '/SalesOrderList', parameters : {$count : true}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$count=true&$select=Note,SalesOrderID&$skip=0&$top=100", {
        "@odata.count": "1",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("count").expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        assert.strictEqual(oBinding.getLength(), 1);
        that.expectChange("count", "1");
        that.oView.byId("count").setBindingContext(oBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "2").expectChange("id", ["", "42"]).expectChange("note", ["New 1", "First SalesOrder"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        assert.strictEqual(oBinding.getLength(), 2);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "3").expectChange("id", [, "", "42"]).expectChange("note", ["New 2", "New 1", "First SalesOrder"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        assert.strictEqual(oBinding.getLength(), 3);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectChange("id", ["44", "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oBinding.getLength(), 3);
    });
});
QUnit.test("Create multiple w/o refresh: (3)", function (assert) {
    var oCreatedContext, that = this;
    return this.createTwiceSaveInBetween(assert).then(function () {
        oCreatedContext = that.createThird();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", ["45"]);
        return Promise.all([
            oCreatedContext.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('45')"
        }).expectChange("count", "3").expectChange("id", ["44", "43", "42"]).expectChange("note", ["New 2", "New 1", "First SalesOrder"]);
        return Promise.all([
            oCreatedContext.delete("$auto"),
            that.waitForChanges(assert)
        ]);
    });
});
[
    "Create multiple w/o refresh: (4a)",
    "Create multiple w/o refresh: (4b)",
    "Create multiple w/o refresh: (5)"
].forEach(function (sTitle, i) {
    QUnit.test(sTitle, function (assert) {
        var oCreatedContext, that = this;
        function deleteSalesOrder() {
            if (i === 0) {
                that.oView.byId("table").getBinding("items").resetChanges();
            }
            else if (i === 1) {
                that.oModel.resetChanges();
            }
            else if (i === 2) {
                return oCreatedContext.delete();
            }
        }
        return this.createTwiceSaveInBetween(assert).then(function () {
            oCreatedContext = that.createThird();
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectChange("count", "3").expectChange("id", ["44", "43", "42"]).expectChange("note", ["New 2", "New 1", "First SalesOrder"]);
            return Promise.all([
                checkCanceled(assert, oCreatedContext.created()),
                deleteSalesOrder(),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("Create multiple w/o refresh: (6)", function (assert) {
    var oCreatedContext, that = this;
    return this.createTwiceSaveInBetween(assert).then(function () {
        oCreatedContext = that.createThird();
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", ["45"]);
        return Promise.all([
            oCreatedContext.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        }).expectChange("count", "3").expectChange("id", [, "43", "42"]).expectChange("note", [, "New 1", "First SalesOrder"]);
        return Promise.all([
            that.oView.byId("table").getItems()[1].getBindingContext().delete("$auto"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Create multiple w/o refresh, with $count: (7)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"table\" growing=\"true\" growingThreshold=\"2\"\t\titems=\"{path : '/SalesOrderList', parameters : {$count : true}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$count=true&$select=Note,SalesOrderID&$skip=0&$top=2", {
        "@odata.count": "3",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }, {
                Note: "Second SalesOrder",
                SalesOrderID: "43"
            }]
    }).expectChange("count").expectChange("id", ["42", "43"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("count", "3");
        that.oView.byId("count").setBindingContext(oBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "4").expectChange("id", [""]).expectChange("note", ["New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "5").expectChange("id", [""]).expectChange("note", ["New 2"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "6").expectChange("id", [""]).expectChange("note", ["New 3"]);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("count", "5").expectChange("note", [, "New 1"]);
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            oCreatedContext1.delete(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(oCreatedContext2.getProperty("Note"), "New 3");
        assert.strictEqual(oCreatedContext2.getProperty("/SalesOrderList/-2/Note"), "New 3");
        assert.strictEqual(oCreatedContext0.isTransient(), true);
        assert.strictEqual(oCreatedContext0.getProperty("Note"), "New 1");
        assert.strictEqual(oCreatedContext0.getProperty("/SalesOrderList/-1/Note"), "New 1");
        that.expectChange("id", [, , "42", "43"]).expectChange("note", [, , "First SalesOrder", "Second SalesOrder"]);
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$count=true&$select=Note,SalesOrderID" + "&$skip=2&$top=1", {
            "@odata.count": "3",
            value: [{
                    Note: "Third SalesOrder",
                    SalesOrderID: "44"
                }]
        }).expectChange("id", "44", 4).expectChange("note", "Third SalesOrder", 4);
        oTable.requestItems();
        return that.waitForChanges(assert);
    });
});
QUnit.test("All pairs test for multi create (1)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\" items=\"{BP_2_SO}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", "", ""]).expectChange("note", ["New 3", "New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", ["45", "44", "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        });
        return Promise.all([
            oTable.getItems()[1].getBindingContext().delete("$auto"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("All pairs test for multi create (2)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" visibleRowCount=\"2\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Input id=\"note\" value=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=102", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", ["", "42"]).expectChange("note", ["New 1", "First SalesOrder"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", ["43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext1);
        that.expectChange("id", null).expectChange("note", null).expectChange("id", [, "43"]).expectChange("note", [, "New 1"]);
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            oCreatedContext1.delete(),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        that.expectChange("id", [, "43", "42"]).expectChange("note", [, "New 1", "First SalesOrder"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", ["", "43"]).expectChange("note", ["New 3", "New 1"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2, "1");
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0, "2");
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3 - Changed" }
        }, {
            Note: "New 3 - Changed",
            SalesOrderID: "44"
        }).expectChange("id", ["44"]).expectChange("note", ["New 3 - Changed"]);
        aRows[0].getCells()[1].getBinding("value").setValue("New 3 - Changed");
        return Promise.all([
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2, "1");
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0, "2");
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    });
});
QUnit.test("All pairs test for multi create (3)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<t:Table id=\"table\" rows=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true}}\"\t\t\tthreshold=\"0\" visibleRowCount=\"2\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</t:Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=2", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", ["45", "44"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oTable.getRows()[1].getBindingContext(), oCreatedContext1);
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        }).expectChange("id", null).expectChange("note", null).expectChange("id", [, "43"]).expectChange("note", [, "New 1"]);
        return Promise.all([
            oCreatedContext1.delete("$auto"),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        that.expectChange("id", [, "43", "42"]).expectChange("note", [, "New 1", "First SalesOrder"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext().isTransient(), undefined);
    }).then(function () {
        that.expectChange("id", ["45", "43"]).expectChange("note", ["New 3", "New 1"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    });
});
QUnit.test("All pairs test for multi create (4)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\"\t\t\titems=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=20", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", ""]).expectChange("note", ["New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectChange("id", ["44", "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", [""]).expectChange("note", ["New 3"]);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        });
        oCreatedContext1.delete("$auto");
        return that.waitForChanges(assert);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 3);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[2].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (5)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"2\"\t\titems=\"{parameters : {$filter : 'contains(Note,\\'SalesOrder\\')'},\t\t\tpath : '/SalesOrderList'}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Input id=\"note\" value=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$filter=contains(Note,'SalesOrder')" + "&$select=Note,SalesOrderID&$skip=0&$top=2", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }, {
                Note: "Second SalesOrder",
                SalesOrderID: "43"
            }]
    }).expectChange("id", ["42", "43"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "44"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "45"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "46"
        }).expectChange("id", ["46", "45"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('45')"
        }).expectChange("id", [, "44"]).expectChange("note", [, "New 1"]);
        return Promise.all([
            oCreatedContext1.delete("$auto"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('46')",
            payload: { Note: "New 3 - Changed" }
        }, {
            Note: "New 3 - Changed",
            SalesOrderID: "46"
        }).expectChange("note", ["New 3 - Changed"]);
        oTable.getItems()[0].getCells()[1].getBinding("value").setValue("New 3 - Changed");
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 2, "growingThreshold=2");
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    }).then(function () {
        that.expectChange("id", [, , "42", "43"]).expectChange("note", [, , "First SalesOrder", "Second SalesOrder"]);
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$filter=(contains(Note,'SalesOrder'))" + " and not (SalesOrderID eq '46' or SalesOrderID eq '44')" + "&$select=Note,SalesOrderID&$skip=2&$top=2", { value: [] });
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 4);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[2].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aItems[3].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (6)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" visibleRowCount=\"2\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=102", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("note", ["New 2", "New 1"]).expectChange("id", ["", ""]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectChange("id", ["44", "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", "44"]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oTable.getRows()[1].getBindingContext(), oCreatedContext1);
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$filter=SalesOrderID eq '44'", { value: [] }).expectChange("id", null).expectChange("note", null).expectChange("id", [, "43"]).expectChange("note", [, "New 1"]);
        return Promise.all([
            oCreatedContext1.requestRefresh("$auto", true),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        that.expectChange("id", [, "43", "42"]).expectChange("note", [, "New 1", "First SalesOrder"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", ["", "43"]).expectChange("note", ["New 3", "New 1"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    });
});
QUnit.test("All pairs test for multi create (7)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<t:Table id=\"table\" rows=\"{BP_2_SO}\" visibleRowCount=\"2\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</t:Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }, {
                Note: "Second SalesOrder",
                SalesOrderID: "43"
            }]
    }).expectChange("id", ["42", "43"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", null).expectChange("note", null).expectChange("id", null).expectChange("note", null).expectChange("id", ["42", "43"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
        oModel.resetChanges();
        return Promise.all([
            checkCanceled(assert, oCreatedContext0.created()),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert, "", true)
        ]);
    });
});
QUnit.test("All pairs test for multi create (8)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\"\t\t\titems=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=20", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", [""]).expectChange("note", ["New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", ["43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 4);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext1);
        assert.strictEqual(oCreatedContext1.isTransient(), true);
        assert.strictEqual(aItems[2].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[3].getBindingContext().isTransient(), undefined);
        return Promise.all([
            oBinding.resetChanges(),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 2);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[1].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (9)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\" items=\"{BP_2_SO}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", "", ""]).expectChange("note", ["New 3", "New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            oCreatedContext1.delete(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), true);
        assert.strictEqual(aItems[2].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (10)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" visibleRowCount=\"2\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=102", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }, {
                Note: "Second SalesOrder",
                SalesOrderID: "41"
            }]
    }).expectChange("id", ["42", "41"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("note", ["New 3", "New 2"]).expectChange("id", ["", ""]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", null).expectChange("note", null).expectChange("id", null).expectChange("note", null).expectChange("id", ["42", "41"]).expectChange("note", ["First SalesOrder", "Second SalesOrder"]);
        return Promise.all([
            oBinding.resetChanges(),
            checkCanceled(assert, oCreatedContext0.created()),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aRows[1].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (11)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\" items=\"{BP_2_SO}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", [""]).expectChange("note", ["New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", ["43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        return Promise.all([
            oBinding.resetChanges(),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[1].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (12)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\"\t\t\titems=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=20", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", "", ""]).expectChange("note", ["New 3", "New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 4);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext1);
        assert.strictEqual(oCreatedContext1.isTransient(), true);
        assert.strictEqual(aItems[2].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), true);
        assert.strictEqual(aItems[3].getBindingContext().isTransient(), undefined);
        oModel.resetChanges();
        return Promise.all([
            checkCanceled(assert, oCreatedContext0.created()),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created())
        ]);
    }).then(function () {
        assert.strictEqual(oTable.getItems()[0].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (13)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" visibleRowCount=\"2\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=102", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("note", ["New 1", "First SalesOrder"]).expectChange("id", ["", "42"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", ["43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", ""]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", null).expectChange("note", null).expectChange("id", null).expectChange("note", null).expectChange("note", ["New 1", "First SalesOrder"]).expectChange("id", ["43", "42"]);
        oModel.resetChanges();
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (14)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<t:Table id=\"table\" rows=\"{BP_2_SO}\" visibleRowCount=\"2\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</t:Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", ["", ""]).expectChange("note", ["New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectChange("id", ["44"]).expectChange("id", [, "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", ["", "44"]).expectChange("note", ["New 3", "New 2"]);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        }).expectChange("id", null).expectChange("note", null).expectChange("id", [, "43"]).expectChange("note", [, "New 1"]);
        return Promise.all([
            oCreatedContext1.delete("$auto"),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    }).then(function () {
        that.expectChange("id", [, "43", "42"]).expectChange("note", [, "New 1", "First SalesOrder"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aRows[1].getBindingContext().isTransient(), undefined);
    }).then(function () {
        that.expectChange("id", ["", "43"]).expectChange("note", ["New 3", "New 1"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
    });
});
QUnit.test("All pairs test for multi create (15)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<Table id=\"table\" growing=\"true\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=20", {
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", ["", "", ""]).expectChange("note", ["New 3", "New 2", "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", ["45", "44", "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$filter=SalesOrderID eq '44'", {
            value: []
        });
        return Promise.all([
            oCreatedContext1.requestRefresh("$auto", true),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 3);
        assert.strictEqual(aItems[0].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), false);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[2].getBindingContext().isTransient(), undefined);
    });
});
QUnit.test("All pairs test for multi create (16)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/SalesOrderList', parameters : {$count : true}}\"\t\tvisibleRowCount=\"3\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList" + "?$count=true&$select=Note,SalesOrderID&$skip=0&$top=103", {
        "@odata.count": "1",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", [, "", ""]).expectChange("note", [, "New 1", "New 2"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note", [, , "New 3"]);
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            oCreatedContext1.delete(),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(aRows.length, 3);
        assert.strictEqual(aRows[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(aRows[2].getBindingContext(), oCreatedContext2);
    });
});
QUnit.test("All pairs test for multi create (17)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\" items=\"{path : 'BP_2_SO', parameters : {$count : true}}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($count=true;$select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        "BP_2_SO@odata.count": "1",
        BP_2_SO: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", [, ""]).expectChange("note", [, "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", [, "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", [, , "", ""]).expectChange("note", [, , "New 2", "New 3"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.oModel.resetChanges();
        return Promise.all([
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created()),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext1.isTransient(), false);
    });
});
QUnit.test("All pairs test for multi create (18)", function (assert) {
    var oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<Table id=\"table\" growing=\"true\" items=\"{path : '/SalesOrderList',\t\tparameters : {$count : true}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList" + "?$count=true&$select=Note,SalesOrderID&$skip=0&$top=20", {
        "@odata.count": "1",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding;
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", [, "", "", ""]).expectChange("note", [, "New 1", "New 2", "New 3"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 3" }
        }, {
            Note: "New 3",
            SalesOrderID: "45"
        }).expectChange("id", [, "43", "44", "45"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            oCreatedContext2.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oTable.getItems()[2].getBindingContext(), oCreatedContext1);
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$filter=SalesOrderID eq '44'", { value: [] });
        return Promise.all([
            oCreatedContext1.requestRefresh("$auto", true),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 3);
        assert.strictEqual(aItems[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(aItems[2].getBindingContext(), oCreatedContext2);
    });
});
QUnit.test("All pairs test for multi create (19)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<FlexBox binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" growing=\"true\"\t\titems=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true, $count : true}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')/BP_2_SO?$count=true" + "&$select=Note,SalesOrderID&$skip=0&$top=20", {
        "@odata.count": "1",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("items");
        that.expectChange("id", [, ""]).expectChange("note", [, "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "BusinessPartnerList('4711')/BP_2_SO",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectChange("id", [, "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", [, , "", ""]).expectChange("note", [, , "New 2", "New 3"]);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true, true);
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 4);
        assert.strictEqual(aItems[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        assert.strictEqual(aItems[2].getBindingContext(), oCreatedContext1);
        assert.strictEqual(oCreatedContext1.isTransient(), true);
        assert.strictEqual(aItems[3].getBindingContext(), oCreatedContext2);
        assert.strictEqual(oCreatedContext2.isTransient(), true);
        return Promise.all([
            oBinding.resetChanges(),
            checkCanceled(assert, oCreatedContext1.created()),
            checkCanceled(assert, oCreatedContext2.created())
        ]);
    }).then(function () {
        var aItems = oTable.getItems();
        assert.strictEqual(aItems.length, 2);
        assert.strictEqual(aItems[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(aItems[1].getBindingContext(), oCreatedContext0);
    });
});
QUnit.test("All pairs test for multi create (20)", function (assert) {
    var oBinding, oCreatedContext0, oCreatedContext1, oCreatedContext2, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/SalesOrderList', parameters : {$count : true}}\"\t\tvisibleRowCount=\"2\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList" + "?$count=true&$select=Note,SalesOrderID&$skip=0&$top=102", {
        "@odata.count": "1",
        value: [{
                Note: "First SalesOrder",
                SalesOrderID: "42"
            }]
    }).expectChange("id", ["42"]).expectChange("note", ["First SalesOrder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oBinding = oTable.getBinding("rows");
        that.expectChange("id", [, ""]).expectChange("note", [, "New 1"]);
        oCreatedContext0 = oBinding.create({ Note: "New 1" }, true, true);
        oCreatedContext1 = oBinding.create({ Note: "New 2" }, true, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 1" }
        }, {
            Note: "New 1",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 1,
            method: "POST",
            url: "SalesOrderList",
            payload: { Note: "New 2" }
        }, {
            Note: "New 2",
            SalesOrderID: "44"
        }).expectChange("id", [, "43"]);
        return Promise.all([
            oCreatedContext0.created(),
            oCreatedContext1.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        oCreatedContext2 = oBinding.create({ Note: "New 3" }, true, true);
        assert.strictEqual(oTable.getRows()[0].getBindingContext().isTransient(), undefined);
        assert.strictEqual(oTable.getRows()[1].getBindingContext(), oCreatedContext0);
        assert.strictEqual(oCreatedContext0.isTransient(), false);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", [, "43", "44"]).expectChange("note", [, "New 1", "New 2"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "SalesOrderList('44')"
        }).expectChange("id", null).expectChange("note", null).expectChange("id", [, , ""]).expectChange("note", [, , "New 3"]);
        return Promise.all([
            oCreatedContext1.delete("$auto"),
            that.waitForChanges(assert, "", true)
        ]);
    }).then(function () {
        var aRows = oTable.getRows();
        assert.strictEqual(oTable.getFirstVisibleRow(), 1);
        assert.strictEqual(aRows.length, 2);
        assert.strictEqual(aRows[0].getBindingContext(), oCreatedContext0);
        assert.strictEqual(aRows[1].getBindingContext(), oCreatedContext2);
    });
});
QUnit.test("Create with default value in a complex property", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<Table id=\"table\" items=\"{/BusinessPartnerList}\">\t<Input id=\"city\" value=\"{Address/City}\"/>\t<Input id=\"longitude\" value=\"{Address/GeoLocation/Longitude}\"/></Table>", that = this;
    this.expectRequest("BusinessPartnerList?$select=Address/City,Address/GeoLocation/Longitude" + ",BusinessPartnerID&$skip=0&$top=100", {
        value: [{
                Address: {
                    City: "Walldorf",
                    GeoLocation: null
                },
                BusinessPartnerID: "42"
            }]
    }).expectChange("city", ["Walldorf"]).expectChange("longitude", [null]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("city", ["", "Walldorf"]).expectChange("longitude", ["0.000000000000", null]);
        oTable = that.oView.byId("table");
        oTable.getBinding("items").create();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("city", ["Heidelberg"]).expectChange("longitude", ["8.700000000000"]);
        oTable.getItems()[0].getCells()[0].getBinding("value").setValue("Heidelberg");
        oTable.getItems()[0].getCells()[1].getBinding("value").setValue("8.7");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList",
            payload: {
                Address: {
                    City: "Heidelberg",
                    GeoLocation: { Longitude: "8.7" }
                }
            }
        }, {
            Address: {
                City: "Heidelberg",
                GeoLocation: { Longitude: "8.69" }
            },
            BusinessPartnerID: "43"
        }).expectRequest("BusinessPartnerList('43')?$select=Address/City" + ",Address/GeoLocation/Longitude,BusinessPartnerID", {
            Address: {
                City: "Heidelberg",
                GeoLocation: { Longitude: "8.69" }
            },
            BusinessPartnerID: "43"
        }).expectChange("longitude", ["8.690000000000"]);
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Create with default value in a currency/unit", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, sView = "<Table id=\"table\" items=\"{/SalesOrderList('42')/SO_2_SOITEM}\">\t<Input id=\"quantity\" value=\"{Quantity}\"/>\t<Text id=\"unit\" text=\"{QuantityUnit}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=ItemPosition,Quantity" + ",QuantityUnit,SalesOrderID&$skip=0&$top=100", {
        value: [{
                SalesOrderID: "42",
                ItemPosition: "0010",
                Quantity: "1.000",
                QuantityUnit: "DZ"
            }]
    }).expectChange("quantity", ["1.000"]).expectChange("unit", ["DZ"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("quantity", [null, "1.000"]).expectChange("unit", ["EA", "DZ"]);
        oTable = that.oView.byId("table");
        oListBinding = oTable.getBinding("items");
        oListBinding.create();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("quantity", ["2.000"]);
        oTable.getItems()[0].getCells()[0].getBinding("value").setValue("2.000");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('42')/SO_2_SOITEM",
            payload: {
                Quantity: "2.000",
                QuantityUnit: "EA"
            }
        }, {
            SalesOrderID: "42",
            ItemPosition: "0020",
            Quantity: "2.000",
            QuantityUnit: "EA"
        }).expectRequest("SalesOrderList('42')" + "/SO_2_SOITEM(SalesOrderID='42',ItemPosition='0020')" + "?$select=ItemPosition,Quantity,QuantityUnit,SalesOrderID", {
            SalesOrderID: "42",
            ItemPosition: "0020",
            Quantity: "2.000",
            QuantityUnit: "EA"
        });
        return Promise.all([
            that.oModel.submitBatch("update").then(function () {
                assert.notOk(oModel.hasPendingChanges("update"), "Model: No pending changes when submitBatch promise resolves");
                assert.notOk(oListBinding.hasPendingChanges(), "Binding: No pending changes when submitBatch promise resolves");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Create error", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true, groupId: "$direct" }), oTable, sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text text=\"{ItemPosition}\"/>\t\t<Input value=\"{ProductID}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,ProductID,SalesOrderID)", {
        SalesOrderID: "42",
        SO_2_SOITEM: []
    });
    return this.createView(assert, sView, oModel).then(function () {
        var oError = createError({
            message: "Enter a product ID",
            target: "ProductID"
        });
        oTable = that.oView.byId("table");
        that.oLogMock.expects("error").withExactArgs("POST on 'SalesOrderList('42')/SO_2_SOITEM' failed; " + "will be repeated automatically", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataListBinding");
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('42')/SO_2_SOITEM",
            payload: {}
        }, oError).expectMessages([{
                code: "CODE",
                message: "Enter a product ID",
                persistent: true,
                target: "/SalesOrderList('42')/SO_2_SOITEM($uid=...)/ProductID",
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            oTable.getBinding("items").create(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[1], "Error", "Enter a product ID");
    });
});
QUnit.test("Read a sales order line item, enter an invalid quantity", function (assert) {
    var oError = createError({
        code: "top",
        message: "Error occurred while processing the request",
        details: [{
                "@Common.longtextUrl": "../Messages(1)/LongText",
                "@Common.numericSeverity": 4,
                code: "bound",
                message: "Value must be greater than 0",
                target: "Quantity"
            }, {
                "@Common.longtextUrl": "",
                "@Common.numericSeverity": 3,
                code: "unbound",
                message: "Some unbound warning"
            }]
    }), oExpectedMessage = {
        code: "23",
        message: "Enter a minimum quantity of 2",
        target: "/BusinessPartnerList('1')/BP_2_SO('42')/SO_2_SOITEM('0010')/Quantity",
        type: "Warning"
    }, oModel = createSalesOrdersModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox binding=\"{\t\tpath : '/BusinessPartnerList(\\'1\\')/BP_2_SO(\\'42\\')/SO_2_SOITEM(\\'0010\\')',\t\tparameters : {$select : 'Messages'}}\">\t<Input id=\"quantity\" value=\"{Quantity}\"/>\t<Text id=\"unit\" text=\"{QuantityUnit}\"/></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('1')/BP_2_SO('42')/SO_2_SOITEM('0010')" + "?$select=ItemPosition,Messages,Quantity,QuantityUnit,SalesOrderID", {
        SalesOrderID: "42",
        ItemPosition: "0010",
        Quantity: "1.000",
        QuantityUnit: "DZ",
        Messages: [{
                code: "23",
                message: "Enter a minimum quantity of 2",
                numericSeverity: 3,
                target: "Quantity"
            }]
    }).expectChange("quantity", "1.000").expectChange("unit", "DZ").expectMessages([oExpectedMessage]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "quantity", "Warning", "Enter a minimum quantity of 2");
    }).then(function () {
        that.oLogMock.expects("error").twice().withArgs("Failed to update path /BusinessPartnerList('1')/BP_2_SO('42')" + "/SO_2_SOITEM('0010')/Quantity", sinon.match(oError.message));
        that.expectChange("quantity", "0.000").expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')/SO_2_SOITEM('0010')",
            payload: {
                Quantity: "0.000",
                QuantityUnit: "DZ"
            }
        }, oError).expectMessages([
            oExpectedMessage,
            {
                code: "top",
                message: "Error occurred while processing the request",
                persistent: true,
                technical: true,
                technicalDetails: {
                    httpStatus: 500,
                    originalMessage: {
                        code: "top",
                        details: [{
                                "@Common.longtextUrl": "../Messages(1)/LongText",
                                "@Common.numericSeverity": 4,
                                code: "bound",
                                message: "Value must be greater than 0",
                                target: "Quantity"
                            }, {
                                "@Common.longtextUrl": "",
                                "@Common.numericSeverity": 3,
                                code: "unbound",
                                message: "Some unbound warning"
                            }],
                        message: "Error occurred while processing the request"
                    }
                },
                type: "Error"
            },
            {
                code: "unbound",
                message: "Some unbound warning",
                persistent: true,
                technicalDetails: {
                    httpStatus: 500,
                    originalMessage: {
                        "@Common.longtextUrl": "",
                        "@Common.numericSeverity": 3,
                        code: "unbound",
                        message: "Some unbound warning"
                    }
                },
                type: "Warning"
            },
            {
                code: "bound",
                descriptionUrl: sSalesOrderService + "Messages(1)/LongText",
                message: "Value must be greater than 0",
                persistent: true,
                target: "/BusinessPartnerList('1')/BP_2_SO('42')/SO_2_SOITEM('0010')/Quantity",
                technicalDetails: {
                    httpStatus: 500,
                    originalMessage: {
                        "@Common.longtextUrl": "../Messages(1)/LongText",
                        "@Common.numericSeverity": 4,
                        code: "bound",
                        message: "Value must be greater than 0",
                        target: "Quantity"
                    }
                },
                type: "Error"
            }
        ]);
        that.oView.byId("quantity").getBinding("value").setValue("0.000");
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, "quantity", "Error", "Value must be greater than 0");
    });
});
QUnit.test("Merge PATCHes", function (assert) {
    var sEtag = "ETag", oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Input id=\"note\" value=\"{Note}\"/>\t<Input id=\"amount\" value=\"{GrossAmount}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=GrossAmount,Note,SalesOrderID", {
        "@odata.etag": sEtag,
        GrossAmount: "1000.00",
        Note: "Note",
        SalesOrderID: "42"
    }).expectChange("note", "Note").expectChange("amount", "1,000.00");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": sEtag },
            payload: {
                GrossAmount: "1234.56",
                Note: "Changed Note"
            }
        }, {
            GrossAmount: "1234.56",
            Note: "Changed Note From Server"
        }).expectChange("amount", "1,234.56").expectChange("note", "Changed Note").expectChange("note", "Changed Note From Server");
        that.oView.byId("amount").getBinding("value").setValue("1234.56");
        that.oView.byId("note").getBinding("value").setValue("Changed Note");
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Merge PATCHes for different entities", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input id=\"amount\" value=\"{GrossAmount}\"/>\t<Input id=\"note\" value=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=GrossAmount,Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                "@odata.etag": "ETag0",
                GrossAmount: "1000.00",
                Note: "Note0",
                SalesOrderID: "41"
            }, {
                "@odata.etag": "ETag1",
                GrossAmount: "150.00",
                Note: "Note1",
                SalesOrderID: "42"
            }]
    }).expectChange("amount", ["1,000.00", "150.00"]).expectChange("note", ["Note0", "Note1"]);
    return this.createView(assert, sView, oModel).then(function () {
        var aTableItems = that.oView.byId("table").getItems(), oBindingAmount0 = aTableItems[0].getCells()[0].getBinding("value"), oBindingAmount1 = aTableItems[1].getCells()[0].getBinding("value"), oBindingNote0 = aTableItems[0].getCells()[1].getBinding("value"), oBindingNote1 = aTableItems[1].getCells()[1].getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('41')",
            headers: { "If-Match": "ETag0" },
            payload: {
                GrossAmount: "123.45",
                Note: "Note02"
            }
        }, {
            GrossAmount: "123.45",
            Note: "Note02"
        }).expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1" },
            payload: {
                GrossAmount: "456.78",
                Note: "Note12"
            }
        }, {
            GrossAmount: "456.78",
            Note: "Note12"
        }).expectChange("amount", ["123.45", "456.78"]).expectChange("note", ["Note01", "Note11"]).expectChange("note", ["Note02", "Note12"]);
        oBindingAmount0.setValue("123.45");
        oBindingAmount1.setValue("456.78");
        oBindingNote0.setValue("Note01");
        oBindingNote1.setValue("Note11");
        oBindingNote1.setValue("Note12");
        oBindingNote0.setValue("Note02");
        return Promise.all([
            oModel.submitBatch("update").then(function () {
                assert.notOk(oModel.hasPendingChanges("update"), "No pending changes when submitBatch promise resolves");
                assert.notOk(that.oView.byId("table").getBinding("items").hasPendingChanges(), "No pending changes when submitBatch promise resolves");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Error response for a change set w/o content-ID", function (assert) {
    var oError = createErrorInsideBatch({ message: "Value 4.22 not allowed" }), oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input id=\"amount\" value=\"{GrossAmount}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=GrossAmount,SalesOrderID&$skip=0&$top=100", {
        value: [{
                "@odata.etag": "ETag0",
                GrossAmount: "4.1",
                SalesOrderID: "41"
            }, {
                "@odata.etag": "ETag1",
                GrossAmount: "4.2",
                SalesOrderID: "42"
            }]
    }).expectChange("amount", ["4.10", "4.20"]);
    return this.createView(assert, sView, oModel).then(function () {
        var aTableItems = that.oView.byId("table").getItems(), oBindingAmount0 = aTableItems[0].getCells()[0].getBinding("value"), oBindingAmount1 = aTableItems[1].getCells()[0].getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('41')",
            headers: { "If-Match": "ETag0" },
            payload: { GrossAmount: "4.11" }
        }).expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1" },
            payload: { GrossAmount: "4.22" }
        }, oError).expectChange("amount", ["4.11", "4.22"]).expectMessages([{
                code: "CODE",
                message: "Value 4.22 not allowed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withExactArgs("Failed to update path /SalesOrderList('41')/GrossAmount", sinon.match("Value 4.22 not allowed"), "sap.ui.model.odata.v4.Context");
        that.oLogMock.expects("error").withExactArgs("Failed to update path /SalesOrderList('42')/GrossAmount", sinon.match("Value 4.22 not allowed"), "sap.ui.model.odata.v4.Context");
        oBindingAmount0.setValue("4.11");
        oBindingAmount1.setValue("4.22");
        return Promise.all([
            oModel.submitBatch("update").then(function () {
                assert.ok(oModel.hasPendingChanges("update"), "Pending changes when submitBatch promise resolves as PATCH failed");
                assert.ok(that.oView.byId("table").getBinding("items").hasPendingChanges(), "Pending changes when submitBatch promise resolves as PATCH failed");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-729: @Core.ContentId", function (assert) {
    var aItems, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<ColumnListItem>\t\t<Input id=\"amount\" value=\"{GrossAmount}\"/>\t</ColumnListItem></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=GrossAmount,SalesOrderID&$skip=0&$top=100", {
        value: [{
                GrossAmount: "4.1",
                SalesOrderID: "41"
            }, {
                GrossAmount: "4.2",
                SalesOrderID: "42"
            }]
    }).expectChange("amount", ["4.10", "4.20"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oError = createErrorInsideBatch({
            "@SAP__common.longtextUrl": "Messages(1)/LongText",
            "@SAP__core.ContentID": "0.0",
            target: "",
            details: [{
                    code: "CODE0",
                    message: "Value 4.11 not allowed",
                    "@SAP__core.ContentID": "0.0",
                    target: "GrossAmount",
                    "@SAP__common.numericSeverity": 3
                }, {
                    code: "CODE1",
                    message: "Value 4.22 not allowed",
                    "@SAP__core.ContentID": "1.0",
                    target: "GrossAmount",
                    "@SAP__common.numericSeverity": 4
                }, {
                    code: "CODE2",
                    message: "Error cannot be assigned to a request",
                    target: "n/a",
                    "@SAP__common.numericSeverity": 2
                }]
        });
        aItems = that.oView.byId("table").getItems();
        that.expectChange("amount", ["4.11", "4.22"]).expectRequest({
            changeSetNo: 1,
            $ContentID: "0.0",
            method: "PATCH",
            url: "SalesOrderList('41')",
            payload: { GrossAmount: "4.11" }
        }, oError).expectRequest({
            changeSetNo: 1,
            $ContentID: "1.0",
            method: "PATCH",
            url: "SalesOrderList('42')",
            payload: { GrossAmount: "4.22" }
        }).expectMessages([{
                code: "CODE",
                descriptionUrl: sSalesOrderService + "Messages(1)/LongText",
                message: "Request intentionally failed",
                persistent: true,
                target: "/SalesOrderList('41')",
                technical: true,
                type: "Error"
            }, {
                code: "CODE0",
                message: "Value 4.11 not allowed",
                persistent: true,
                target: "/SalesOrderList('41')/GrossAmount",
                type: "Warning"
            }, {
                code: "CODE1",
                message: "Value 4.22 not allowed",
                persistent: true,
                target: "/SalesOrderList('42')/GrossAmount",
                type: "Error"
            }, {
                code: "CODE2",
                message: "n/a: Error cannot be assigned to a request",
                persistent: true,
                type: "Information"
            }]);
        that.oLogMock.expects("error").withExactArgs("Failed to update path /SalesOrderList('41')/GrossAmount", sinon.match("Request intentionally failed"), "sap.ui.model.odata.v4.Context");
        that.oLogMock.expects("error").withExactArgs("Failed to update path /SalesOrderList('42')/GrossAmount", sinon.match("Request intentionally failed"), "sap.ui.model.odata.v4.Context");
        aItems[0].getCells()[0].getBinding("value").setValue("4.11");
        aItems[1].getCells()[0].getBinding("value").setValue("4.22");
        return that.waitForChanges(assert);
    }).then(function () {
        return Promise.all([
            that.checkValueState(assert, aItems[0].getCells()[0], "Warning", "Value 4.11 not allowed"),
            that.checkValueState(assert, aItems[1].getCells()[0], "Error", "Value 4.22 not allowed")
        ]);
    });
});
QUnit.test("Lazy determination of ETag while PATCH", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), fnRespond, oSubmitBatchPromise, sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Input id=\"note\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
        "@odata.etag": "ETag0",
        Note: "Note",
        SalesOrderID: "42"
    }).expectChange("note", "Note");
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("note").getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag0" },
            payload: { Note: "Changed Note" }
        }, new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                "@odata.etag": "ETag1",
                Note: "Changed Note From Server"
            });
        })).expectChange("note", "Changed Note");
        oBinding.setValue("Changed Note");
        oSubmitBatchPromise = that.oModel.submitBatch("update");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1" },
            payload: { Note: "Changed Note while $batch is running" }
        }, {
            "@odata.etag": "ETag2",
            Note: "Changed Note From Server - 2"
        }).expectChange("note", "Changed Note while $batch is running").expectChange("note", "Changed Note From Server").expectChange("note", "Changed Note From Server - 2");
        oBinding.setValue("Changed Note while $batch is running");
        fnRespond();
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert),
            oSubmitBatchPromise
        ]);
    });
});
QUnit.test("Lazy determination of ETag while ODataContextBinding#execute", function (assert) {
    var sAction = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oBinding, oExecutePromise, oModel = createTeaBusiModel({ updateGroupId: "update" }), fnRespond, oSubmitBatchPromise, sView = "<FlexBox binding=\"{/EMPLOYEES('1')}\">\t<Input id=\"name\" value=\"{Name}\"/>\t<FlexBox id=\"action\" \t\t\tbinding=\"{" + sAction + "(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"teamId\" text=\"{TEAM_ID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')", {
        Name: "Jonathan Smith",
        "@odata.etag": "ETag0"
    }).expectChange("name", "Jonathan Smith").expectChange("teamId", null);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("name").getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            headers: { "If-Match": "ETag0" },
            payload: { Name: "Jonathan Mueller" }
        }, new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                "@odata.etag": "ETag1",
                Name: "Jonathan Mueller"
            });
        })).expectChange("name", "Jonathan Mueller");
        oBinding.setValue("Jonathan Mueller");
        oSubmitBatchPromise = that.oModel.submitBatch("update");
        return that.waitForChanges(assert);
    }).then(function () {
        oExecutePromise = that.oView.byId("action").getObjectBinding().setParameter("TeamID", "42").execute("update");
        fnRespond();
        return Promise.all([
            oSubmitBatchPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            headers: { "If-Match": "ETag1" },
            url: "EMPLOYEES('1')/" + sAction,
            payload: { TeamID: "42" }
        }, { TEAM_ID: "42" }).expectChange("teamId", "42");
        return Promise.all([
            that.oModel.submitBatch("update"),
            oExecutePromise,
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("PATCH entity, two subsequent PATCHes on this entity wait", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({
        updateGroupId: "update"
    }), aPromises = [], fnRespond, sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Input id=\"note\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')", {
        "@odata.etag": "ETag0",
        Note: "Note",
        SalesOrderID: "42"
    }).expectChange("note", "Note");
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("note").getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag0" },
            payload: { Note: "Changed Note" }
        }, new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                "@odata.etag": "ETag1",
                Note: "Changed Note From Server"
            });
        })).expectChange("note", "Changed Note");
        oBinding.setValue("Changed Note");
        aPromises.push(that.oModel.submitBatch("update"));
        return that.waitForChanges(assert);
    }).then(function () {
        var oMetaModel = oModel.getMetaModel(), fnFetchObject = oMetaModel.fetchObject, oMetaModelMock = that.mock(oMetaModel);
        that.expectChange("note", "(1) Changed Note while $batch is running");
        oMetaModelMock.expects("fetchObject").withExactArgs("/SalesOrderList/Note").callsFake(function () {
            return resolveLater(fnFetchObject.bind(oMetaModel, "/SalesOrderList/Note"));
        });
        oBinding.setValue("(1) Changed Note while $batch is running");
        aPromises.push(that.oModel.submitBatch("update"));
        oMetaModelMock.restore();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note", "(2) Changed Note while $batch is running");
        oBinding.setValue("(2) Changed Note while $batch is running");
        aPromises.push(that.oModel.submitBatch("update"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note", "Changed Note From Server").expectRequest({
            changeSetNo: 1,
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1" },
            payload: { Note: "(1) Changed Note while $batch is running" }
        }, {
            "@odata.etag": "ETag2",
            Note: "(1) Changed Note From Server - 2"
        }).expectRequest({
            changeSetNo: 2,
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1" },
            payload: { Note: "(2) Changed Note while $batch is running" }
        }, {
            "@odata.etag": "ETag2",
            Note: "(2) Changed Note From Server - 2"
        }).expectChange("note", "(1) Changed Note From Server - 2").expectChange("note", "(2) Changed Note From Server - 2");
        fnRespond();
        aPromises.push(that.waitForChanges(assert));
        return Promise.all(aPromises);
    });
});
QUnit.test("1=PATCH e1, 2=PATCH(e1,e2), 3=PATCH e2: request sequence 1,2,3", function (assert) {
    var oBinding42, oBinding77, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), aPromises = [], fnRespond42, sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Input id=\"note42\" value=\"{Note}\"/></FlexBox><FlexBox binding=\"{/SalesOrderList('77')}\">\t<Input id=\"note77\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
        "@odata.etag": "42ETag0",
        Note: "Note42",
        SalesOrderID: "42"
    }).expectChange("note42", "Note42").expectRequest("SalesOrderList('77')?$select=Note,SalesOrderID", {
        "@odata.etag": "77ETag0",
        Note: "Note77",
        SalesOrderID: "77"
    }).expectChange("note77", "Note77");
    return this.createView(assert, sView, oModel).then(function () {
        oBinding42 = that.oView.byId("note42").getBinding("value");
        oBinding77 = that.oView.byId("note77").getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "42ETag0" },
            payload: { Note: "42Changed Note" }
        }, new Promise(function (resolve) {
            fnRespond42 = resolve.bind(null, {
                "@odata.etag": "42ETag1",
                Note: "42Changed Note From Server"
            });
        })).expectChange("note42", "42Changed Note");
        oBinding42.setValue("42Changed Note");
        aPromises.push(that.oModel.submitBatch("update"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note42", "(1) 42Changed Note while $batch is running").expectChange("note77", "(1) 77Changed Note while $batch is running");
        oBinding42.setValue("(1) 42Changed Note while $batch is running");
        oBinding77.setValue("(1) 77Changed Note while $batch is running");
        aPromises.push(that.oModel.submitBatch("update"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note77", "77Changed Note");
        oBinding77.setValue("77Changed Note");
        aPromises.push(that.oModel.submitBatch("update"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note42", "42Changed Note From Server").expectRequest({
            changeSetNo: 1,
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "42ETag1" },
            payload: { Note: "(1) 42Changed Note while $batch is running" }
        }, {
            "@odata.etag": "42ETag2",
            Note: "42Changed Note From Server - 1"
        }).expectRequest({
            changeSetNo: 1,
            method: "PATCH",
            url: "SalesOrderList('77')",
            headers: { "If-Match": "77ETag0" },
            payload: { Note: "(1) 77Changed Note while $batch is running" }
        }, {
            "@odata.etag": "77ETag1",
            Note: "(1) 77Changed Note From Server - 1"
        }).expectRequest({
            changeSetNo: 2,
            method: "PATCH",
            url: "SalesOrderList('77')",
            headers: { "If-Match": "77ETag0" },
            payload: { Note: "77Changed Note" }
        }, {
            "@odata.etag": "77ETag1",
            Note: "(2) 77Changed Note From Server - 1"
        }).expectChange("note42", "42Changed Note From Server - 1").expectChange("note77", "(1) 77Changed Note From Server - 1").expectChange("note77", "(2) 77Changed Note From Server - 1");
        fnRespond42();
        aPromises.push(that.waitForChanges(assert));
        return Promise.all(aPromises);
    });
});
["update", "$auto"].forEach(function (sUpdateGroupId) {
    var sTitle = "Support of Draft: Test eventing for PATCH requests; updateGroupId = " + sUpdateGroupId;
    QUnit.test(sTitle, function (assert) {
        var fnAfterPatchCompleted, oBatchPromise0, oBatchPromise1, oModel = createSalesOrdersModel({
            autoExpandSelect: true,
            updateGroupId: sUpdateGroupId
        }), oParentBinding, iPatchCompleted = 0, iPatchSent = 0, fnReject, fnRespond, sView = "<FlexBox binding=\"{/SalesOrderList('42')}\" id=\"parent\">\t<Input id=\"lifecycleStatus\" value=\"{LifecycleStatus}\"/>\t<Input id=\"note\" value=\"{Note}\"/></FlexBox>", that = this;
        function getWaitForPatchCompletedPromise() {
            return new Promise(function (resolve) {
                fnAfterPatchCompleted = resolve;
            });
        }
        this.expectRequest("SalesOrderList('42')?$select=LifecycleStatus,Note,SalesOrderID", {
            "@odata.etag": "ETag0",
            LifecycleStatus: "N",
            Note: "Note",
            SalesOrderID: "42"
        }).expectChange("lifecycleStatus", "N").expectChange("note", "Note");
        return this.createView(assert, sView, oModel).then(function () {
            oParentBinding = that.oView.byId("parent").getElementBinding();
            oParentBinding.attachPatchCompleted(function (oEvent) {
                assert.strictEqual(oEvent.getSource(), oParentBinding);
                iPatchCompleted += 1;
                if (fnAfterPatchCompleted) {
                    fnAfterPatchCompleted();
                    fnAfterPatchCompleted = undefined;
                }
            });
            oParentBinding.attachPatchSent(function (oEvent) {
                assert.strictEqual(oEvent.getSource(), oParentBinding);
                iPatchSent += 1;
            });
            that.expectRequest({
                method: "PATCH",
                url: "SalesOrderList('42')",
                headers: { "If-Match": "ETag0" },
                payload: { Note: "Changed Note" }
            }, new Promise(function (_resolve, reject) {
                fnReject = reject;
            })).expectChange("note", "Changed Note");
            that.oView.byId("note").getBinding("value").setValue("Changed Note");
            if (sUpdateGroupId === "update") {
                oBatchPromise0 = that.oModel.submitBatch(sUpdateGroupId);
            }
            return that.waitForChanges(assert);
        }).then(function () {
            var oPromise = getWaitForPatchCompletedPromise();
            assert.strictEqual(iPatchSent, 1, "patchSent 1");
            assert.strictEqual(iPatchCompleted, 0, "patchCompleted 0");
            that.oLogMock.expects("error").withArgs("Failed to update path /SalesOrderList('42')/Note");
            fnReject(createErrorInsideBatch({ message: "Patch failed" }));
            return oPromise;
        }).then(function () {
            assert.strictEqual(iPatchSent, 1, "patchSent 1");
            assert.strictEqual(iPatchCompleted, 1, "patchCompleted 1");
            that.expectMessages([{
                    code: "CODE",
                    message: "Patch failed",
                    persistent: true,
                    technical: true,
                    technicalDetails: {
                        httpStatus: 500,
                        originalMessage: {
                            code: "CODE",
                            message: "Patch failed"
                        }
                    },
                    type: "Error"
                }]).expectChange("lifecycleStatus", "P").expectRequest({
                method: "PATCH",
                url: "SalesOrderList('42')",
                headers: { "If-Match": "ETag0" },
                payload: {
                    LifecycleStatus: "P",
                    Note: "Changed Note"
                }
            }, new Promise(function (resolve) {
                fnRespond = resolve.bind(null, {
                    "@odata.etag": "ETag1",
                    LifecycleStatus: "P",
                    Note: "Changed Note From Server"
                });
            }));
            that.oView.byId("lifecycleStatus").getBinding("value").setValue("P");
            if (sUpdateGroupId === "update") {
                oBatchPromise1 = that.oModel.submitBatch(sUpdateGroupId);
            }
            return that.waitForChanges(assert);
        }).then(function () {
            var oPromise = getWaitForPatchCompletedPromise();
            assert.strictEqual(iPatchSent, 2, "patchSent 2");
            assert.strictEqual(iPatchCompleted, 1, "patchCompleted 1");
            that.expectChange("note", "Changed Note From Server");
            fnRespond();
            return Promise.all([
                oBatchPromise0,
                oBatchPromise1,
                oPromise,
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            assert.strictEqual(iPatchSent, 2, "patchSent 2");
            assert.strictEqual(iPatchCompleted, 2, "patchCompleted 2");
        });
    });
});
QUnit.test("Auto-$expand/$select: Absolute ODCB with relative ODPB", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/EMPLOYEES(\\'2\\')', \t\tparameters : {$select : 'AGE,ROOM_ID,EMPLOYEE_2_TEAM/Name,com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee'}}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"city\" text=\"{LOCATION/City/CITYNAME}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')?$select=AGE,ID,LOCATION/City/CITYNAME,Name,ROOM_ID" + ",com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee" + "&$expand=EMPLOYEE_2_TEAM($select=Name,Team_Id)", {
        Name: "Frederic Fall",
        LOCATION: { City: { CITYNAME: "Walldorf" } },
        EMPLOYEE_2_TEAM: {
            Name: "Team #1",
            Team_Id: "1"
        }
    }).expectChange("name", "Frederic Fall").expectChange("city", "Walldorf");
    return this.createView(assert, sView, oModel).then(function () {
        assert.strictEqual(that.oView.byId("form").getBindingContext().getProperty("EMPLOYEE_2_TEAM/Name"), "Team #1");
    });
});
QUnit.test("ODCB: asynchronous $select to $expand", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/Equipments(Category=\\'C\\',ID=1)',\t\tparameters : {$select : 'EQUIPMENT_2_PRODUCT/SupplierIdentifier'}}\">\t<Text id=\"id\" text=\"{ID}\"/></FlexBox>", that = this;
    this.expectRequest("Equipments(Category='C',ID=1)?$select=Category,ID" + "&$expand=EQUIPMENT_2_PRODUCT($select=ID,SupplierIdentifier)", {
        Category: "C",
        ID: 1,
        EQUIPMENT_2_PRODUCT: {
            ID: 1010,
            SupplierIdentifier: 42
        }
    }).expectChange("id", "1");
    return this.createView(assert, sView, oModel).then(function () {
        assert.strictEqual(that.oView.byId("form").getBindingContext().getProperty("EQUIPMENT_2_PRODUCT/SupplierIdentifier"), 42);
    });
});
QUnit.test("ODLB: dynamic filter and $select to $expand", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES',\t\tparameters : {$select : 'EMPLOYEE_2_TEAM/Name'},\t\tfilters : {path : 'AGE', operator : 'GT', value1 : 42}}\">\t<Text text=\"{ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID&$expand=EMPLOYEE_2_TEAM($select=Name,Team_Id)" + "&$filter=AGE gt 42&$skip=0&$top=100", {
        value: [{
                ID: "1",
                EMPLOYEE_2_TEAM: {
                    Name: "Team #01",
                    Team_Id: "01"
                }
            }]
    });
    return this.createView(assert, sView, oModel).then(function () {
        assert.strictEqual(that.oView.byId("table").getItems()[0].getBindingContext().getProperty("EMPLOYEE_2_TEAM/Name"), "Team #01");
    });
});
QUnit.test("Auto-$expand/$select: Absolute ODCB, refresh", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{path : '/EMPLOYEES(\\'2\\')', parameters : {$select : 'AGE'}}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')?$select=AGE,ID,Name", { Name: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
    return this.createView(assert, sView, createTeaBusiModel({ autoExpandSelect: true })).then(function () {
        that.expectRequest("EMPLOYEES('2')?$select=AGE,ID,Name", { Name: "Jonathan Schmidt" }).expectChange("name", "Jonathan Schmidt");
        that.oView.byId("form").getObjectBinding().refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("reset invalid data state via property binding", function (assert) {
    return this.checkResetInvalidDataState(assert, function (oView) {
        return oView.byId("age").getBinding("text");
    });
});
QUnit.test("reset invalid data state via context binding", function (assert) {
    return this.checkResetInvalidDataState(assert, function (oView) {
        return oView.byId("form").getObjectBinding();
    });
});
QUnit.test("reset invalid data state via model", function (assert) {
    return this.checkResetInvalidDataState(assert, function (oView) {
        return oView.getModel();
    });
});
QUnit.test("Metadata access to MANAGERS which is not loaded yet", function (assert) {
    var sView = "<Table id=\"table\" items=\"{/MANAGERS}\">\t<Text id=\"item\" text=\"{@sapui.name}\"/></Table>", oModel = createTeaBusiModel().getMetaModel();
    this.expectChange("item", "ID", "/MANAGERS/ID").expectChange("item", "TEAM_ID", "/MANAGERS/TEAM_ID").expectChange("item", "Manager_to_Team", "/MANAGERS/Manager_to_Team");
    return this.createView(assert, sView, oModel);
});
QUnit.test("Metadata: Product name", function (assert) {
    var sView = "<Text id=\"product\" text=\"{/Equipments/EQUIPMENT_2_PRODUCT/@sapui.name}\"/>", oModel = createTeaBusiModel().getMetaModel();
    this.expectChange("product", "com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product");
    return this.createView(assert, sView, oModel);
});
QUnit.test("Metadata: Product name via form", function (assert) {
    var sView = "<FlexBox binding=\"{/Equipments/EQUIPMENT_2_PRODUCT/}\">\t<Text id=\"product\" text=\"{@sapui.name}\"/></FlexBox>", oModel = createTeaBusiModel().getMetaModel();
    this.expectChange("product", "com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product");
    return this.createView(assert, sView, oModel);
});
QUnit.test("Metadata: Manager -> Product", function (assert) {
    var oTable, sView = "<Table id=\"table\" items=\"{}\">\t<Text id=\"item\" text=\"{@sapui.name}\"/></Table>", oModel = createTeaBusiModel().getMetaModel(), that = this;
    this.expectChange("item", []);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("item", "ID", "/MANAGERS/ID").expectChange("item", "TEAM_ID", "/MANAGERS/TEAM_ID").expectChange("item", "Manager_to_Team", "/MANAGERS/Manager_to_Team");
        oTable.setBindingContext(oModel.getContext("/MANAGERS"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("item", "ID", "/Equipments/EQUIPMENT_2_PRODUCT/ID").expectChange("item", "Name", "/Equipments/EQUIPMENT_2_PRODUCT/Name").expectChange("item", "SupplierIdentifier", "/Equipments/EQUIPMENT_2_PRODUCT/SupplierIdentifier").expectChange("item", "ProductPicture", "/Equipments/EQUIPMENT_2_PRODUCT/ProductPicture").expectChange("item", "PRODUCT_2_CATEGORY", "/Equipments/EQUIPMENT_2_PRODUCT/PRODUCT_2_CATEGORY").expectChange("item", "PRODUCT_2_SUPPLIER", "/Equipments/EQUIPMENT_2_PRODUCT/PRODUCT_2_SUPPLIER");
        oTable.setBindingContext(oModel.getContext("/Equipments/EQUIPMENT_2_PRODUCT"));
        return that.waitForChanges(assert);
    });
});
QUnit.test("Avoid duplicate call to computed annotation", function (assert) {
    var oModel = createTeaBusiModel().getMetaModel(), sView = "<Text id=\"text\"\ttext=\"{/MANAGERS/TEAM_ID@@sap.ui.model.odata.v4.AnnotationHelper.getValueListType}\"/>";
    this.mock(AnnotationHelper).expects("getValueListType").returns("foo");
    this.expectChange("text", "foo");
    return this.createView(assert, sView, oModel);
});
QUnit.test("Auto-$expand/$select: Absolute ODCB with relative ODPB, $expand required", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{path : '/EMPLOYEES(\\'2\\')',\t\t\tparameters : {\t\t\t\t$expand : {\t\t\t\t\tEMPLOYEE_2_TEAM : {$select : 'Team_Id'}\t\t\t\t},\t\t\t\t$select : 'AGE'\t\t\t}\t\t}\">\t<Text id=\"name\" text=\"{EMPLOYEE_2_TEAM/Name}\"/>\t<Text id=\"TEAM_ID\" text=\"{EMPLOYEE_2_TEAM/TEAM_2_MANAGER/TEAM_ID}\"/></FlexBox>";
    this.expectRequest("EMPLOYEES('2')?$expand=EMPLOYEE_2_TEAM($select=Name,Team_Id" + ";$expand=TEAM_2_MANAGER($select=ID,TEAM_ID))&$select=AGE,ID", {
        AGE: 32,
        EMPLOYEE_2_TEAM: {
            Name: "SAP NetWeaver Gateway Content",
            Team_Id: "TEAM_03",
            TEAM_2_MANAGER: { TEAM_ID: "TEAM_03" }
        }
    }).expectChange("name", "SAP NetWeaver Gateway Content").expectChange("TEAM_ID", "TEAM_03");
    return this.createView(assert, sView, createTeaBusiModel({ autoExpandSelect: true }));
});
QUnit.test("Auto-$expand/$select: Dependent ODCB", function (assert) {
    var sView = "<FlexBox binding=\"{path : '/EMPLOYEES(\\'2\\')',\t\t\tparameters : {\t\t\t\t$expand : {\t\t\t\t\tEMPLOYEE_2_MANAGER : {$select : 'ID'}\t\t\t\t},\t\t\t\t$select : 'AGE'\t\t\t}\t\t}\">\t<FlexBox binding=\"{EMPLOYEE_2_TEAM}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</FlexBox></FlexBox>";
    this.expectRequest("EMPLOYEES('2')?$expand=EMPLOYEE_2_MANAGER" + "($select=ID),EMPLOYEE_2_TEAM($select=Name,Team_Id)&$select=AGE,ID", {
        AGE: 32,
        EMPLOYEE_2_MANAGER: { ID: "2" },
        EMPLOYEE_2_TEAM: { Name: "SAP NetWeaver Gateway Content" }
    }).expectChange("name", "SAP NetWeaver Gateway Content");
    return this.createView(assert, sView, createTeaBusiModel({ autoExpandSelect: true }));
});
QUnit.test("Create on a relative binding; check hasPendingChanges()", function (assert) {
    var oTeam2EmployeesBinding, oTeamBinding, that = this;
    return prepareTestForCreateOnRelativeBinding(this, assert).then(function () {
        oTeam2EmployeesBinding = that.oView.byId("table").getBinding("items");
        oTeamBinding = that.oView.byId("form").getObjectBinding();
        that.expectChange("id", ["", "2"]).expectChange("text", ["John Doe", "Frederic Fall"]);
        oTeam2EmployeesBinding.create({ ID: null, Name: "John Doe" });
        assert.ok(oTeam2EmployeesBinding.hasPendingChanges(), "pending changes; new entity");
        assert.ok(oTeamBinding.hasPendingChanges(), "pending changes; new entity");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "TEAMS('42')/TEAM_2_EMPLOYEES",
            payload: {
                ID: null,
                Name: "John Doe"
            }
        }, {
            ID: "7",
            Name: "John Doe"
        }).expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES('7')?$select=ID,Name", {
            ID: "7",
            Name: "The real John Doe"
        }).expectChange("id", ["7"]).expectChange("text", ["The real John Doe"]);
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.notOk(oTeam2EmployeesBinding.hasPendingChanges(), "no more pending changes");
        assert.notOk(oTeamBinding.hasPendingChanges(), "no more pending changes");
        return that.waitForChanges(assert);
    });
});
QUnit.test("setContext on relative binding is forbidden", function (assert) {
    var oTeam2EmployeesBinding, that = this;
    return prepareTestForCreateOnRelativeBinding(this, assert).then(function () {
        oTeam2EmployeesBinding = that.oView.byId("table").getBinding("items");
        that.oView.byId("form").getObjectBinding();
        that.expectChange("id", ["", "2"]).expectChange("text", ["John Doe", "Frederic Fall"]);
        oTeam2EmployeesBinding.create({ ID: null, Name: "John Doe" });
        return that.waitForChanges(assert);
    }).then(function () {
        assert.throws(function () {
            that.oView.byId("form").bindElement("/TEAMS('43')", { $expand: { TEAM_2_EMPLOYEES: { $select: "ID,Name" } } });
        }, new Error("setContext on relative binding is forbidden if a transient entity exists" + ": sap.ui.model.odata.v4.ODataListBinding: /TEAMS('42')|TEAM_2_EMPLOYEES"));
        that.oView.byId("form").getObjectBinding().destroy = function () { };
    });
});
[true, false].forEach(function (bUseReset) {
    var sTitle = "Create on a relative binding; " + (bUseReset ? "resetChanges()" : "delete");
    QUnit.test(sTitle, function (assert) {
        var oNewContext, oTeam2EmployeesBinding, oTeamBinding, that = this;
        return prepareTestForCreateOnRelativeBinding(this, assert).then(function () {
            oTeam2EmployeesBinding = that.oView.byId("table").getBinding("items");
            oTeamBinding = that.oView.byId("form").getObjectBinding();
            that.expectChange("id", ["", "2"]).expectChange("text", ["John Doe", "Frederic Fall"]);
            oNewContext = oTeam2EmployeesBinding.create({ ID: null, Name: "John Doe" });
            oNewContext.created().then(mustFail(assert), function (oError) {
                assert.ok(true, oError);
            });
            assert.ok(oTeam2EmployeesBinding.hasPendingChanges(), "binding has pending changes");
            assert.ok(oTeamBinding.hasPendingChanges(), "parent has pending changes");
            return that.waitForChanges(assert);
        }).then(function () {
            var oPromise;
            that.expectChange("id", ["2"]).expectChange("text", ["Frederic Fall"]);
            oPromise = bUseReset ? oTeam2EmployeesBinding.resetChanges() : oNewContext.delete();
            assert.notOk(oTeam2EmployeesBinding.hasPendingChanges(), "no pending changes");
            assert.notOk(oTeamBinding.hasPendingChanges(), "parent has no pending changes");
            return Promise.all([
                oPromise,
                checkCanceled(assert, oNewContext.created()),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("Bound action", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox id=\"form\" binding=\"{/EMPLOYEES('1')}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Input id=\"status\" value=\"{STATUS}\"/></FlexBox><FlexBox id=\"action\" \t\tbinding=\"{com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee(...)}\">\t<Text id=\"parameterName\" text=\"{$Parameter/EMPLOYEE/Name}\"/>\t<Text id=\"parameterAge\" text=\"{$Parameter/EMPLOYEE/AGE}\"/>\t<Input id=\"parameterTeamId\" value=\"{$Parameter/TeamID}\"/>\t<Text id=\"teamId\" text=\"{TEAM_ID}\"/></FlexBox>", sUrl = "EMPLOYEES('1')/com.sap.gateway.default.iwbep.tea_busi.v0001" + ".AcChangeTeamOfEmployee", that = this;
    this.expectRequest("EMPLOYEES('1')?$select=ID,Name,STATUS", {
        ID: "1",
        Name: "Jonathan Smith",
        STATUS: "",
        "@odata.etag": "ETag"
    }).expectChange("name", "Jonathan Smith").expectChange("status", "").expectChange("parameterAge").expectChange("parameterName").expectChange("parameterTeamId").expectChange("teamId");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("EMPLOYEES('1')?$select=AGE", {
            AGE: 23,
            "@odata.etag": "ETag"
        }).expectChange("parameterName", "Jonathan Smith").expectChange("parameterTeamId", "").expectChange("parameterAge", "23").expectChange("teamId", null);
        that.oView.byId("action").setBindingContext(that.oView.byId("form").getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("parameterTeamId", "42");
        that.oView.byId("parameterTeamId").getBinding("value").setValue("42");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            headers: { "If-Match": "ETag" },
            url: sUrl,
            payload: { TeamID: "42" }
        }, { TEAM_ID: "42" }).expectChange("teamId", "42");
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oError = createError({
            message: "Missing team ID",
            target: "TeamID",
            details: [{
                    message: "Illegal Status",
                    "@Common.numericSeverity": 4,
                    target: "EMPLOYEE/STATUS"
                }, {
                    message: "Target resolved to ''",
                    "@Common.numericSeverity": 4,
                    target: "EMPLOYEE"
                }, {
                    message: "Unexpected Error w/o target",
                    "@Common.numericSeverity": 4
                }]
        });
        that.oLogMock.expects("error").withExactArgs("Failed to execute /" + sUrl + "(...)", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataContextBinding");
        that.oLogMock.expects("error").withExactArgs("Failed to read path /" + sUrl + "(...)/TEAM_ID", sinon.match(oError.message), "sap.ui.model.odata.v4.ODataPropertyBinding");
        that.expectRequest({
            method: "POST",
            headers: { "If-Match": "ETag" },
            url: sUrl,
            payload: { TeamID: "" }
        }, oError).expectMessages([{
                code: "CODE",
                message: "Missing team ID",
                persistent: true,
                target: "/EMPLOYEES('1')/com.sap.gateway.default.iwbep.tea_busi.v0001" + ".AcChangeTeamOfEmployee(...)/$Parameter/TeamID",
                technical: true,
                type: "Error"
            }, {
                message: "Illegal Status",
                persistent: true,
                target: "/EMPLOYEES('1')/STATUS",
                type: "Error"
            }, {
                message: "Target resolved to ''",
                persistent: true,
                target: "/EMPLOYEES('1')",
                type: "Error"
            }, {
                message: "Unexpected Error w/o target",
                persistent: true,
                type: "Error"
            }]).expectChange("parameterTeamId", "").expectChange("teamId", null);
        return Promise.all([
            that.oView.byId("action").getObjectBinding().setParameter("TeamID", "").execute().then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0, oError);
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return Promise.all([
            that.checkValueState(assert, "status", "Error", "Illegal Status"),
            that.checkValueState(assert, "parameterTeamId", "Error", "Missing team ID")
        ]);
    });
});
QUnit.test("Bound action on collection", function (assert) {
    var oHeaderContext, oModel = createSpecialCasesModel({ autoExpandSelect: true }), oReturnValueContext, sView = "<Table id=\"table\" items=\"{path : '/Artists', parameters : {$select : 'Messages'}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table><Input id=\"nameCreated\" value=\"{Name}\"/>", that = this;
    this.expectRequest("Artists?$select=ArtistID,IsActiveEntity,Messages,Name&$skip=0&$top=100", {
        value: [{
                "@odata.etag": "ETag",
                ArtistID: "XYZ",
                IsActiveEntity: true,
                Messages: [],
                Name: "Missy Eliot"
            }]
    }).expectChange("name", "Missy Eliot").expectChange("nameCreated");
    return this.createView(assert, sView, oModel).then(function () {
        oHeaderContext = that.oView.byId("table").getBinding("items").getHeaderContext();
        that.expectRequest("Artists/special.cases.GetDefaults()", {
            ArtistID: "ABC",
            IsActiveEntity: false,
            Name: "DefaultName"
        });
        return Promise.all([
            that.oModel.bindContext("special.cases.GetDefaults(...)", oHeaderContext).execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        var oAction, oDefaults = aResults[0];
        that.expectRequest({
            method: "POST",
            url: "Artists/special.cases.Create" + "?$select=ArtistID,IsActiveEntity,Messages,Name",
            payload: {
                ArtistID: "ABC",
                IsActiveEntity: false,
                Name: "DefaultName"
            }
        }, {
            "@odata.etag": "ETagAfterCreate",
            ArtistID: "ABC",
            IsActiveEntity: false,
            Messages: [{
                    code: "23",
                    message: "Just A Message",
                    numericSeverity: 1,
                    transition: false,
                    target: "Name"
                }],
            Name: "Queen"
        }).expectMessages([{
                code: "23",
                message: "Just A Message",
                target: "/Artists(ArtistID='ABC',IsActiveEntity=false)/Name",
                type: "Success"
            }]);
        oAction = that.oModel.bindContext("special.cases.Create(...)", oHeaderContext, { $$inheritExpandSelect: true }).setParameter("ArtistID", oDefaults.getObject("ArtistID")).setParameter("IsActiveEntity", oDefaults.getObject("IsActiveEntity")).setParameter("Name", oDefaults.getObject("Name"));
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        oReturnValueContext = aPromiseResults[0];
        that.expectChange("nameCreated", "Queen");
        that.oView.byId("nameCreated").setBindingContext(oReturnValueContext);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, "nameCreated", "Success", "Just A Message");
    }).then(function () {
        var sResourcePath = "Artists(ArtistID='ABC',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Messages,Name", sErrorMessage = "sap.ui.model.odata.v4.ODataContextBinding:" + " /Artists|special.cases.Create(...)" + " is ignoring response from inactive cache: /special/cases/" + sResourcePath;
        that.expectRequest(sResourcePath, {
            ArtistID: "ABC",
            IsActiveEntity: false,
            Name: "n/a"
        }).expectCanceledError("Failed to read path /Artists/special.cases.Create(...)", sErrorMessage).expectCanceledError("Failed to read path" + " /Artists(ArtistID='ABC',IsActiveEntity=false)/Name", sErrorMessage).expectRequest(sResourcePath, {
            "@odata.etag": "ETagAfterRefresh",
            ArtistID: "ABC",
            IsActiveEntity: false,
            Messages: [{
                    code: "23",
                    message: "Just Another Message",
                    numericSeverity: 1,
                    transition: false,
                    target: "Name"
                }],
            Name: "After Refresh"
        }).expectChange("nameCreated", "After Refresh").expectMessages([{
                code: "23",
                message: "Just Another Message",
                target: "/Artists(ArtistID='ABC',IsActiveEntity=false)/Name",
                type: "Success"
            }]);
        return Promise.all([
            oReturnValueContext.requestRefresh(),
            oReturnValueContext.requestRefresh(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "nameCreated", "Success", "Just Another Message");
    }).then(function () {
        that.expectChange("nameCreated", "TAFKAP").expectRequest({
            headers: { "If-Match": "ETagAfterRefresh" },
            method: "PATCH",
            payload: { Name: "TAFKAP" },
            url: "Artists(ArtistID='ABC',IsActiveEntity=false)"
        }, {
            ArtistID: "ABC",
            IsActiveEntity: false,
            Messages: [{
                    code: "CODE",
                    message: "What a nice acronym!",
                    numericSeverity: 1,
                    transition: false,
                    target: "Name"
                }],
            Name: "T.A.F.K.A.P."
        }).expectChange("nameCreated", "T.A.F.K.A.P.").expectMessages([{
                code: "CODE",
                message: "What a nice acronym!",
                target: "/Artists(ArtistID='ABC',IsActiveEntity=false)/Name",
                type: "Success"
            }]);
        return Promise.all([
            oReturnValueContext.setProperty("Name", "TAFKAP"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "nameCreated", "Success", "What a nice acronym!");
    });
});
QUnit.test("Read entity for a relative ListBinding, call bound action", function (assert) {
    var oModel = createTeaBusiModel(), that = this, sView = "<FlexBox id=\"form\" binding=\"{path : '/TEAMS(\\'42\\')',\tparameters : {$expand : {TEAM_2_EMPLOYEES : {$select : 'ID'}}}}\">\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"id\" text=\"{ID}\"/>\t</Table></FlexBox>";
    this.expectRequest("TEAMS('42')?$expand=TEAM_2_EMPLOYEES($select=ID)", {
        TEAM_2_EMPLOYEES: [{ ID: "2" }]
    }).expectChange("id", ["2"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oEmployeeContext = that.oView.byId("table").getItems()[0].getBindingContext(), oAction = that.oModel.bindContext("com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee(...)", oEmployeeContext);
        that.expectRequest({
            method: "POST",
            url: "TEAMS('42')/TEAM_2_EMPLOYEES('2')/" + "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee",
            payload: { TeamID: "TEAM_02" }
        }, { ID: "2" });
        oAction.setParameter("TeamID", "TEAM_02");
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Bound action with context refresh which removes the context", function (assert) {
    var oAction, oContext, oExecutionPromise, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\"\t\titems=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tfilters : {path : 'TEAM_ID', operator : 'EQ', value1 : '77'},\t\t\tparameters : {$count : true}\t\t}\">\t<Text id=\"text\" text=\"{Name}\"/>\t<Text id=\"teamId\" text=\"{TEAM_ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$count=true&$filter=TEAM_ID eq '77'&$select=ID,Name,TEAM_ID" + "&$skip=0&$top=100", {
        "@odata.count": 3,
        value: [
            { ID: "0", Name: "Frederic Fall", TEAM_ID: "77" },
            { ID: "1", Name: "Jonathan Smith", TEAM_ID: "77" },
            { ID: "2", Name: "Peter Burke", TEAM_ID: "77" }
        ]
    }).expectChange("text", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]).expectChange("teamId", ["77", "77", "77"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "EMPLOYEES('0')/com.sap.gateway.default.iwbep.tea_busi.v0001" + ".AcChangeTeamOfEmployee",
            payload: { TeamID: "42" }
        }, { TEAM_ID: "42" }).expectRequest("EMPLOYEES?$filter=(TEAM_ID eq '77') and ID eq '0'" + "&$select=ID,Name,TEAM_ID", { value: [] }).expectChange("text", ["Jonathan Smith", "Peter Burke"]);
        oContext = that.oView.byId("table").getItems()[0].getBindingContext();
        oAction = oModel.bindContext("com.sap.gateway.default.iwbep.tea_busi.v0001" + ".AcChangeTeamOfEmployee(...)", oContext);
        oExecutionPromise = oAction.setParameter("TeamID", "42").execute();
        return Promise.all([
            oContext.requestRefresh(undefined, true),
            oExecutionPromise,
            that.waitForChanges(assert)
        ]);
    });
});
[false, true].forEach(function (bHasETag) {
    QUnit.test("Bound action w/ overloading, has ETag: " + bHasETag, function (assert) {
        var oEmployee = bHasETag ? {
            Name: "Jonathan Smith",
            "@odata.etag": "ETag"
        } : { Name: "Jonathan Smith" }, sView = "<FlexBox binding=\"{/EMPLOYEES('1')}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<FlexBox id=\"action\" \t\t\tbinding=\"{com.sap.gateway.default.iwbep.tea_busi.v0001.__FAKE__AcOverload(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"isManager\" text=\"{Is_Manager}\"/>\t</FlexBox></FlexBox>", that = this;
        this.expectRequest("EMPLOYEES('1')", oEmployee).expectChange("name", "Jonathan Smith").expectChange("isManager", null);
        return this.createView(assert, sView).then(function () {
            that.expectRequest({
                method: "POST",
                headers: bHasETag ? { "If-Match": "*" } : {},
                url: "EMPLOYEES('1')/com.sap.gateway.default.iwbep.tea_busi.v0001" + ".__FAKE__AcOverload",
                payload: { Message: "The quick brown fox jumps over the lazy dog" }
            }, { Is_Manager: true }).expectChange("isManager", "Yes");
            return Promise.all([
                that.oView.byId("action").getObjectBinding().setParameter("Message", "The quick brown fox jumps over the lazy dog").execute(undefined, true),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("Auto-$expand/$select: Function import", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"function\" binding=\"{/GetEmployeeByID(...)}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("name", null);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='1')", { Name: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
        return Promise.all([
            that.oView.byId("function").getObjectBinding().setParameter("EmployeeID", "1").execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Auto-$expand/$select: Instance annotation in child path", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"ETag\" text=\"{\t\tpath : '@odata.etag',\t\ttype : 'sap.ui.model.odata.type.String'}\"/></FlexBox>";
    this.expectRequest("EMPLOYEES('2')?$select=ID", {
        "@odata.etag": "ETagValue",
        ID: "2"
    }).expectChange("ETag", "ETagValue");
    return this.createView(assert, sView, oModel);
});
QUnit.test("Auto-$expand/$select: Dependent ODCB with own request", function (assert) {
    var sView = "<FlexBox binding=\"{path : '/EMPLOYEES(\\'2\\')',\t\t\tparameters : {\t\t\t\t$expand : {\t\t\t\t\tEMPLOYEE_2_MANAGER : {$select : 'ID'},\t\t\t\t\tEMPLOYEE_2_TEAM : {\t\t\t\t\t\t$expand : {\t\t\t\t\t\t\tTEAM_2_EMPLOYEES : {\t\t\t\t\t\t\t\t$orderby : 'AGE'\t\t\t\t\t\t\t}\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}\">\t<FlexBox binding=\"{path : 'EMPLOYEE_2_TEAM',\t\t\t\tparameters : {\t\t\t\t\t$expand : {\t\t\t\t\t\tTEAM_2_EMPLOYEES : {\t\t\t\t\t\t\t$orderby : 'AGE desc'\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t}\t\t\t}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</FlexBox>\t<Text id=\"age\" text=\"{AGE}\"/></FlexBox>";
    this.expectRequest("EMPLOYEES('2')/EMPLOYEE_2_TEAM" + "?$expand=TEAM_2_EMPLOYEES($orderby=AGE desc)&$select=Name,Team_Id", {
        Name: "SAP NetWeaver Gateway Content",
        TEAM_2_EMPLOYEES: [
            { AGE: 32 },
            { AGE: 29 }
        ]
    }).expectRequest("EMPLOYEES('2')?$expand=EMPLOYEE_2_MANAGER($select=ID)," + "EMPLOYEE_2_TEAM($expand=TEAM_2_EMPLOYEES($orderby=AGE))&$select=AGE,ID", {
        AGE: 32,
        EMPLOYEE_2_MANAGER: { ID: "2" },
        EMPLOYEE_2_TEAM: {
            TEAM_2_EMPLOYEES: [
                { AGE: 29 },
                { AGE: 32 }
            ]
        }
    }).expectChange("name", "SAP NetWeaver Gateway Content").expectChange("age", "32");
    return this.createView(assert, sView, createTeaBusiModel({ autoExpandSelect: true }));
});
QUnit.test("Absolute ODLB with auto-$expand/$select: filter via API", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oListBinding, sView = "<Table id=\"table\"\t\titems=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tfilters : {path : 'AGE', operator : 'LT', value1 : '77'},\t\t\tparameters : {$orderby : 'Name', $select : 'AGE'}\t\t}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$orderby=Name&$select=AGE,ID,Name&$filter=AGE lt 77" + "&$skip=0&$top=100", {
        value: [
            { Name: "Frederic Fall" },
            { Name: "Jonathan Smith" },
            { Name: "Peter Burke" }
        ]
    }).expectChange("text", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]);
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("EMPLOYEES?$orderby=Name&$select=AGE,ID,Name" + "&$filter=AGE gt 42&$skip=0&$top=100", {
            value: [
                { Name: "Frederic Fall" },
                { Name: "Peter Burke" }
            ]
        }).expectChange("text", [, "Peter Burke"]);
        oListBinding.filter(new Filter("AGE", FilterOperator.GT, 42));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES?$orderby=Name&$select=AGE,ID,Name&$skip=0&$top=100", {
            value: [
                { Name: "Frederic Fall" },
                { Name: "Jonathan Smith" },
                { Name: "Peter Burke" }
            ]
        }).expectChange("text", [, "Jonathan Smith", "Peter Burke"]);
        oListBinding.filter();
        return that.waitForChanges(assert);
    });
});
QUnit.test("ODLB with auto-$expand/$select below ODCB: filter via API", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/TEAMS('2')}\">\t<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$orderby : 'Name'}}\">\t\t<Text id=\"text\" text=\"{Name}\"/>\t</Table>\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS('2')?$select=Name,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($orderby=Name;$select=ID,Name)", {
        Name: "Team 2",
        Team_Id: "2",
        TEAM_2_EMPLOYEES: [
            { Name: "Frederic Fall" },
            { Name: "Jonathan Smith" },
            { Name: "Peter Burke" }
        ]
    }).expectChange("name", "Team 2").expectChange("text", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("TEAMS('2')/TEAM_2_EMPLOYEES?$orderby=Name&$select=ID,Name" + "&$filter=AGE gt 42&$skip=0&$top=100", {
            value: [
                { Name: "Frederic Fall" },
                { Name: "Peter Burke" }
            ]
        }).expectChange("text", [, "Peter Burke"]);
        oListBinding.filter(new Filter("AGE", FilterOperator.GT, 42));
        assert.strictEqual(oListBinding.getContext().getProperty("Team_Id"), "2");
        return that.waitForChanges(assert);
    });
});
testViewStart("Auto-$expand/$select: no $apply inside $expand", "<FlexBox binding=\"{/TEAMS('42')}\">\t<Table items=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$apply : 'filter(AGE lt 42)'}}\">\t\t<Text id=\"text\" text=\"{Name}\"/>\t</Table></FlexBox>", {
    "TEAMS('42')/TEAM_2_EMPLOYEES?$apply=filter(AGE lt 42)&$select=ID,Name&$skip=0&$top=100": {
        value: [
            { Name: "Frederic Fall" },
            { Name: "Peter Burke" }
        ]
    }
}, { text: ["Frederic Fall", "Peter Burke"] }, createTeaBusiModel({ autoExpandSelect: true }));
QUnit.test("Auto-$expand/$select: no canonical path for virtual context", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table items=\"{/TEAMS}\">\t<List items=\"{path : 'TEAM_2_EMPLOYEES',\t\tparameters : {$apply : 'filter(AGE lt 42)'}, templateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"text\" text=\"{Name}\"/>\t\t</CustomListItem>\t</List></Table>";
    this.expectRequest("TEAMS?$select=Team_Id&$skip=0&$top=100", {
        value: [{ Team_Id: "TEAM_01" }]
    }).expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$apply=filter(AGE lt 42)" + "&$select=ID,Name&$skip=0&$top=100", {
        value: [
            { Name: "Frederic Fall" },
            { Name: "Peter Burke" }
        ]
    }).expectChange("text", ["Frederic Fall", "Peter Burke"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Auto-$expand/$select: simple list/detail", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"list\" items=\"{/TEAMS}\">\t<Text id=\"text0\" text=\"{Team_Id}\"/></Table><FlexBox id=\"detail\" binding=\"{}\">\t<Text id=\"text1\" text=\"{Team_Id}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS?$select=Team_Id&$skip=0&$top=100", {
        value: [{ Team_Id: "TEAM_01" }]
    }).expectChange("text0", ["TEAM_01"]).expectChange("text1");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("list").getItems()[0].getBindingContext();
        that.expectChange("text1", "TEAM_01");
        that.oView.byId("detail").setBindingContext(oContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Auto-$expand/$select: list/detail with separate requests", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"list\" items=\"{/TEAMS}\">\t<Text id=\"currency\" text=\"{BudgetCurrency}\"/>\t<Text id=\"id\" text=\"{Team_Id}\"/></Table><FlexBox id=\"detail\" binding=\"{}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"budget\" text=\"{Budget}\"/>\t<Input id=\"budgetCurrency\" value=\"{BudgetCurrency}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS?$select=BudgetCurrency,Team_Id&$skip=0&$top=100", {
        value: [
            { BudgetCurrency: "EUR", Team_Id: "TEAM_01" },
            { BudgetCurrency: "EUR", Team_Id: "TEAM_02" }
        ]
    }).expectChange("currency", ["EUR", "EUR"]).expectChange("id", ["TEAM_01", "TEAM_02"]).expectChange("name").expectChange("budget");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext;
        oTable = that.oView.byId("list");
        oContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest("TEAMS('TEAM_01')?$select=Budget,Name", { Budget: "456", Name: "Team #1" }).expectChange("name", "Team #1").expectChange("budget", "456");
        that.oView.byId("detail").setBindingContext(oContext);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.setInvalidBudgetCurrency(assert);
    }).then(function () {
        that.expectRequest("TEAMS('TEAM_02')?$select=Budget,Name", { Budget: "789", Name: "Team #2" }).expectChange("name", "Team #2").expectChange("budget", "789");
        that.expectMessages([]);
        that.oView.byId("detail").setBindingContext(oTable.getItems()[1].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(that.oView.byId("budgetCurrency").getValue(), "EUR");
        return that.checkValueState(assert, "budgetCurrency", "None", "");
    }).then(function () {
        that.expectRequest("TEAMS?$select=BudgetCurrency,Team_Id&$skip=0&$top=100", {
            value: [
                { BudgetCurrency: "RBL", Team_Id: "TEAM_01" },
                { BudgetCurrency: "RBL", Team_Id: "TEAM_02" }
            ]
        }).expectChange("currency", ["RBL", "RBL"]).expectRequest("TEAMS('TEAM_02')?$select=Budget,Name", { Budget: "123", Name: "Gzprm" }).expectChange("name", "Gzprm").expectChange("budget", "123");
        return Promise.all([
            oTable.getBinding("items").requestRefresh(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Auto-$expand/$select: use factory function", function (assert) {
    var that = this, sView = "<Table id=\"table\" items=\"{\t\tfactory : '.employeesListFactory',\t\tparameters : {\t\t\t$select : 'AGE,ID'\t\t},\t\tpath : '/EMPLOYEES'\t}\">\t<columns><Column/></columns></Table>", oController = {
        employeesListFactory: function (sID, oContext) {
            var sAge, oListItem;
            sAge = oContext.getProperty("AGE");
            if (sAge > 30) {
                oListItem = new Text(sID, { text: "{AGE}" });
            }
            else {
                oListItem = new Text(sID, { text: "{ID}" });
            }
            that.setFormatter(assert, oListItem, "text", true);
            return new ColumnListItem({ cells: [oListItem] });
        }
    };
    this.expectRequest("EMPLOYEES?$select=AGE,ID&$skip=0&$top=100", {
        value: [
            { AGE: 29, ID: "R2D2" },
            { AGE: 36, ID: "C3PO" }
        ]
    }).expectChange("text", ["R2D2", "36"]);
    return this.createView(assert, sView, createTeaBusiModel({ autoExpandSelect: true }), oController);
});
QUnit.test("CPOUI5ODATAV4-459: Context binding with invalid value", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"budget\" text=\"{Budget}\"/>\t<Input id=\"budgetCurrency\" value=\"{BudgetCurrency}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$select=Budget,BudgetCurrency,Team_Id", { Budget: "456", BudgetCurrency: "EUR", Team_Id: "Team_01" }).expectChange("budget", "456");
    return this.createView(assert, sView, oModel).then(function () {
        return that.setInvalidBudgetCurrency(assert);
    }).then(function () {
        that.expectRequest("TEAMS('TEAM_01')?$select=Budget,BudgetCurrency,Team_Id", { Budget: "789", BudgetCurrency: "EUR", Team_Id: "Team_01" }).expectChange("budget", "789");
        that.expectMessages([]);
        that.oView.byId("form").getObjectBinding().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(that.oView.byId("budgetCurrency").getValue(), "EUR");
        return that.checkValueState(assert, "budgetCurrency", "None", "");
    });
});
QUnit.test("BCP: 2180177518", function (assert) {
    var oInput, oModel = createTeaBusiModel({ updateGroupId: "noSubmit" }), oTransientContext, sView = "<Input id=\"budgetCurrency\" value=\"{BudgetCurrency}\"/>", that = this;
    function waitForChange(oBinding) {
        return new Promise(function (resolve) {
            oBinding.attachEventOnce("change", function () {
                resolve();
            });
        });
    }
    return this.createView(assert, sView, oModel).then(function () {
        oInput = that.oView.byId("budgetCurrency");
        assert.strictEqual(oInput.getValue(), "");
        oTransientContext = oModel.bindList("/TEAMS").create();
        oInput.setBindingContext(oTransientContext);
        return waitForChange(oInput.getBinding("value"));
    }).then(function () {
        assert.strictEqual(oInput.getValue(), "");
        return that.setInvalidBudgetCurrency(assert, null);
    }).then(function () {
        oInput.setBindingContext(null);
        return waitForChange(oInput.getBinding("value"));
    }).then(function () {
        assert.strictEqual(oInput.getValue(), "");
        return that.checkValueState(assert, oInput, "None", "");
    });
});
QUnit.test("submitBatch() after delete()", function (assert) {
    var sView = "<FlexBox binding=\"{/TEAMS('42')}\" id=\"form\">\t<Text id=\"text\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS('42')", {
        Team_Id: "TEAM_01",
        Name: "Team #1"
    }).expectChange("text", "Team #1");
    return this.createView(assert, sView).then(function () {
        var oContext = that.oView.byId("form").getBindingContext(), oPromise;
        that.expectRequest({
            method: "DELETE",
            url: "TEAMS('42')"
        }).expectChange("text", null);
        oPromise = oContext.delete();
        assert.throws(function () {
            oContext.getModel().submitBatch("$direct");
        });
        return Promise.all([
            oPromise,
            that.waitForChanges(assert)
        ]);
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    var sTitle = "submitBatch after changeParameters, autoExpandSelect = " + bAutoExpandSelect;
    QUnit.test(sTitle, function (assert) {
        var mFrederic = {
            ID: "2",
            Name: "Frederic Fall"
        }, mJonathan = {
            ID: "3",
            Name: "Jonathan Smith"
        }, oModel = createTeaBusiModel({ autoExpandSelect: bAutoExpandSelect }), sUrlPrefix = bAutoExpandSelect ? "EMPLOYEES?$select=ID,Name&" : "EMPLOYEES?", sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', parameters : {$$groupId : 'group'}}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", that = this;
        this.expectChange("text", []);
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest(sUrlPrefix + "$skip=0&$top=100", { value: [mFrederic, mJonathan] }).expectChange("text", ["Frederic Fall", "Jonathan Smith"]);
            return Promise.all([
                oModel.submitBatch("group"),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            var oListBinding = that.oView.byId("table").getBinding("items");
            that.expectRequest(sUrlPrefix + "$orderby=Name desc&$skip=0&$top=100", { value: [mJonathan, mFrederic] }).expectChange("text", ["Jonathan Smith", "Frederic Fall"]);
            oListBinding.changeParameters({ $orderby: "Name desc" });
            return Promise.all([
                oModel.submitBatch("group"),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("submitBatch after resume w/ auto-$expand/$select", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\"\t\titems=\"{path : '/EMPLOYEES', parameters : {$$groupId : 'group'}, suspended : true}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", that = this;
    this.expectChange("text", []);
    return this.createView(assert, sView, oModel).then(function () {
        return oModel.getMetaModel().requestObject("/");
    }).then(function () {
        that.expectEvents(assert, "sap.ui.model.odata.v4.ODataListBinding: /EMPLOYEES", [
            [, "change", { detailedReason: "AddVirtualContext", reason: "change" }],
            [, "dataRequested"],
            [, "change", { detailedReason: "RemoveVirtualContext", reason: "change" }],
            [, "refresh", { reason: "refresh" }],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]).expectRequest("EMPLOYEES?$select=ID,Name&$skip=0&$top=100", {
            value: [
                { ID: "2", Name: "Frederic Fall" },
                { ID: "3", Name: "Jonathan Smith" }
            ]
        }).expectChange("text", ["Frederic Fall", "Jonathan Smith"]);
        that.oView.byId("table").getBinding("items").resume();
        return Promise.all([
            oModel.submitBatch("group"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Pending change in hidden cache", function (assert) {
    var oListBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"teamSet\" items=\"{/TEAMS}\">\t<Text id=\"teamId\" text=\"{Team_Id}\"/></Table><Table id=\"employeeSet\" items=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$orderby : 'Name'}}\">\t<Text id=\"employeeId\" text=\"{ID}\"/></Table><FlexBox id=\"objectPage\" binding=\"{path : '', parameters : {$$updateGroupId : 'update'}}\">\t<Input id=\"employeeName\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS?$select=Team_Id&$skip=0&$top=100", {
        value: [
            { Team_Id: "1" },
            { Team_Id: "2" }
        ]
    }).expectChange("teamId", ["1", "2"]).expectChange("employeeId", []).expectChange("employeeName");
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("teamSet").getBinding("items");
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?$orderby=Name&$select=ID&$skip=0&$top=100", {
            value: [
                { ID: "01" },
                { ID: "02" }
            ]
        }).expectChange("employeeId", ["01", "02"]);
        that.oView.byId("employeeSet").setBindingContext(that.oView.byId("teamSet").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES('01')?$select=ID,Name", {
            ID: "01",
            Name: "Frederic Fall",
            "@odata.etag": "ETag"
        }).expectChange("employeeName", "Frederic Fall");
        that.oView.byId("objectPage").setBindingContext(that.oView.byId("employeeSet").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("employeeName", "foo");
        that.oView.byId("employeeName").getBinding("value").setValue("foo");
        assert.ok(oListBinding.hasPendingChanges());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('2')/TEAM_2_EMPLOYEES?$orderby=Name&$select=ID&$skip=0&$top=100", {
            value: [
                { ID: "03" },
                { ID: "04" }
            ]
        }).expectChange("employeeId", ["03", "04"]).expectChange("employeeName", null);
        that.oView.byId("employeeSet").setBindingContext(that.oView.byId("teamSet").getItems()[1].getBindingContext());
        assert.notOk(oListBinding.hasPendingChanges(), "Binding lost context -> no pending changes");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('2')/TEAM_2_EMPLOYEES('03')?$select=ID,Name", {
            ID: "03",
            Name: "Jonathan Smith",
            "@odata.etag": "ETag"
        }).expectChange("employeeName", "Jonathan Smith");
        that.oView.byId("objectPage").setBindingContext(that.oView.byId("employeeSet").getItems()[0].getBindingContext());
        assert.ok(oListBinding.hasPendingChanges(), "Binding hierarchy restored -> has pending changes");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            headers: { "If-Match": "ETag" },
            method: "PATCH",
            payload: { Name: "foo" },
            url: "EMPLOYEES('01')"
        });
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("employeeId", ["01", "02"]).expectChange("employeeName", null);
        that.oView.byId("employeeSet").setBindingContext(that.oView.byId("teamSet").getItems()[0].getBindingContext());
        assert.notOk(oListBinding.hasPendingChanges(), "no pending changes after submitBatch");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("employeeName", "foo");
        that.oView.byId("objectPage").setBindingContext(that.oView.byId("employeeSet").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    });
});
[{
        filter: new Filter({
            condition: new Filter("soitem/GrossAmount", FilterOperator.GT, "1000"),
            operator: FilterOperator.Any,
            path: "SO_2_SOITEM",
            variable: "soitem"
        }),
        request: "SO_2_SOITEM/any(soitem:soitem/GrossAmount gt 1000)"
    }, {
        filter: new Filter({
            condition: new Filter({
                and: true,
                filters: [
                    new Filter("soitem/GrossAmount", FilterOperator.GT, "1000"),
                    new Filter("soitem/NetAmount", FilterOperator.LE, "3000")
                ]
            }),
            operator: FilterOperator.Any,
            path: "SO_2_SOITEM",
            variable: "soitem"
        }),
        request: "SO_2_SOITEM/any(soitem:soitem/GrossAmount gt 1000 and" + " soitem/NetAmount le 3000)"
    }, {
        filter: new Filter({
            condition: new Filter({
                filters: [
                    new Filter("soitem/GrossAmount", FilterOperator.GT, "1000"),
                    new Filter({ operator: FilterOperator.Any, path: "soitem/SOITEM_2_SCHDL" })
                ]
            }),
            operator: FilterOperator.Any,
            path: "SO_2_SOITEM",
            variable: "soitem"
        }),
        request: "SO_2_SOITEM/any(soitem:soitem/GrossAmount gt 1000 or" + " soitem/SOITEM_2_SCHDL/any())"
    }, {
        filter: new Filter({
            condition: new Filter({
                filters: [
                    new Filter("soitem/GrossAmount", FilterOperator.GT, "1000"),
                    new Filter({
                        condition: new Filter({
                            and: true,
                            filters: [
                                new Filter("schedule/DeliveryDate", FilterOperator.LT, "2017-01-01T05:50Z"),
                                new Filter("soitem/GrossAmount", FilterOperator.LT, "2000")
                            ]
                        }),
                        operator: FilterOperator.All,
                        path: "soitem/SOITEM_2_SCHDL",
                        variable: "schedule"
                    })
                ]
            }),
            operator: FilterOperator.Any,
            path: "SO_2_SOITEM",
            variable: "soitem"
        }),
        request: "SO_2_SOITEM/any(soitem:soitem/GrossAmount gt 1000 or" + " soitem/SOITEM_2_SCHDL/all(schedule:schedule/DeliveryDate lt 2017-01-01T05:50Z" + " and soitem/GrossAmount lt 2000))"
    }].forEach(function (oFixture) {
    QUnit.test("filter all/any on list binding " + oFixture.request, function (assert) {
        var sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"text\" text=\"{SalesOrderID}\"/></Table>", that = this;
        this.expectRequest("SalesOrderList?$skip=0&$top=100", {
            value: [
                { SalesOrderID: "0" },
                { SalesOrderID: "1" },
                { SalesOrderID: "2" }
            ]
        }).expectChange("text", ["0", "1", "2"]);
        return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
            that.expectRequest("SalesOrderList?$filter=" + oFixture.request + "&$skip=0&$top=100", {
                value: [
                    { SalesOrderID: "0" },
                    { SalesOrderID: "2" }
                ]
            }).expectChange("text", [, "2"]);
            that.oView.byId("table").getBinding("items").filter(oFixture.filter);
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("Context Paths Using Key Predicates", function (assert) {
    var oTable, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES',\t\tparameters : {$expand : {'LOCATION/City/EmployeesInCity' : {$select : ['Name']}}, \t\t$select : ['ID', 'Name']}}\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$expand=LOCATION/City/EmployeesInCity($select=Name)" + "&$select=ID,Name&$skip=0&$top=100", {
        value: [{
                ID: "1",
                Name: "Frederic Fall",
                LOCATION: {
                    City: {
                        EmployeesInCity: [
                            { Name: "Frederic Fall" },
                            { Name: "Jonathan Smith" }
                        ]
                    }
                }
            }, {
                ID: "2",
                Name: "Jonathan Smith",
                LOCATION: {
                    City: {
                        EmployeesInCity: [
                            { Name: "Frederic Fall" },
                            { Name: "Jonathan Smith" }
                        ]
                    }
                }
            }]
    }).expectChange("text", ["Frederic Fall", "Jonathan Smith"]);
    return this.createView(assert, sView).then(function () {
        oTable = that.oView.byId("table");
        assert.deepEqual(oTable.getItems().map(function (oItem) {
            return oItem.getBindingContext().getPath();
        }), ["/EMPLOYEES('1')", "/EMPLOYEES('2')"]);
        that.expectRequest("EMPLOYEES?$expand=LOCATION/City/EmployeesInCity($select=Name)" + "&$select=ID&$filter=ID eq '1' or ID eq '2'&$top=2", { value: [{
                    ID: "1",
                    LOCATION: null
                }, {
                    ID: "2",
                    LOCATION: null
                }] });
        return Promise.all([
            oTable.getBinding("items").getHeaderContext().requestSideEffects(["LOCATION"]),
            that.waitForChanges(assert)
        ]);
    });
});
["@mediaReadLink", "@odata.mediaReadLink"].forEach(function (sAnnotation) {
    [undefined, null, "image/jpeg"].forEach(function (vMediaContentType) {
        var sTitle = "stream property with " + sAnnotation + "=" + vMediaContentType;
        QUnit.test(sTitle, function (assert) {
            var oModel = createTeaBusiModel({ autoExpandSelect: true }), oResponse = {}, sView = "<FlexBox binding=\"{/Equipments('1')/EQUIPMENT_2_PRODUCT}\">\t<Text id=\"url\" text=\"{ProductPicture/Picture}\"/>\t<Text id=\"contentType\"\t\ttext=\"{= JSON.stringify(%{ProductPicture/Picture@odata.mediaContentType}) }\"/>\t<Text id=\"fooBar\" text=\"{= %{SupplierIdentifier@foo.bar} }\"/></FlexBox>";
            oResponse["Picture" + sAnnotation] = "ProductPicture('42')";
            if (vMediaContentType !== undefined) {
                oResponse["Picture@odata.mediaContentType"] = vMediaContentType;
            }
            this.expectRequest("Equipments('1')/EQUIPMENT_2_PRODUCT" + "?$select=ID,ProductPicture/Picture,SupplierIdentifier", {
                "@odata.context": "../$metadata#Equipments('1')/EQUIPMENT_2_PRODUCT",
                ID: "42",
                ProductPicture: oResponse,
                "SupplierIdentifier@foo.bar": "The answer",
                SupplierIdentifier: 42
            }).expectChange("url", sTeaBusi + "ProductPicture('42')").expectChange("contentType", JSON.stringify(vMediaContentType)).expectChange("fooBar", "The answer");
            return this.createView(assert, sView, oModel);
        });
    });
});
QUnit.test("CPOUI5ODATAV4-593: Writing instance annotations via POST/PATCH", function (assert) {
    var oContext, oModel = createModel("/sap/opu/odata4/IWBEP/TEA/default/iwbep/tea_busi_product/0001/"), oInitialData = {
        "@annotation": "baz",
        "@annotation@annotation": "bazbaz",
        "@complexAnnotation": {
            sub: "bar"
        },
        ProductPicture: {
            "Picture@odata.mediaEditLink": "foo"
        }
    }, oPayload = Object.assign({}, oInitialData, { "@complexAnnotation": { sub: "bar*" } }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oListBinding = that.oModel.bindList("/Products");
        that.expectRequest({
            method: "POST",
            url: "Products",
            payload: oPayload
        }, Object.assign({ ID: "42" }, oPayload));
        oContext = oListBinding.create(oInitialData, true);
        return Promise.all([
            oContext.setProperty("@complexAnnotation/sub", "bar*"),
            oContext.created(),
            that.waitForChanges(assert, "POST")
        ]);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "Products(42)",
            payload: {
                "@annotation": "baz*",
                "@annotation@annotation": "bazbaz*",
                "@complexAnnotation": {
                    sub: "bar**"
                },
                ProductPicture: {
                    "Picture@odata.mediaEditLink": "foo*"
                }
            }
        });
        return Promise.all([
            oContext.setProperty("@annotation", "baz*"),
            oContext.setProperty("@annotation@annotation", "bazbaz*"),
            oContext.setProperty("@complexAnnotation/sub", "bar**"),
            oContext.setProperty("ProductPicture/Picture@odata.mediaEditLink", "foo*"),
            that.waitForChanges(assert, "PATCH")
        ]);
    });
});
QUnit.test("Update quantity", function (assert) {
    var sView = "<FlexBox binding=\"{/SalesOrderList('42')/SO_2_SOITEM('10')}\">\t<Input id=\"quantity\" value=\"{Quantity}\"/>\t<Text id=\"quantityUnit\" text=\"{QuantityUnit}\"/></FlexBox>", oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    this.expectRequest("SalesOrderList('42')/SO_2_SOITEM('10')" + "?$select=ItemPosition,Quantity,QuantityUnit,SalesOrderID", {
        "@odata.etag": "ETag",
        Quantity: "10.000",
        QuantityUnit: "EA"
    }).expectChange("quantity", "10.000").expectChange("quantityUnit", "EA");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')/SO_2_SOITEM('10')",
            headers: { "If-Match": "ETag" },
            payload: {
                Quantity: "11.000",
                QuantityUnit: "EA"
            }
        }, {
            "@odata.etag": "changed",
            Quantity: "11.000",
            QuantityUnit: "EA"
        }).expectChange("quantity", "11.000");
        that.oView.byId("quantity").getBinding("value").setValue("11.000");
        return that.waitForChanges(assert);
    });
});
QUnit.test("PATCH entity below a complex type", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/EMPLOYEES('1')}\">\t<Table id=\"table\" items=\"{LOCATION/City/EmployeesInCity}\">\t\t<Input id=\"room\" value=\"{ROOM_ID}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')?$select=ID" + "&$expand=LOCATION/City/EmployeesInCity($select=ID,ROOM_ID)", {
        ID: "1",
        LOCATION: {
            City: {
                EmployeesInCity: [{
                        ID: "1",
                        ROOM_ID: "1.01",
                        "@odata.etag": "ETag"
                    }]
            }
        }
    }).expectChange("room", ["1.01"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            headers: { "If-Match": "ETag" },
            payload: { ROOM_ID: "1.02" }
        }).expectChange("room", ["1.02"]);
        that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value").setValue("1.02");
        return that.waitForChanges(assert);
    });
});
QUnit.test("V2 Adapter: select in expand", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{path :'/SalesOrderSet(\\'0500000001\\')', \t\tparameters : {\t\t\t$expand : {ToLineItems : {$select : 'ItemPosition'}}, \t\t\t$select : 'SalesOrderID'\t\t}}\">\t<Text id=\"id\" text=\"{path : 'SalesOrderID', type : 'sap.ui.model.odata.type.String'}\"/>\t<Table id=\"table\" items=\"{ToLineItems}\">\t\t<Text id=\"item\" text=\"{path : 'ItemPosition',\t\t\ttype : 'sap.ui.model.odata.type.String'}\"/>\t</Table></FlexBox>", oModel = this.createModelForV2SalesOrderService({
        annotationURI: "/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/annotations.xml"
    });
    this.expectRequest("SalesOrderSet('0500000001')?$expand=ToLineItems" + "&$select=ToLineItems/ItemPosition,SalesOrderID", {
        d: {
            __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
            SalesOrderID: "0500000001",
            ToLineItems: {
                results: [{
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrderLineItem" },
                        ItemPosition: "0000000010"
                    }, {
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrderLineItem" },
                        ItemPosition: "0000000020"
                    }, {
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrderLineItem" },
                        ItemPosition: "0000000030"
                    }]
            }
        }
    }).expectChange("id", "0500000001").expectChange("item", ["0000000010", "0000000020", "0000000030"]);
    return this.createView(assert, sView, oModel).then(function () {
        assert.deepEqual(oModel.getMetaModel().getObject("/SalesOrderSet/NetAmount@Org.OData.Measures.V1.ISOCurrency"), { $Path: "CurrencyCode" });
    });
});
QUnit.test("V2 Adapter: $orderby & $search", function (assert) {
    var sView = "<Table id=\"table\" items=\"{path :'/SalesOrderSet',\t\tparameters : {\t\t\t$select : 'SalesOrderID',\t\t\t$orderby : 'SalesOrderID',\t\t\t$search : 'foo'\t\t}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", oModel = this.createModelForV2SalesOrderService({
        annotationURI: "/sap/opu/odata/IWBEP/GWSAMPLE_BASIC/annotations.xml"
    });
    this.expectRequest("SalesOrderSet?$orderby=SalesOrderID&$search=foo&$select=SalesOrderID" + "&$skip=0&$top=100", {
        d: {
            results: [{
                    __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                    SalesOrderID: "0500000001"
                }, {
                    __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                    SalesOrderID: "0500000002"
                }, {
                    __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                    SalesOrderID: "0500000003"
                }]
        }
    }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
    return this.createView(assert, sView, oModel);
});
[{
        binding: "CreatedAt ge 2017-05-23T00:00:00Z",
        request: "CreatedAt ge datetime'2017-05-23T00:00:00'"
    }, {
        binding: "Note eq null",
        request: "Note eq null"
    }, {
        binding: "2017-05-23T00:00:00Z ge CreatedAt",
        request: "datetime'2017-05-23T00:00:00' ge CreatedAt"
    }, {
        binding: "Note eq null and 2017-05-23T00:00:00Z ge CreatedAt",
        request: "Note eq null and datetime'2017-05-23T00:00:00' ge CreatedAt"
    }, {
        binding: "Note eq null or 2017-05-23T00:00:00Z ge CreatedAt",
        request: "Note eq null or datetime'2017-05-23T00:00:00' ge CreatedAt"
    }, {
        binding: "Note eq null or not (2017-05-23T00:00:00Z ge CreatedAt)",
        request: "Note eq null or not (datetime'2017-05-23T00:00:00' ge CreatedAt)"
    }].forEach(function (oFixture) {
    QUnit.test("V2 Adapter: $filter=" + oFixture.binding, function (assert) {
        var sView = "<Table id=\"table\" items=\"{path :'/SalesOrderSet',\t\tparameters : {\t\t\t$select : 'SalesOrderID',\t\t\t$filter : '" + oFixture.binding + "'\t\t}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>";
        this.expectRequest("SalesOrderSet?$filter=" + oFixture.request + "&$select=SalesOrderID" + "&$skip=0&$top=100", {
            d: {
                results: [{
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                        SalesOrderID: "0500000001"
                    }, {
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                        SalesOrderID: "0500000002"
                    }, {
                        __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                        SalesOrderID: "0500000003"
                    }]
            }
        }).expectChange("id", ["0500000001", "0500000002", "0500000003"]);
        return this.createView(assert, sView, this.createModelForV2SalesOrderService());
    });
});
QUnit.test("Absolute ODPBs using different $direct groups", function (assert) {
    var sView = "<Text id=\"text1\" text=\"{\tpath : '/EMPLOYEES(\\'2\\')/Name',\tparameters : {$$groupId : 'group1'}}\"/><Text id=\"text2\" text=\"{\tpath : '/EMPLOYEES(\\'3\\')/Name',\tparameters : {$$groupId : 'group2'}}\"/>";
    this.expectRequest("EMPLOYEES('2')/Name", { value: "Frederic Fall" }).expectRequest("EMPLOYEES('3')/Name", { value: "Jonathan Smith" }).expectChange("text1", "Frederic Fall").expectChange("text2", "Jonathan Smith");
    return this.createView(assert, sView, createTeaBusiModel({
        groupProperties: {
            group1: { submit: "Direct" },
            group2: { submit: "Direct" }
        }
    }));
});
QUnit.test("Absolute ODPBs using different '$auto.X' groups", function (assert) {
    var sView = "<Text id=\"text1\" text=\"{\tpath : '/EMPLOYEES(\\'2\\')/Name',\tparameters : {$$groupId : '$auto.1'}}\"/><Text id=\"text2\" text=\"{\tpath : '/EMPLOYEES(\\'3\\')/Name',\tparameters : {$$groupId : '$auto.2'}}\"/>";
    this.expectRequest({
        url: "EMPLOYEES('2')/Name",
        batchNo: 1
    }, { value: "Frederic Fall" }).expectRequest({
        url: "EMPLOYEES('3')/Name",
        batchNo: 2
    }, { value: "Jonathan Smith" }).expectChange("text1", "Frederic Fall").expectChange("text2", "Jonathan Smith");
    return this.createView(assert, sView, createTeaBusiModel({}));
});
QUnit.test("sap.ui.table.Table with VisibleRowCountMode='Auto'", function (assert) {
    var sView = "<t:Table id=\"table\" rows=\"{path : '/EMPLOYEES', parameters : {$filter : 'AGE gt 42'}}\"\t\tvisibleRowCountMode=\"Auto\">\t<t:Column>\t\t<t:label>\t\t\t<Label text=\"Name\"/>\t\t</t:label>\t\t<t:template>\t\t\t<Text id=\"text\" text=\"{Name}\"/>\t\t</t:template>\t</t:Column></t:Table>", oModel = createTeaBusiModel({ autoExpandSelect: true });
    this.expectRequest("EMPLOYEES?$filter=AGE gt 42&$select=ID,Name&$skip=0&$top=140", {
        value: [
            { Name: "Frederic Fall" },
            { Name: "Jonathan Smith" }
        ]
    }).expectChange("text", ["Frederic Fall", "Jonathan Smith"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Relative object binding & property binding: separate control", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oText = new Text(), sView = "<FlexBox binding=\"{/Equipments(Category='Electronics',ID=1)}\">\t<FlexBox binding=\"{EQUIPMENT_2_PRODUCT}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"text\" text=\"{SupplierIdentifier}\"/>\t</FlexBox></FlexBox>";
    this.expectRequest("Equipments(Category='Electronics',ID=1)?$select=Category,ID" + "&$expand=EQUIPMENT_2_PRODUCT($select=ID,SupplierIdentifier)", {
        Category: "Electronics",
        ID: 1,
        EQUIPMENT_2_PRODUCT: {
            ID: 2,
            SupplierIdentifier: 42
        }
    }).expectChange("text", oText.validateProperty("text", 42));
    return this.createView(assert, sView, oModel);
});
QUnit.test("Relative object binding & property binding: same control", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oText = new Text(), sView = "<FlexBox binding=\"{/Equipments(Category='Electronics',ID=1)}\">\t<Text binding=\"{EQUIPMENT_2_PRODUCT}\" id=\"text\" text=\"{SupplierIdentifier}\"/></FlexBox>";
    this.expectRequest("Equipments(Category='Electronics',ID=1)?$select=Category,ID" + "&$expand=EQUIPMENT_2_PRODUCT($select=ID,SupplierIdentifier)", {
        Category: "Electronics",
        ID: 1,
        EQUIPMENT_2_PRODUCT: {
            ID: 2,
            SupplierIdentifier: 42
        }
    }).expectChange("text", oText.validateProperty("text", 42));
    return this.createView(assert, sView, oModel);
});
QUnit.test("Relative object binding & property binding within a list (1)", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oText = new Text(), sView = "<Table items=\"{/Equipments}\">\t<Text binding=\"{EQUIPMENT_2_PRODUCT}\" id=\"text\" text=\"{SupplierIdentifier}\"/></Table>";
    this.expectRequest("Equipments?$select=Category,ID" + "&$expand=EQUIPMENT_2_PRODUCT($select=ID,SupplierIdentifier)" + "&$skip=0&$top=100", {
        value: [{
                Category: "Electronics",
                ID: 1,
                EQUIPMENT_2_PRODUCT: {
                    ID: 2,
                    SupplierIdentifier: 42
                }
            }]
    }).expectChange("text", oText.validateProperty("text", 42));
    return this.createView(assert, sView, oModel);
});
QUnit.test("Relative object binding & property binding within a list (2)", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oText = new Text(), sView = "<Table items=\"{/Equipments}\">\t<Text binding=\"{EQUIPMENT_2_EMPLOYEE}\" id=\"text\" text=\"{AGE}\"/></Table>";
    this.expectRequest("Equipments?$select=Category,ID" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=AGE,ID)" + "&$skip=0&$top=100", {
        value: [{
                Category: "Electronics",
                ID: 1,
                EQUIPMENT_2_EMPLOYEE: {
                    ID: "0815",
                    AGE: 42
                }
            }]
    }).expectChange("text", oText.validateProperty("text", 42));
    return this.createView(assert, sView, oModel);
});
QUnit.test("Relative object binding & property binding within a list (3)", function (assert) {
    var oText = new Text(), sView = "<Table items=\"{/Equipments}\">\t<Text binding=\"{EQUIPMENT_2_EMPLOYEE}\" id=\"text\" text=\"{AGE}\"/></Table>";
    this.expectRequest("Equipments?$skip=0&$top=100", {
        value: [{
                Category: "Electronics",
                ID: 1,
                EQUIPMENT_2_EMPLOYEE: {
                    ID: "0815",
                    AGE: 42
                }
            }]
    }).expectChange("text", oText.validateProperty("text", 42));
    return this.createView(assert, sView);
});
QUnit.test("Filter collection provided via object binding", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{parameters : {$expand : 'TEAM_2_EMPLOYEES'},\t\tpath : '/TEAMS(\\'42\\')'}\">\t<Table items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"id\" text=\"{ID}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('42')?$expand=TEAM_2_EMPLOYEES", {
        TEAM_2_EMPLOYEES: [
            { ID: "1" },
            { ID: "2" },
            { ID: "3" }
        ]
    }).expectChange("id", ["1", "2", "3"]);
    return this.createView(assert, sView).then(function () {
        that.expectRequest("TEAMS('42')?$expand=TEAM_2_EMPLOYEES($filter=ID eq '2')", {
            TEAM_2_EMPLOYEES: [{ ID: "2" }]
        }).expectChange("id", ["2"]);
        that.oView.byId("form").getObjectBinding().changeParameters({ $expand: "TEAM_2_EMPLOYEES($filter=ID eq '2')" });
        return that.waitForChanges(assert);
    });
});
QUnit.test("Bound function", function (assert) {
    var sView = "<FlexBox binding=\"{/EMPLOYEES('1')}\">\t<FlexBox id=\"function\" \t\tbinding=\"{com.sap.gateway.default.iwbep.tea_busi.v0001.FuGetEmployeeSalaryForecast(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"status\" text=\"{STATUS}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectChange("status", null);
    return this.createView(assert, sView).then(function () {
        that.expectRequest("EMPLOYEES('1')/com.sap.gateway.default.iwbep.tea_busi.v0001" + ".FuGetEmployeeSalaryForecast()", {
            STATUS: "42"
        }).expectChange("status", "42");
        return Promise.all([
            that.oView.byId("function").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Function binding: setParameter, execute and refresh", function (assert) {
    var oFunctionBinding, sView = "<FlexBox id=\"function\" binding=\"{/GetEmployeeByID(...)}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("name", null);
    return this.createView(assert, sView).then(function () {
        oFunctionBinding = that.oView.byId("function").getObjectBinding();
        oFunctionBinding.refresh();
        that.expectRequest("GetEmployeeByID(EmployeeID='1')", { Name: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
        return Promise.all([
            oFunctionBinding.setParameter("EmployeeID", "1").execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='1')", { Name: "Frederic Fall" }).expectChange("name", "Frederic Fall");
        oFunctionBinding.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        oFunctionBinding.setParameter("EmployeeID", "2");
        oFunctionBinding.refresh();
        that.expectRequest("GetEmployeeByID(EmployeeID='2')", { Name: "Peter Burke" }).expectChange("name", "Peter Burke");
        return Promise.all([
            oFunctionBinding.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='2')", { Name: "Jonathan Smith" }).expectChange("name", "Jonathan Smith");
        oFunctionBinding.refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Function binding: setParameter, execute and changeParameters", function (assert) {
    var oFunctionBinding, sView = "<FlexBox id=\"function\" binding=\"{/GetEmployeeByID(...)}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("name", null);
    return this.createView(assert, sView).then(function () {
        oFunctionBinding = that.oView.byId("function").getObjectBinding();
        oFunctionBinding.changeParameters({ $select: "Name" });
        that.expectRequest("GetEmployeeByID(EmployeeID='1')?$select=Name", {
            Name: "Jonathan Smith"
        }).expectChange("name", "Jonathan Smith");
        return Promise.all([
            oFunctionBinding.setParameter("EmployeeID", "1").execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='1')?$select=ID,Name", {
            Name: "Frederic Fall"
        }).expectChange("name", "Frederic Fall");
        oFunctionBinding.changeParameters({ $select: "ID,Name" });
        return that.waitForChanges(assert);
    }).then(function () {
        oFunctionBinding.setParameter("EmployeeID", "2");
        oFunctionBinding.changeParameters({ $select: "Name" });
        that.expectRequest("GetEmployeeByID(EmployeeID='2')?$select=Name", {
            Name: "Peter Burke"
        }).expectChange("name", "Peter Burke");
        return Promise.all([
            oFunctionBinding.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("GetEmployeeByID(EmployeeID='2')?$select=ID,Name", {
            Name: "Jonathan Smith"
        }).expectChange("name", "Jonathan Smith");
        oFunctionBinding.changeParameters({ $select: "ID,Name" });
        return that.waitForChanges(assert);
    });
});
QUnit.test("refresh on dependent bindings", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sUrl = "TEAMS('42')?$select=Team_Id&$expand=TEAM_2_MANAGER($select=ID)", sView = "<FlexBox binding=\"{/TEAMS('42')}\">\t<FlexBox binding=\"{TEAM_2_MANAGER}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"id\" text=\"{ID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest(sUrl, {
        Team_Id: "42",
        TEAM_2_MANAGER: { ID: "1" }
    }).expectChange("id", "1");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest(sUrl, {
            Team_Id: "42",
            TEAM_2_MANAGER: { ID: "2" }
        }).expectChange("id", "2");
        oModel.refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("no paging", function (assert) {
    var fnGetContexts = ODataListBinding.prototype.getContexts, sView = "<Table id=\"table\" items=\"{/TEAMS}\">\t<Text id=\"id\" text=\"{Team_Id}\"/></Table>";
    this.mock(ODataListBinding.prototype).expects("getContexts").atLeast(1).callsFake(function (iStart, iLength) {
        return fnGetContexts.call(this, iStart, iLength, Infinity);
    });
    this.expectRequest("TEAMS", {
        value: [{
                Team_Id: "TEAM_00"
            }, {
                Team_Id: "TEAM_01"
            }, {
                Team_Id: "TEAM_02"
            }]
    }).expectChange("id", ["TEAM_00", "TEAM_01", "TEAM_02"]);
    return this.createView(assert, sView);
});
QUnit.test("read all data", function (assert) {
    var i, n = 5000, aIDs = new Array(n), aValues = new Array(n), sView = "<List id=\"list\"></List>", that = this;
    for (i = 0; i < n; i += 1) {
        aIDs[i] = "TEAM_" + i;
        aValues[i] = { Team_Id: aIDs[i] };
    }
    return this.createView(assert, sView).then(function () {
        var oText = new Text("id", { text: "{Team_Id}" });
        that.setFormatter(assert, oText, "id", true);
        that.expectRequest("TEAMS", { value: aValues }).expectChange("id", aIDs);
        that.oView.byId("list").bindItems({
            length: Infinity,
            path: "/TEAMS",
            template: new CustomListItem({ content: [oText] })
        });
        return that.waitForChanges(assert, "", undefined, 25000);
    });
});
QUnit.test("read all data w/o a control on top", function (assert) {
    var aIDs = [], aValues = [], i, that = this;
    for (i = 0; i < 10000; i += 1) {
        aIDs[i] = "TEAM_" + i;
        aValues[i] = { Team_Id: aIDs[i] };
    }
    return this.createView(assert).then(function () {
        var fnDone, oListBinding = that.oModel.bindList("/TEAMS");
        that.expectRequest("TEAMS", { value: aValues });
        oListBinding.getContexts(0, Infinity);
        oListBinding.attachEventOnce("change", function () {
            oListBinding.getContexts(0, Infinity).forEach(function (oContext, i) {
                var sId = oContext.getProperty("Team_Id");
                if (sId !== aIDs[i]) {
                    assert.strictEqual(sId, aIDs[i]);
                }
            });
            fnDone();
        });
        return Promise.all([
            new Promise(function (resolve) {
                fnDone = resolve;
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("infinite prefetch", function (assert) {
    var oListBinding, aValues = [], i, that = this;
    for (i = 0; i < 12; i += 1) {
        aValues[i] = { Team_Id: "TEAM_" + i };
    }
    return this.createView(assert).then(function () {
        oListBinding = that.oModel.bindList("/TEAMS");
        that.expectRequest("TEAMS?$skip=0&$top=10", { value: aValues.slice(0, 10) });
        return Promise.all([
            oListBinding.requestContexts(0, 10),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("TEAMS?$skip=10", { value: aValues.slice(10) });
        assert.strictEqual(oListBinding.fetchContexts(0, 10, Infinity).getResult(), false, "whether the binding's contexts have been modified");
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2180279839: dataReceived follows each dataRequested", function (assert) {
    var oListBinding, aValues = [], i, that = this;
    for (i = 0; i < 10; i += 1) {
        aValues[i] = { Team_Id: "TEAM_" + i };
    }
    return this.createView(assert).then(function () {
        oListBinding = that.oModel.bindList("/TEAMS");
        that.expectRequest("TEAMS?$skip=0&$top=7", { value: aValues.slice(0, 7) }).expectEvents(assert, oListBinding, [
            [, "dataRequested"],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]);
        oListBinding.getContexts(0, 7);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS?$skip=7&$top=3", { value: aValues.slice(7, 3) }).expectEvents(assert, oListBinding, [
            [, "dataRequested"],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]);
        oListBinding.getContexts(3, 2, 5);
        return that.waitForChanges(assert);
    });
});
QUnit.test("hasPendingChanges on dependent bindings", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sUrl = "SalesOrderList?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)&$skip=0&$top=100", sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input binding=\"{SO_2_BP}\" value=\"{CompanyName}\"/></Table>", that = this;
    this.expectRequest(sUrl, {
        value: [{
                SalesOrderID: "42",
                SO_2_BP: {
                    BusinessPartnerID: "1",
                    CompanyName: "Foo, Inc",
                    "@odata.etag": "ETag"
                }
            }]
    });
    return this.createView(assert, sView, oModel).then(function () {
        var oText = that.oView.byId("table").getItems()[0].getCells()[0];
        that.expectRequest({
            method: "PATCH",
            url: "BusinessPartnerList('1')",
            headers: { "If-Match": "ETag" },
            payload: { CompanyName: "Bar, Inc" }
        }, {});
        oText.getBinding("value").setValue("Bar, Inc");
        assert.strictEqual(oText.getElementBinding().hasPendingChanges(), true);
        return that.waitForChanges(assert);
    });
});
testViewStart("Expression binding", "<Text id=\"text\" text=\"{= 'Hello, ' + ${/EMPLOYEES('2')/Name} }\"/>", { "EMPLOYEES('2')/Name": { value: "Frederic Fall" } }, { text: "Hello, Frederic Fall" });
testViewStart("Expression binding in a list", "<Table items=\"{/EMPLOYEES}\">\t<Text id=\"text\" text=\"{= 'Hello, ' + ${Name} }\"/></Table>", { "EMPLOYEES?$skip=0&$top=100": { value: [{ Name: "Frederic Fall" }, { Name: "Jonathan Smith" }] } }, { text: ["Hello, Frederic Fall", "Hello, Jonathan Smith"] });
testViewStart("Auto-$expand/$select: relative ODPB to advertised action", "<FlexBox binding=\"{path : '/EMPLOYEES(\\'2\\')', parameters : {$select : 'AGE'}}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"adAction1\"\t\ttext=\"{= %{#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsOccupied}\t\t\t? 'set to occupied' : ''}\"/>\t<Text id=\"adAction2\"\t\ttext=\"{= %{#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable}\t\t\t? 'set to available' : ''}\"/></FlexBox>", {
    "EMPLOYEES('2')?$select=AGE,ID,Name,com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable,com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsOccupied": {
        "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {},
        AGE: 32,
        Name: "Frederic Fall"
    }
}, [{
        adAction1: "",
        adAction2: "set to available",
        name: "Frederic Fall"
    }], createTeaBusiModel({ autoExpandSelect: true }));
QUnit.test("BCP: 2080321417: Auto-$expand/$select and nested list bindings", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<List id=\"select\" items=\"{path : 'SO_2_SOITEM', templateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text text=\"{ItemPosition}\"/>\t\t</CustomListItem>\t</List></Table>", that = this;
    return oModel.getMetaModel().fetchObject("/SalesOrderList").then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)&$skip=0&$top=100", { value: [{ SalesOrderID: "1", SO_2_SOITEM: [] }] }).expectChange("id", ["1"]);
        return that.createView(assert, sView, oModel);
    });
});
QUnit.test("Advertised actions: title updates", function (assert) {
    var oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{/EMPLOYEES('2')}\" id=\"form\">\t<Input id=\"name\" value=\"{Name}\"/>\t<Text id=\"title\" text=\"{\t\tpath : '#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable/title',\t\ttype : 'sap.ui.model.odata.type.String'}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", {
        "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
            title: "First Title"
        },
        ID: "2",
        Name: "Frederic Fall"
    }).expectChange("name", "Frederic Fall").expectChange("title", "First Title");
    return this.createView(assert, sView, oModel).then(function () {
        var oContextBinding = that.oView.byId("form").getObjectBinding();
        that.expectRequest("EMPLOYEES('2')", {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
                title: "Second Title"
            },
            ID: "2",
            Name: "Frederic Fall"
        }).expectChange("title", "Second Title");
        oContextBinding.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            payload: { Name: "Frederic Spring" },
            url: "EMPLOYEES('2')"
        }, {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
                title: "Third Title"
            }
        }).expectChange("name", "Frederic Spring").expectChange("title", "Third Title");
        that.oView.byId("name").getBinding("value").setValue("Frederic Spring");
        return that.waitForChanges(assert);
    }).then(function () {
        var sActionName = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oContext = that.oView.byId("form").getObjectBinding().getBoundContext(), oActionBinding = oModel.bindContext(sActionName + "(...)", oContext);
        that.expectRequest({
            method: "POST",
            payload: { TeamID: "TEAM_02" },
            url: "EMPLOYEES('2')/" + sActionName
        }, {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
                title: "Fourth Title"
            },
            ID: "2",
            Name: "Frederic Winter"
        }).expectChange("name", "Frederic Winter").expectChange("title", "Fourth Title");
        return Promise.all([
            oActionBinding.setParameter("TeamID", "TEAM_02").execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Advertised actions: object updates", function (assert) {
    var oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{/EMPLOYEES('2')}\" id=\"form\">\t<Text id=\"enabled\"\t\ttext=\"{= %{#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable} ? 1 : 0 }\"/>\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", {
        "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {},
        ID: "2",
        Name: "Frederic Fall"
    }).expectChange("enabled", 1).expectChange("name", "Frederic Fall");
    return this.createView(assert, sView, oModel).then(function () {
        var oContextBinding = that.oView.byId("form").getObjectBinding();
        that.expectRequest("EMPLOYEES('2')", {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": null,
            ID: "2",
            Name: "Frederic Fall"
        }).expectChange("enabled", 0);
        oContextBinding.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            payload: { Name: "Frederic Spring" },
            url: "EMPLOYEES('2')"
        }, {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {}
        }).expectChange("enabled", 1).expectChange("name", "Frederic Spring");
        that.oView.byId("name").getBinding("value").setValue("Frederic Spring");
        return that.waitForChanges(assert);
    }).then(function () {
        var sActionName = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oContext = that.oView.byId("form").getObjectBinding().getBoundContext(), oActionBinding = oModel.bindContext(sActionName + "(...)", oContext);
        that.expectRequest({
            method: "POST",
            payload: { TeamID: "TEAM_02" },
            url: "EMPLOYEES('2')/" + sActionName
        }, {
            ID: "2",
            Name: "Frederic Winter"
        }).expectChange("enabled", 0).expectChange("name", "Frederic Winter");
        return Promise.all([
            oActionBinding.setParameter("TeamID", "TEAM_02").execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Advertised actions: object & title updates", function (assert) {
    var oActionBinding, sActionName = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{/EMPLOYEES('2')}\" id=\"form\">\t<Text id=\"enabled\"\t\ttext=\"{= %{#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable} ? 1 : 0 }\"/>\t<Text id=\"title\" text=\"{\t\tpath : '#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable/title',\t\ttype : 'sap.ui.model.odata.type.String'}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", {
        "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
            title: "First Title"
        },
        ID: "2"
    }).expectChange("enabled", 1).expectChange("title", "First Title");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("form").getObjectBinding().getBoundContext();
        oActionBinding = oModel.bindContext(sActionName + "(...)", oContext);
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "EMPLOYEES('2')/" + sActionName
        }, { ID: "2" }).expectChange("enabled", 0).expectChange("title", null);
        return Promise.all([
            oActionBinding.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "EMPLOYEES('2')/" + sActionName
        }, {
            "#com.sap.gateway.default.iwbep.tea_busi.v0001.AcSetIsAvailable": {
                title: "Second Title"
            },
            ID: "2"
        }).expectChange("enabled", 1).expectChange("title", "Second Title");
        oActionBinding.execute();
        return that.waitForChanges(assert);
    });
});
QUnit.test("V2 adapter: list/detail", function (assert) {
    var oModel = this.createModelForV2FlightService({ autoExpandSelect: true }), sView = "<Table id=\"list\" items=\"{/FlightCollection}\">\t<Text id=\"carrid\" text=\"{carrid}\"/></Table><FlexBox id=\"detail\" binding=\"{}\">\t<Text id=\"cityFrom\" text=\"{flightDetails/cityFrom}\"/>\t<Text id=\"cityTo\" text=\"{flightDetails/cityTo}\"/></FlexBox>", that = this;
    this.expectRequest("FlightCollection?$select=carrid,connid,fldate&$skip=0&$top=100", {
        d: {
            results: [{
                    __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                    carrid: "AA",
                    connid: "0017",
                    fldate: "/Date(1502323200000)/"
                }]
        }
    }).expectChange("carrid", ["AA"]).expectChange("cityFrom").expectChange("cityTo");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("list").getItems()[0].getBindingContext();
        that.expectRequest("FlightCollection(carrid='AA',connid='0017',fldate=datetime" + "'2017-08-10T00%3A00%3A00')?$select=flightDetails", {
            d: {
                __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                flightDetails: {
                    __metadata: { type: "RMTSAMPLEFLIGHT.FlightDetails" },
                    cityFrom: "New York",
                    cityTo: "Los Angeles"
                }
            }
        }).expectChange("cityFrom", "New York").expectChange("cityTo", "Los Angeles");
        that.oView.byId("detail").setBindingContext(oContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("V2 Adapter: FunctionImport", function (assert) {
    var oModel = this.createModelForV2FlightService(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oContextBinding = oModel.bindContext("/GetAvailableFlights(...)");
        that.expectRequest("GetAvailableFlights?fromdate=datetime'2017-08-10T00:00:00'" + "&todate=datetime'2017-08-10T23:59:59'" + "&cityfrom='new york'&cityto='SAN FRANCISCO'", {
            d: {
                results: [{
                        __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                        carrid: "AA",
                        connid: "0017",
                        fldate: "/Date(1502323200000)/"
                    }, {
                        __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                        carrid: "DL",
                        connid: "1699",
                        fldate: "/Date(1502323200000)/"
                    }, {
                        __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                        carrid: "UA",
                        connid: "3517",
                        fldate: "/Date(1502323200000)/"
                    }]
            }
        });
        return Promise.all([
            oContextBinding.setParameter("fromdate", "2017-08-10T00:00:00Z").setParameter("todate", "2017-08-10T23:59:59Z").setParameter("cityfrom", "new york").setParameter("cityto", "SAN FRANCISCO").execute(),
            that.waitForChanges(assert)
        ]).then(function () {
            var oListBinding = oModel.bindList("value", oContextBinding.getBoundContext()), aContexts = oListBinding.getContexts(0, Infinity);
            aContexts.forEach(function (oContext, i) {
                assert.strictEqual(oContext.getPath(), "/GetAvailableFlights(...)/value/" + i);
                assert.strictEqual(oContext.getProperty("fldate"), "2017-08-10T00:00:00Z");
            });
        });
    });
});
QUnit.test("V2 Adapter: bound function returns primitive", function (assert) {
    var oModel = this.createModelForV2FlightService(), sView = "<FlexBox binding=\"{/NotificationCollection('foo')}\">\t<Text id=\"updated\" text=\"{= %{updated} }\"/>\t<FlexBox id=\"function\" binding=\"{RMTSAMPLEFLIGHT.__FAKE__FunctionImport(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"value\" text=\"{= %{value} }\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("NotificationCollection('foo')", {
        d: {
            __metadata: { type: "RMTSAMPLEFLIGHT.Notification" },
            ID: "foo",
            updated: "/Date(1502323200000)/"
        }
    }).expectChange("updated", "2017-08-10T00:00:00Z").expectChange("value", undefined);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("__FAKE__FunctionImport?ID='foo'", {
            d: {
                __FAKE__FunctionImport: "/Date(1502323200000)/"
            }
        }).expectChange("value", "2017-08-10T00:00:00Z");
        return Promise.all([
            that.oView.byId("function").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("V2 Adapter: FunctionImport returns Collection(Edm.DateTime)", function (assert) {
    var oModel = this.createModelForV2FlightService(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oContextBinding = oModel.bindContext("/__FAKE__GetAllFlightDates(...)");
        that.expectRequest("__FAKE__GetAllFlightDates", {
            d: {
                results: [
                    "/Date(1502323200000)/",
                    "/Date(1502323201000)/",
                    "/Date(1502323202000)/"
                ]
            }
        });
        return Promise.all([
            oContextBinding.execute(),
            that.waitForChanges(assert)
        ]).then(function () {
            var oListBinding = oModel.bindList("value", oContextBinding.getBoundContext()), aContexts = oListBinding.getContexts(0, Infinity);
            aContexts.forEach(function (oContext, i) {
                assert.strictEqual(oContext.getPath(), "/__FAKE__GetAllFlightDates(...)/value/" + i);
                assert.strictEqual(oContext.getProperty(""), "2017-08-10T00:00:0" + i + "Z");
            });
        });
    });
});
QUnit.test("V2 Adapter: FunctionImport returns Collection(ComplexType)", function (assert) {
    var oModel = this.createModelForV2FlightService(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oContextBinding = oModel.bindContext("/__FAKE__GetFlightDetailsByCarrier(...)");
        that.expectRequest("__FAKE__GetFlightDetailsByCarrier?carrid='AA'", {
            d: {
                results: [{
                        __metadata: {
                            type: "RMTSAMPLEFLIGHT.FlightDetails"
                        },
                        arrivalTime: "PT14H00M00S",
                        departureTime: "PT11H00M00S"
                    }, {
                        __metadata: { type: "RMTSAMPLEFLIGHT.FlightDetails" },
                        arrivalTime: "PT14H00M01S",
                        departureTime: "PT11H00M01S"
                    }, {
                        __metadata: { type: "RMTSAMPLEFLIGHT.FlightDetails" },
                        arrivalTime: "PT14H00M02S",
                        departureTime: "PT11H00M02S"
                    }]
            }
        });
        return Promise.all([
            oContextBinding.setParameter("carrid", "AA").execute(),
            that.waitForChanges(assert)
        ]).then(function () {
            var oListBinding = oModel.bindList("value", oContextBinding.getBoundContext()), aContexts = oListBinding.getContexts(0, Infinity);
            aContexts.forEach(function (oContext, i) {
                assert.strictEqual(oContext.getPath(), "/__FAKE__GetFlightDetailsByCarrier(...)/value/" + i);
                assert.strictEqual(oContext.getProperty("arrivalTime"), "14:00:0" + i);
                assert.strictEqual(oContext.getProperty("departureTime"), "11:00:0" + i);
            });
        });
    });
});
QUnit.test("V2 Adapter: bound function", function (assert) {
    var oModel = this.createModelForV2FlightService(), sView = "<FlexBox binding=\"{/FlightCollection(carrid='AA',connid='0017',fldate=2017-08-10T00:00:00Z)}\">\t<Text id=\"carrid\" text=\"{carrid}\"/>\t<FlexBox id=\"function\" binding=\"{RMTSAMPLEFLIGHT.GetFlightDetails(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"distance\" text=\"{distance}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("FlightCollection(carrid='AA',connid='0017'" + ",fldate=datetime'2017-08-10T00%3A00%3A00')", {
        d: {
            __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
            carrid: "AA",
            connid: "0017",
            fldate: "/Date(1502323200000)/"
        }
    }).expectChange("carrid", "AA").expectChange("distance", null);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("GetFlightDetails?carrid='AA'&connid='0017'" + "&fldate=datetime'2017-08-10T00:00:00'", {
            d: {
                GetFlightDetails: {
                    __metadata: { type: "RMTSAMPLEFLIGHT.FlightDetails" },
                    countryFrom: "US",
                    cityFrom: "new york",
                    airportFrom: "JFK",
                    countryTo: "US",
                    cityTo: "SAN FRANCISCO",
                    airportTo: "SFO",
                    flightTime: 361,
                    departureTime: "PT11H00M00S",
                    arrivalTime: "PT14H01M00S",
                    distance: "2572.0000",
                    distanceUnit: "SMI",
                    flightType: "",
                    period: 0
                }
            }
        }).expectChange("distance", "2,572.0000");
        return Promise.all([
            that.oView.byId("function").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("V2 Adapter: ActionImport", function (assert) {
    var oContextBinding, oModel = this.createModelForV2FlightService(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        oContextBinding = oModel.bindContext("/__FAKE__ActionImport(...)");
        that.expectRequest({
            method: "POST",
            url: "__FAKE__ActionImport?carrid='AA'" + "&guid=guid'0050568D-393C-1ED4-9D97-E65F0F3FCC23'" + "&fldate=datetime'2017-08-10T00:00:00'&flightTime=42"
        }, {
            d: {
                __metadata: { type: "RMTSAMPLEFLIGHT.Flight" },
                carrid: "AA",
                connid: "0017",
                fldate: "/Date(1502323200000)/",
                PRICE: "2222.00",
                SEATSMAX: 320
            }
        });
        return Promise.all([
            oContextBinding.setParameter("carrid", "AA").setParameter("guid", "0050568D-393C-1ED4-9D97-E65F0F3FCC23").setParameter("fldate", "2017-08-10T00:00:00Z").setParameter("flightTime", 42).execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oContext = oContextBinding.getBoundContext();
        assert.strictEqual(oContext.getProperty("carrid"), "AA");
        assert.strictEqual(oContext.getProperty("connid"), "0017");
        assert.strictEqual(oContext.getProperty("fldate"), "2017-08-10T00:00:00Z");
        assert.strictEqual(oContext.getProperty("SEATSMAX"), 320);
        return oContext.requestProperty("PRICE", true).then(function (sValue) {
            assert.strictEqual(sValue, "2,222.00");
        });
    });
});
QUnit.test("V2 Adapter: bound action", function (assert) {
    var oModel = this.createModelForV2SalesOrderService(), sView = "<FlexBox binding=\"{/SalesOrderSet('0815')}\">\t<Text id=\"id0\" text=\"{SalesOrderID}\"/>\t<FlexBox id=\"action\" binding=\"{GWSAMPLE_BASIC.SalesOrder_Confirm(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"id1\" text=\"{SalesOrderID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("SalesOrderSet('0815')", {
        d: {
            __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
            SalesOrderID: "0815"
        }
    }).expectChange("id0", "0815").expectChange("id1", null);
    return this.createView(assert, sView, oModel).then(function () {
        var oContextBinding = that.oView.byId("action").getObjectBinding();
        that.expectRequest({
            method: "POST",
            url: "SalesOrder_Confirm?SalesOrderID='0815'"
        }, {
            d: {
                __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                SalesOrderID: "08/15",
                CreatedAt: "/Date(1502323200000)/"
            }
        }).expectChange("id1", "08/15");
        return Promise.all([
            oContextBinding.execute(),
            that.waitForChanges(assert)
        ]).then(function () {
            assert.strictEqual(oContextBinding.getBoundContext().getProperty("CreatedAt"), "2017-08-10T00:00:00.0000000Z");
        });
    });
});
QUnit.skip("V2 Adapter: bound action on context w/o read", function (assert) {
    var oModel = this.createModelForV2SalesOrderService(), oParentContext = oModel.bindContext("/SalesOrderLineItemSet('0815','10')/ToHeader").getBoundContext(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        that.expectRequest("SalesOrderLineItemSet('0815','10')/ToHeader", {
            d: {
                __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                SalesOrderID: "0815"
            }
        }).expectRequest({
            method: "POST",
            url: "SalesOrder_Confirm?SalesOrderID='0815'"
        }, {
            d: {
                __metadata: { type: "GWSAMPLE_BASIC.SalesOrder" },
                SalesOrderID: "08/15"
            }
        });
        return Promise.all([
            oModel.bindContext("GWSAMPLE_BASIC.SalesOrder_Confirm(...)", oParentContext).execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("V2 Adapter: bound action w/ PUT", function (assert) {
    var oModel = this.createModelForV2FlightService(), sView = "<FlexBox binding=\"{/TravelAgencies('00000061')}\">\t<Text id=\"oldPhone\" text=\"{TELEPHONE}\"/>\t<FlexBox id=\"action\" binding=\"{RMTSAMPLEFLIGHT.UpdateAgencyPhoneNo(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"newPhone\" text=\"{TELEPHONE}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("TravelAgencies('00000061')", {
        d: {
            __metadata: { type: "RMTSAMPLEFLIGHT.Travelagency" },
            agencynum: "00000061",
            NAME: "Fly High",
            TELEPHONE: "+49 2102 69555"
        }
    }).expectChange("oldPhone", "+49 2102 69555").expectChange("newPhone", null);
    return this.createView(assert, sView, oModel).then(function () {
        var oContextBinding = that.oView.byId("action").getObjectBinding();
        that.expectRequest({
            method: "PUT",
            url: "UpdateAgencyPhoneNo?agencynum='00000061'" + "&telephone='%2B49 (0)2102 69555'"
        }, {
            d: {
                __metadata: { type: "RMTSAMPLEFLIGHT.Travelagency" },
                agencynum: "00000061",
                NAME: "Fly High",
                TELEPHONE: "+49 (0)2102 69555"
            }
        }).expectChange("newPhone", "+49 (0)2102 69555");
        return Promise.all([
            oContextBinding.setParameter("telephone", "+49 (0)2102 69555").execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("suspend/refresh/resume", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/Equipments(Category=\\'Electronics\\',ID=1)', \t\tsuspended : true}\">\t<Text id=\"text\" text=\"{Category}\"/></FlexBox>", that = this;
    this.expectChange("text");
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = that.oView.byId("form").getObjectBinding();
        that.expectRequest("Equipments(Category='Electronics',ID=1)" + "?$select=Category,ID", {
            Category: "Electronics",
            ID: 1
        }).expectChange("text", "Electronics");
        oBinding.refresh();
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
[false, true].forEach(function (bRefresh) {
    var sTitle = "suspend/resume: changes for suspended context binding, refresh=" + bRefresh;
    QUnit.test(sTitle, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/Equipments(Category=\\'Electronics\\',ID=1)', \t\tsuspended : true}\">\t<Text id=\"idCategory\" text=\"{Category}\"/>\t<Text id=\"idEmployeeId\" text=\"{EmployeeId}\"/></FlexBox>", that = this;
        this.expectChange("idCategory");
        return this.createView(assert, sView, oModel).then(function () {
            var oForm = that.oView.byId("form"), sId;
            sId = that.addToForm(oForm, "Name", assert);
            that.removeFromForm(oForm, "idEmployeeId");
            that.expectRequest("Equipments(Category='Electronics',ID=1)" + "?$select=Category,ID,Name", {
                Category: "Electronics",
                ID: 1,
                Name: "Office PC"
            }).expectChange("idCategory", "Electronics").expectChange(sId, "Office PC");
            if (bRefresh) {
                oForm.getObjectBinding().refresh();
            }
            oForm.getObjectBinding().resume();
            return that.waitForChanges(assert);
        });
    });
});
testViewStart("V2 Adapter: Absolute ODataPropertyBinding", "<Text id=\"text\" text=\"{= %{/ProductSet('HT-1000')/CreatedAt} }\"/>", { "ProductSet('HT-1000')/CreatedAt": { d: { CreatedAt: "/Date(1502323200000)/" } } }, { text: "2017-08-10T00:00:00.0000000Z" }, "createModelForV2SalesOrderService");
testViewStart("Absolute ODataPropertyBinding with custom query options", "<Text id=\"text\" text=\"{path : '/TEAMS(\\'42\\')/Name',\t\t\tparameters : {custom : 'foo', c2 : 'x'}}\"/>", { "TEAMS('42')/Name?c1=a&c2=x&custom=foo": { value: "Business Suite" } }, { text: "Business Suite" }, createModel(sTeaBusi + "?c1=a&c2=b"));
testViewStart("Relative ODataPropertyBinding with parameters", "<FlexBox binding=\"{/TEAMS('42')}\">\t\t\t<Text id=\"text\" text=\"{path : 'Name',\t\t\t\tparameters : {custom : 'foo', $$groupId : 'binding'}}\"/>\t\t</FlexBox>", { "TEAMS('42')": { Name: "Business Suite" } }, { text: "Business Suite" }, createTeaBusiModel());
[false, true].forEach(function (bRefresh) {
    var sTitle = "suspend/resume: suspended list binding, refresh=" + bRefresh;
    QUnit.test(sTitle, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/Equipments', suspended : true, templateShareable : false}\">\t<Text id=\"idCategory\" text=\"{Category}\"/>\t<Text id=\"idEmployeeId\" text=\"{EmployeeId}\"/></Table>", that = this;
        this.expectChange("idCategory", []).expectChange("idEmployeeId", []);
        return this.createView(assert, sView, oModel).then(function () {
            var sId0, sId1, oTable = that.oView.byId("table"), oTableBinding;
            that.expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created").expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created").expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created");
            sId0 = that.addToTable(oTable, "Name", assert);
            sId1 = that.addToTable(oTable, "EQUIPMENT_2_EMPLOYEE/Name", assert);
            that.removeFromTable(oTable, "idEmployeeId");
            that.expectRequest("Equipments?$select=Category,ID,Name" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=ID,Name)&$skip=0&$top=100", {
                value: [{
                        Category: "Electronics",
                        ID: 1,
                        Name: "Office PC",
                        EQUIPMENT_2_EMPLOYEE: {
                            ID: "2",
                            Name: "Frederic Fall"
                        }
                    }, {
                        Category: "Vehicle",
                        ID: 2,
                        Name: "VW Golf 2.0",
                        EQUIPMENT_2_EMPLOYEE: {
                            ID: "3",
                            Name: "Jonathan Smith"
                        }
                    }]
            }).expectChange("idCategory", ["Electronics", "Vehicle"]).expectChange(sId0, ["Office PC", "VW Golf 2.0"]).expectChange(sId1, ["Frederic Fall", "Jonathan Smith"]);
            oTableBinding = oTable.getBinding("items");
            if (bRefresh) {
                oTableBinding.refresh();
            }
            oTableBinding.resume();
            return that.waitForChanges(assert);
        });
    });
});
[false, true].forEach(function (bRefresh) {
    var sTitle = "suspend/resume: *not* suspended context binding, refresh=" + bRefresh;
    QUnit.test(sTitle, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/Equipments(Category='Electronics',ID=1)}\">\t<Text id=\"idCategory\" text=\"{Category}\"/>\t<Text id=\"idEmployeeId\" text=\"{EmployeeId}\"/></FlexBox>", that = this;
        this.expectRequest("Equipments(Category='Electronics',ID=1)" + "?$select=Category,EmployeeId,ID", {
            Category: "Electronics",
            EmployeeId: "0001",
            ID: 1
        }).expectChange("idCategory", "Electronics").expectChange("idEmployeeId", "0001");
        return this.createView(assert, sView, oModel).then(function () {
            var oForm = that.oView.byId("form"), sId;
            oForm.getObjectBinding().suspend();
            sId = that.addToForm(oForm, "Name", assert);
            that.removeFromForm(oForm, "idEmployeeId");
            that.expectRequest("Equipments(Category='Electronics',ID=1)?$select=" + (bRefresh ? "Category,ID,Name" : "Name"), {
                Category: "Electronics",
                ID: 1,
                Name: "Office PC"
            }).expectChange(sId, "Office PC");
            if (bRefresh) {
                oForm.getObjectBinding().refresh();
            }
            return Promise.all([
                oForm.getObjectBinding().resumeAsync(),
                that.waitForChanges(assert)
            ]);
        });
    });
});
[false, true].forEach(function (bRefresh) {
    var sTitle = "suspend/resume: *not* suspended list binding; refresh=" + bRefresh;
    QUnit.test(sTitle, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/Equipments', templateShareable : false}\">\t<Text id=\"idCategory\" text=\"{Category}\"/>\t<Text id=\"idEmployeeId\" text=\"{EmployeeId}\"/></Table>", that = this;
        this.expectRequest("Equipments?$select=Category,EmployeeId,ID&$skip=0&$top=100", {
            value: [{
                    Category: "Electronics",
                    EmployeeId: "0001",
                    ID: 1
                }, {
                    Category: "Vehicle",
                    EmployeeId: "0002",
                    ID: 2
                }]
        }).expectChange("idCategory", ["Electronics", "Vehicle"]).expectChange("idEmployeeId", ["0001", "0002"]);
        return this.createView(assert, sView, oModel).then(function () {
            var sId0, sId1, oTable = that.oView.byId("table"), oTableBinding;
            that.expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created").expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created").expectCanceledError("Failed to create cache for binding " + sODLB + ": /Equipments", "Cache discarded as a new cache has been created");
            sId0 = that.addToTable(oTable, "Name", assert);
            sId1 = that.addToTable(oTable, "EQUIPMENT_2_EMPLOYEE/Name", assert);
            that.removeFromTable(oTable, "idEmployeeId");
            that.expectRequest("Equipments?$select=Category,ID,Name" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=ID,Name)&$skip=0&$top=100", {
                value: [{
                        Category: "Electronics",
                        ID: 1,
                        Name: "Office PC",
                        EQUIPMENT_2_EMPLOYEE: {
                            ID: "2",
                            Name: "Frederic Fall"
                        }
                    }, {
                        Category: "Vehicle",
                        ID: 2,
                        Name: "VW Golf 2.0",
                        EQUIPMENT_2_EMPLOYEE: {
                            ID: "3",
                            Name: "Jonathan Smith"
                        }
                    }]
            }).expectChange("idCategory", ["Electronics", "Vehicle"]).expectChange(sId0, ["Office PC", "VW Golf 2.0"]).expectChange(sId1, ["Frederic Fall", "Jonathan Smith"]);
            oTableBinding = oTable.getBinding("items");
            if (bRefresh) {
                oTableBinding.refresh();
            }
            oTableBinding.resume();
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("suspend/refresh/resume: dependent context bindings", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"outerForm\" binding=\"{/Equipments(Category='Electronics',ID=1)}\">\t<Text id=\"idEquipmentName\" text=\"{Name}\"/>\t<FlexBox id=\"innerForm\" binding=\"{EQUIPMENT_2_EMPLOYEE}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"idEmployeeName\" text=\"{Name}\"/>\t\t<Text id=\"idManagerId\" text=\"{MANAGER_ID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Equipments(Category='Electronics',ID=1)?$select=Category,ID,Name" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=ID,MANAGER_ID,Name)", {
        Category: "Electronics",
        ID: 1,
        Name: "Office PC",
        EQUIPMENT_2_EMPLOYEE: {
            ID: "2",
            MANAGER_ID: "5",
            Name: "Frederic Fall"
        }
    }).expectChange("idEquipmentName", "Office PC").expectChange("idEmployeeName", "Frederic Fall").expectChange("idManagerId", "5");
    return this.createView(assert, sView, oModel).then(function () {
        var oOuterForm = that.oView.byId("outerForm"), sIdEmployeeId, sIdAge, oInnerForm = that.oView.byId("innerForm");
        oOuterForm.getObjectBinding().suspend();
        sIdEmployeeId = that.addToForm(oOuterForm, "EmployeeId", assert);
        that.removeFromForm(oOuterForm, "idEquipmentName");
        sIdAge = that.addToForm(oInnerForm, "AGE", assert);
        that.removeFromForm(oInnerForm, "idManagerId");
        that.expectRequest("Equipments(Category='Electronics',ID=1)" + "?$select=Category,EmployeeId,ID" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=AGE,ID,Name)", {
            Category: "Electronics",
            EmployeeId: "0002",
            ID: "1",
            EQUIPMENT_2_EMPLOYEE: {
                AGE: 32,
                ID: "2",
                Name: "Frederic Fall"
            }
        }).expectChange(sIdEmployeeId, "0002").expectChange(sIdAge, "32");
        return Promise.all([
            oOuterForm.getObjectBinding().requestRefresh(),
            oOuterForm.getObjectBinding().resumeAsync(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("suspend/resume: no unneeded requests", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oOuterForm, sView = "<FlexBox id=\"outerForm\" binding=\"{/Equipments(Category='Electronics',ID=1)}\">\t<Text id=\"idEquipmentName\" text=\"{Name}\"/>\t<FlexBox id=\"innerForm\" binding=\"{EQUIPMENT_2_EMPLOYEE}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"idEmployeeName\" text=\"{Name}\"/>\t\t<Text id=\"idManagerId\" text=\"{MANAGER_ID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Equipments(Category='Electronics',ID=1)?$select=Category,ID,Name" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=ID,MANAGER_ID,Name)", {
        Category: "Electronics",
        ID: 1,
        EQUIPMENT_2_EMPLOYEE: {
            ID: "2",
            MANAGER_ID: "5",
            Name: "Frederic Fall"
        },
        Name: "Office PC"
    }).expectChange("idEquipmentName", "Office PC").expectChange("idEmployeeName", "Frederic Fall").expectChange("idManagerId", "5");
    return this.createView(assert, sView, oModel).then(function () {
        oOuterForm = that.oView.byId("outerForm");
        oOuterForm.getObjectBinding().suspend();
        oOuterForm.getObjectBinding().resume();
        return that.waitForChanges(assert, "1. without any changes -> no request");
    }).then(function () {
        var oInnerForm = that.oView.byId("innerForm");
        oOuterForm.getObjectBinding().suspend();
        that.removeFromForm(oInnerForm, "idEmployeeName");
        oOuterForm.getObjectBinding().resume();
        return that.waitForChanges(assert, "2. remove property -> no request");
    });
});
QUnit.test("suspend/resume: dependent binding hierarchy w/o own cache only refreshes changed" + " parts", function (assert) {
    var oFormBinding, sIdTeam, oInnerFormBinding, oListBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/TEAMS(\\'TEAM_01\\')', suspended : true}\">\t<Text id=\"memberCount\" text=\"{MEMBER_COUNT}\"/>\t<FlexBox id=\"manager\" binding=\"{TEAM_2_MANAGER}\">\t\t<Text id=\"managerID\" text=\"{ID}\"/>\t</FlexBox>\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("memberCount").expectChange("managerID").expectChange("age", []).expectChange("name", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("TEAMS('TEAM_01')?$select=MEMBER_COUNT,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=AGE,ID,Name),TEAM_2_MANAGER($select=ID)", {
            MEMBER_COUNT: 2,
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }],
            TEAM_2_MANAGER: {
                ID: "4711"
            }
        }).expectChange("memberCount", "2").expectChange("managerID", "4711").expectChange("age", ["52", "56"]).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
        oFormBinding = that.oView.byId("form").getObjectBinding();
        oFormBinding.resume();
        return that.waitForChanges(assert, "1. initially suspended");
    }).then(function () {
        oFormBinding.suspend();
        oFormBinding.resume();
        return that.waitForChanges(assert, "2. suspend/resume w/o changes");
    }).then(function () {
        oListBinding = that.oView.byId("table").getBinding("items");
        oFormBinding.suspend();
        oListBinding.filter(new Filter("AGE", FilterOperator.GT, 42));
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name" + "&$filter=AGE gt 42&$skip=0&$top=100", {
            value: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "3a. filter API");
    }).then(function () {
        oFormBinding.suspend();
        oListBinding.sort(new Sorter("Name"));
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name" + "&$filter=AGE gt 42&$orderby=Name&$skip=0&$top=100", {
            value: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "3b. sort API");
    }).then(function () {
        oFormBinding.suspend();
        oListBinding.changeParameters({ custom: "foo" });
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name" + "&$filter=AGE gt 42&$orderby=Name&custom=foo&$skip=0&$top=100", {
            value: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "3c. changeParameters API");
    }).then(function () {
        oFormBinding.suspend();
        oListBinding.setAggregation({ aggregate: { AGE: {} } });
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?custom=foo&$apply=aggregate(AGE)" + "&$orderby=Name&$filter=AGE gt 42&$skip=0&$top=100", {
            value: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "3d. setAggregation API");
    }).then(function () {
        oFormBinding.suspend();
        oListBinding.setAggregation(undefined);
        oListBinding.changeParameters({ custom: undefined });
        oListBinding.sort([]);
        oListBinding.filter([]);
        oFormBinding.changeParameters({ custom: "foo" });
        that.expectRequest("TEAMS('TEAM_01')?custom=foo&$select=MEMBER_COUNT,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=AGE,ID,Name),TEAM_2_MANAGER($select=ID)", {
            MEMBER_COUNT: 2,
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }],
            TEAM_2_MANAGER: {
                ID: "4711"
            }
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "3e. Remove all changes from ODLB and change ODCB");
    }).then(function () {
        var oInnerForm = that.oView.byId("manager");
        oFormBinding.suspend();
        sIdTeam = that.addToForm(oInnerForm, "TEAM_ID", assert);
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_MANAGER?custom=foo&$select=ID,TEAM_ID", {
            ID: "4711",
            TEAM_ID: "TEAM_01"
        }).expectChange(sIdTeam, "TEAM_01");
        oFormBinding.resume();
        return that.waitForChanges(assert, "4a. Adding a property to the dependent ODCB");
    }).then(function () {
        oInnerFormBinding = that.oView.byId("manager").getObjectBinding();
        oFormBinding.suspend();
        oInnerFormBinding.changeParameters({ custom0: "bar" });
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_MANAGER?custom0=bar&$select=ID,TEAM_ID", {
            ID: "4711",
            TEAM_ID: "TEAM_01 (custom0)"
        }).expectChange(sIdTeam, "TEAM_01 (custom0)");
        oFormBinding.resume();
        return that.waitForChanges(assert, "4b. add custom parameter to ODCB");
    }).then(function () {
        oFormBinding.suspend();
        oInnerFormBinding.changeParameters({ custom0: undefined });
        that.expectChange(sIdTeam, "TEAM_01");
        oFormBinding.resume();
        return that.waitForChanges(assert, "4c. remove custom parameter from ODCB");
    }).then(function () {
        oFormBinding.suspend();
        oFormBinding.changeParameters({ custom: "bar" });
        oInnerFormBinding.changeParameters({ custom0: "foo" });
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_MANAGER?custom0=foo&$select=ID,TEAM_ID", {
            ID: "4711",
            TEAM_ID: "TEAM_01"
        }).expectRequest("TEAMS('TEAM_01')?custom=bar&$select=MEMBER_COUNT,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=AGE,ID,Name)", {
            MEMBER_COUNT: 2,
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "4d. add custom parameter to ODCB and root ODCB");
    }).then(function () {
        oFormBinding.suspend();
        oFormBinding.changeParameters({ custom: "foo" });
        oInnerFormBinding.changeParameters({ custom0: undefined });
        that.expectRequest("TEAMS('TEAM_01')?custom=foo&$select=MEMBER_COUNT,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=AGE,ID,Name)" + ",TEAM_2_MANAGER($select=ID,TEAM_ID)", {
            MEMBER_COUNT: 2,
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }],
            TEAM_2_MANAGER: {
                ID: "4711",
                TEAM_ID: "TEAM_01"
            }
        });
        oFormBinding.resume();
        return that.waitForChanges(assert, "4e. remove custom parameter from ODCB and change root ODCB");
    });
});
QUnit.test("suspend/resume (w/o autoExpandSelect) change $expand/$select on ODCB and ODLB", function (assert) {
    var oFormBinding, oModel = createTeaBusiModel({}), sView = "<FlexBox id=\"form\" binding=\"{path : '/TEAMS(\\'TEAM_01\\')', \t\tparameters : {\t\t\t$expand : {'TEAM_2_EMPLOYEES' : {$select : 'AGE,Name'}},\t\t\t$select : 'BudgetCurrency,MEMBER_COUNT'}\t\t}\">\t<Input id=\"budgetCurrency\" value=\"{BudgetCurrency}\"/>\t<Text id=\"memberCount\" text=\"{MEMBER_COUNT}\"/>\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$expand=TEAM_2_EMPLOYEES($select=AGE,Name)" + "&$select=BudgetCurrency,MEMBER_COUNT", {
        BudgetCurrency: "EUR",
        TEAM_2_EMPLOYEES: [{
                AGE: 52,
                Name: "Frederic Fall"
            }, {
                AGE: 56,
                Name: "Jonathan Smith"
            }],
        MEMBER_COUNT: 2
    }).expectChange("memberCount", "2").expectChange("age", ["52", "56"]).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
    return this.createView(assert, sView, oModel).then(function () {
        oFormBinding = that.oView.byId("form").getObjectBinding();
        return that.setInvalidBudgetCurrency(assert);
    }).then(function () {
        oFormBinding.suspend();
        oFormBinding.changeParameters({
            $expand: undefined,
            $select: "BudgetCurrency,Name,MEMBER_COUNT"
        });
        that.oView.byId("table").getBinding("items").changeParameters({ $select: "AGE,ID,Name" });
        that.expectRequest("TEAMS('TEAM_01')?$select=BudgetCurrency,Name,MEMBER_COUNT", {
            BudgetCurrency: "EUR",
            Name: "invisible",
            MEMBER_COUNT: 3
        }).expectChange("memberCount", "3").expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name" + "&$skip=0&$top=100", {
            value: [{
                    AGE: 52,
                    ID: "1",
                    Name: "Frederic Fall"
                }, {
                    AGE: 56,
                    ID: "3",
                    Name: "Jonathan Smith"
                }, {
                    AGE: 58,
                    ID: "5",
                    Name: "John Doe"
                }]
        }).expectChange("age", [, , "58"]).expectChange("name", [, , "John Doe"]);
        that.expectMessages([]);
        oFormBinding.resume();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(that.oView.byId("budgetCurrency").getValue(), "EUR");
        return that.checkValueState(assert, "budgetCurrency", "None", "");
    });
});
QUnit.test("suspend/resume: context binding with dependent list binding", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"memberCount\" text=\"{MEMBER_COUNT}\"/>\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$select=MEMBER_COUNT,Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=AGE,ID,Name)", {
        Team_Id: "TEAM_01",
        MEMBER_COUNT: 2,
        TEAM_2_EMPLOYEES: [{
                ID: "1",
                Name: "Frederic Fall",
                AGE: 52
            }, {
                ID: "3",
                Name: "Jonathan Smith",
                AGE: 56
            }]
    }).expectChange("memberCount", "2").expectChange("age", ["52", "56"]).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oForm = that.oView.byId("form"), sIdManagerId, sIdStatus, oTable = that.oView.byId("table");
        oForm.getObjectBinding().suspend();
        sIdManagerId = that.addToForm(oForm, "MANAGER_ID", assert);
        that.removeFromForm(oForm, "memberCount");
        sIdStatus = that.addToTable(oTable, "STATUS", assert);
        that.removeFromTable(oTable, "age");
        that.expectRequest("TEAMS('TEAM_01')?$select=MANAGER_ID", {
            MANAGER_ID: "3"
        }).expectChange(sIdManagerId, "3").expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name,STATUS" + "&$skip=0&$top=100", {
            value: [{
                    ID: "1",
                    Name: "Frederic Fall",
                    STATUS: "Available"
                }, {
                    ID: "3",
                    Name: "Jonathan Smith",
                    STATUS: "Occupied"
                }]
        }).expectChange("name", ["Frederic Fall", "Jonathan Smith"]).expectChange(sIdStatus, ["Available", "Occupied"]);
        return Promise.all([
            oForm.getObjectBinding().resumeAsync(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("suspend/resume: sort dependent list binding", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"memberCount\" text=\"{MEMBER_COUNT}\"/>\t<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', templateShareable : false,\t\t\tparameters : {$$ownRequest : true}}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$select=MEMBER_COUNT,Team_Id", {
        Team_Id: "TEAM_01",
        MEMBER_COUNT: 2
    }).expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name" + "&$skip=0&$top=100", {
        value: [{
                ID: "1",
                Name: "Frederic Fall",
                AGE: 56
            }, {
                ID: "3",
                Name: "Jonathan Smith",
                AGE: 52
            }]
    }).expectChange("memberCount", "2").expectChange("age", ["56", "52"]).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oFormBinding = that.oView.byId("form").getObjectBinding();
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=AGE,ID,Name&$orderby=AGE" + "&$skip=0&$top=100", {
            value: [{
                    ID: "3",
                    Name: "Jonathan Smith",
                    AGE: 52
                }, {
                    ID: "1",
                    Name: "Frederic Fall",
                    AGE: 56
                }]
        }).expectChange("age", ["52", "56"]).expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
        oFormBinding.suspend();
        that.oView.byId("table").getBinding("items").sort(new Sorter("AGE"));
        oFormBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Function binding: execute and suspend/resume", function (assert) {
    var oEmployeeBinding, sFunctionName = "com.sap.gateway.default.iwbep.tea_busi.v0001" + ".FuGetEmployeeSalaryForecast", sView = "<FlexBox id=\"employee\" binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"salary\" text=\"{SALARY/YEARLY_BONUS_AMOUNT}\"/>\t<FlexBox id=\"function\" binding=\"{" + sFunctionName + "(...)}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"forecastSalary\" text=\"{SALARY/YEARLY_BONUS_AMOUNT}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')", {
        SALARY: { YEARLY_BONUS_AMOUNT: "100" }
    }).expectChange("salary", "100").expectChange("forecastSalary", null);
    return this.createView(assert, sView).then(function () {
        oEmployeeBinding = that.oView.byId("employee").getObjectBinding();
        oEmployeeBinding.suspend();
        oEmployeeBinding.resume();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES('2')/" + sFunctionName + "()", {
            SALARY: { YEARLY_BONUS_AMOUNT: "142" }
        }).expectChange("forecastSalary", "142");
        return Promise.all([
            that.oView.byId("function").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        oEmployeeBinding.suspend();
        oEmployeeBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("suspend/resume: list binding with details context binding, only context" + " binding is adapted", function (assert) {
    var oForm, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/Equipments', templateShareable : false}\">\t<Text id=\"idEquipmentName\" text=\"{Name}\"/></Table><FlexBox id=\"form\" binding=\"{path : 'EQUIPMENT_2_EMPLOYEE', parameters : {$$ownRequest : true}}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"age\" text=\"{AGE}\"/></FlexBox>", that = this;
    this.expectRequest("Equipments?$select=Category,ID,Name&$skip=0&$top=100", {
        value: [{
                Category: "Electronics",
                ID: 1,
                Name: "Office PC"
            }, {
                Category: "Electronics",
                ID: 2,
                Name: "Tablet X"
            }]
    }).expectChange("idEquipmentName", ["Office PC", "Tablet X"]).expectChange("name").expectChange("age");
    return this.createView(assert, sView, oModel).then(function () {
        oForm = that.oView.byId("form");
        oForm.setBindingContext(that.oView.byId("table").getBinding("items").getCurrentContexts()[0]);
        that.expectRequest("Equipments(Category='Electronics',ID=1)/EQUIPMENT_2_EMPLOYEE" + "?$select=AGE,ID,Name", {
            AGE: 52,
            ID: "2",
            Name: "Frederic Fall"
        }).expectChange("name", "Frederic Fall").expectChange("age", "52");
        return that.waitForChanges(assert);
    }).then(function () {
        var sIdManagerId;
        oForm.getObjectBinding().getRootBinding().suspend();
        sIdManagerId = that.addToForm(oForm, "MANAGER_ID", assert);
        that.removeFromForm(oForm, "age");
        that.expectRequest("Equipments(Category='Electronics',ID=1)/EQUIPMENT_2_EMPLOYEE" + "?$select=ID,MANAGER_ID", {
            ID: "2",
            MANAGER_ID: "1"
        }).expectChange(sIdManagerId, "1");
        return Promise.all([
            oForm.getObjectBinding().getRootBinding().resumeAsync(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("suspend/resume: call read APIs on a suspended ODLB", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "doNotSubmit"
    }), sView = "<Table id=\"table\" items=\"{path : '/BusinessPartnerList', suspended : true}\">\t<Text id=\"id\" text=\"{BusinessPartnerID}\"/></Table>", that = this;
    this.expectChange("id", []);
    return this.createView(assert, sView, oModel).then(function () {
        return oModel.getMetaModel().requestObject("/");
    }).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        oBinding.filter(new Filter("BusinessPartnerRole", FilterOperator.EQ, "01")).sort(new Sorter("CompanyName")).changeParameters({ $filter: "BusinessPartnerID gt '0100000001'" });
        that.expectEvents(assert, oBinding, [
            [, "change", { detailedReason: "AddVirtualContext", reason: "filter" }],
            [, "change", { reason: "add" }],
            [, "dataRequested"],
            [, "change", { detailedReason: "RemoveVirtualContext", reason: "change" }],
            [, "refresh", { reason: "refresh" }],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]).expectRequest("BusinessPartnerList?$filter=BusinessPartnerRole eq '01' " + "and (BusinessPartnerID gt '0100000001')&$orderby=CompanyName" + "&$select=BusinessPartnerID&$skip=0&$top=99", {
            value: [{
                    BusinessPartnerID: "0100000002"
                }, {
                    BusinessPartnerID: "0100000003"
                }]
        }).expectChange("id", ["", "0100000002", "0100000003"]);
        oBinding.resume();
        oBinding.create();
        return that.waitForChanges(assert);
    }).then(function () {
        assertIndices(assert, oBinding.getCurrentContexts(), [-1, 0, 1]);
    });
});
QUnit.test("ODM#refresh ignores suspended bindings", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/BusinessPartnerList', suspended : true}\">\t<Text id=\"id\" text=\"{BusinessPartnerID}\"/></Table>", that = this;
    this.expectChange("id", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.oModel.refresh("foo");
        return that.waitForChanges(assert);
    });
});
QUnit.test("suspend/resume: call setAggregation on a suspended ODLB", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/BusinessPartnerList', suspended : true}\">\t<Text id=\"role\" text=\"{BusinessPartnerRole}\"/></Table>", that = this;
    this.expectChange("role", []);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = that.oView.byId("table").getBinding("items");
        oBinding.setAggregation({ groupLevels: ["BusinessPartnerRole"] });
        that.expectEvents(assert, oBinding, [
            [, "change", { detailedReason: "AddVirtualContext", reason: "filter" }],
            [, "dataRequested"],
            [, "change", { detailedReason: "RemoveVirtualContext", reason: "change" }],
            [, "refresh", { reason: "refresh" }],
            [, "change", { reason: "change" }],
            [, "dataReceived", { data: {} }]
        ]).expectRequest("BusinessPartnerList?$apply=groupby((BusinessPartnerRole))" + "&$count=true&$skip=0&$top=100", {
            "@odata.count": "2",
            value: [{
                    BusinessPartnerRole: "01"
                }, {
                    BusinessPartnerRole: "02"
                }]
        }).expectChange("role", ["01", "02"]);
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("suspend/resume: call changeParameters on a suspended ODCB", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('42')}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"pos\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
        SalesOrderID: "42",
        SO_2_SOITEM: [{
                ItemPosition: "10",
                SalesOrderID: "42"
            }]
    }).expectChange("id", "42").expectChange("pos", ["10"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = that.oView.byId("form").getElementBinding();
        oBinding.suspend();
        oBinding.changeParameters({ custom: "n/a" });
        oBinding.changeParameters({ custom: "option" });
        that.expectRequest("SalesOrderList('42')?custom=option&$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
            SalesOrderID: "42",
            SO_2_SOITEM: [{
                    ItemPosition: "10",
                    SalesOrderID: "42"
                }]
        });
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("suspend/resume: suspended ODCB created by app", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\">\t<Text id=\"note\" text=\"{Note}\"/></FlexBox>", that = this;
    this.expectChange("note");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectCanceledError("Failed to read path /SalesOrderList('1')/Note", "Suspended binding provides no value");
        oBinding = oModel.bindContext("/SalesOrderList('1')");
        oBinding.suspend();
        that.oView.byId("form").setBindingContext(oBinding.getBoundContext());
        return resolveLater();
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Note,SalesOrderID", {
            Note: "Note 1",
            SalesOrderID: "1"
        }).expectChange("note", "Note 1");
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("setContext on a suspended quasi-absolute ODCB", function (assert) {
    var oBinding, sView = "<FlexBox id=\"form\" binding=\"{SO_2_BP}\">\t<Text id=\"role\" text=\"{BusinessPartnerRole}\"/></FlexBox>", that = this;
    this.expectChange("role");
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        oBinding = that.oView.byId("form").getObjectBinding();
        that.expectRequest("SalesOrderList('42')/SO_2_BP", {
            BusinessPartnerID: "0100000000",
            BusinessPartnerRole: "01"
        }).expectChange("role", "01");
        oBinding.setContext(that.oModel.createBindingContext("/SalesOrderList('42')"));
        oBinding.suspend();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.throws(function () {
            oBinding.setContext(that.oModel.createBindingContext("/SalesOrderList('23')"));
        }, "Must not call method when the binding's root binding is suspended" + ": sap.ui.model.odata.v4.ODataContextBinding: /SalesOrderList('42')|SO_2_BP");
    });
});
QUnit.test("ODLB implicitly switching from unresolved to suspended", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\">\t<Text id=\"note\" text=\"{Note}\"/>\t<Table items=\"{SO_2_SOITEM}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("note").expectChange("position", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectCanceledError("Failed to read path /SalesOrderList('1')/Note", "Suspended binding provides no value");
        oBinding = oModel.bindContext("/SalesOrderList('1')");
        oBinding.suspend();
        that.oView.byId("form").setBindingContext(oBinding.getBoundContext());
        return resolveLater(null, 0);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Note,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
            Note: "Note 1",
            SalesOrderID: "1",
            SO_2_SOITEM: [{
                    ItemPosition: "0010",
                    SalesOrderID: "1"
                }]
        }).expectChange("note", "Note 1").expectChange("position", ["0010"]);
        oBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Deferred operation returns collection, auto-$expand/$select", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/GetSOContactList(...)}\" id=\"function\">\t<Table items=\"{value}\">\t\t<Text id=\"nickname\" text=\"{Nickname}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("nickname", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("GetSOContactList(SalesOrderID='0500000001')", {
            value: [
                { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591d177", Nickname: "a" },
                { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591f177", Nickname: "b" },
                { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c5921177", Nickname: "c" }
            ]
        }).expectChange("nickname", ["a", "b", "c"]);
        return Promise.all([
            that.oView.byId("function").getObjectBinding().setParameter("SalesOrderID", "0500000001").execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("List: function returns collection, auto-$expand/$select", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table items=\"{/GetSOContactList(SalesOrderID='0500000001')}\">\t<Text id=\"nickname\" text=\"{Nickname}\"/></Table>";
    this.expectRequest("GetSOContactList(SalesOrderID='0500000001')" + "?$select=ContactGUID,Nickname&$skip=0&$top=100", {
        value: [
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591d177", Nickname: "a" },
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591f177", Nickname: "b" },
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c5921177", Nickname: "c" }
        ]
    }).expectChange("nickname", ["a", "b", "c"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Context: function returns collection, auto-$expand/$select", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/GetSOContactList(SalesOrderID='0500000001')}\" id=\"function\">\t<Table items=\"{value}\">\t\t<Text id=\"nickname\" text=\"{Nickname}\"/>\t</Table></FlexBox>";
    this.expectRequest("GetSOContactList(SalesOrderID='0500000001')" + "?$select=ContactGUID,Nickname", {
        value: [
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591d177", Nickname: "a" },
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c591f177", Nickname: "b" },
            { ContactGUID: "fa163e7a-d4f1-1ee8-84ac-11f9c5921177", Nickname: "c" }
        ]
    }).expectChange("nickname", ["a", "b", "c"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Rel. bound function, auto-$expand/$select (BCP 2070134549)", function (assert) {
    var sFunctionName = "com.sap.gateway.default.iwbep.tea_busi.v0001" + ".__FAKE__FuGetEmployeesByManager", oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/MANAGERS('1')}\" id=\"manager\">\t<Text id=\"TEAM_ID\" text=\"{TEAM_ID}\"/>\t<FlexBox binding=\"{" + sFunctionName + "()}\" id=\"function\">\t\t<Table items=\"{value}\">\t\t\t<Text id=\"id\" text=\"{ID}\"/>\t\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t</Table>\t</FlexBox></FlexBox>";
    this.expectRequest("MANAGERS('1')?$select=ID,TEAM_ID", {
        ID: "1",
        TEAM_ID: "TEAM_03"
    }).expectRequest("MANAGERS('1')/" + sFunctionName + "()?$select=ID,Name", {
        value: [{
                ID: "3",
                Name: "Jonathan Smith"
            }, {
                ID: "6",
                Name: "Susan Bay"
            }]
    }).expectChange("TEAM_ID", "TEAM_03").expectChange("id", ["3", "6"]).expectChange("name", ["Jonathan Smith", "Susan Bay"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("notify non-dependent bindings after deletion", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('0500000000')}\" id=\"form\">\t<FlexBox binding=\"{SO_2_BP}\" id=\"businessPartner\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"phoneNumber\" text=\"{PhoneNumber}\"/>\t</FlexBox>\t<Text id=\"companyName\" text=\"{SO_2_BP/CompanyName}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('0500000000')?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName,PhoneNumber)", {
        SalesOrderID: "0500000000",
        SO_2_BP: {
            "@odata.etag": "ETag",
            BusinessPartnerID: "0100000000",
            CompanyName: "SAP",
            PhoneNumber: "06227747474"
        }
    }).expectChange("companyName", "SAP").expectChange("phoneNumber", "06227747474");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("businessPartner").getBindingContext();
        that.expectRequest({
            headers: { "If-Match": "ETag" },
            method: "DELETE",
            url: "BusinessPartnerList('0100000000')"
        }).expectChange("companyName", null).expectChange("phoneNumber", null);
        return Promise.all([
            oContext.delete(),
            that.waitForChanges(assert)
        ]);
    });
});
[true, false].forEach(function (bParentHasData) {
    QUnit.test("delete context of binding with empty path and $$ownRequest (" + bParentHasData + ")", function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('0500000000')}\" id=\"form\">" + (bParentHasData ? "<Text id=\"netAmount\" text=\"{NetAmount}\"/>" : "") + "\t<FlexBox binding=\"{path : '', parameters : {$$ownRequest : true}}\" id=\"blackBinding\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</FlexBox></FlexBox>", that = this;
        if (bParentHasData) {
            this.expectRequest("SalesOrderList('0500000000')?$select=NetAmount,SalesOrderID", {
                "@odata.etag": "n/a",
                NetAmount: "10",
                SalesOrderID: "0500000000"
            }).expectChange("netAmount", "10.00");
        }
        this.expectRequest("SalesOrderList('0500000000')?$select=Note,SalesOrderID", {
            "@odata.etag": "ETag",
            Note: "Test",
            SalesOrderID: "0500000000"
        }).expectChange("note", "Test");
        return this.createView(assert, sView, oModel).then(function () {
            var oContext = that.oView.byId("blackBinding").getBindingContext();
            that.expectRequest({
                headers: { "If-Match": "ETag" },
                method: "DELETE",
                url: "SalesOrderList('0500000000')"
            }).expectChange("note", null);
            if (bParentHasData) {
                that.expectChange("netAmount", null);
            }
            return Promise.all([
                oContext.delete(),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("delete context of binding with empty path, delegate to ODLB", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\">\t<Text id=\"note\" text=\"{Note}\"/></t:Table><FlexBox binding=\"{path : '', parameters : {$$ownRequest : true}}\" id=\"form\">\t<Text id=\"netAmount\" text=\"{NetAmount}\"/>\t<FlexBox binding=\"{path : '', parameters : {$$ownRequest : true}}\" id=\"form2\">\t\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=110", {
        value: [{
                "@odata.etag": "ETag1",
                SalesOrderID: "0500000000",
                Note: "Row1"
            }, {
                "@odata.etag": "ETag2",
                SalesOrderID: "0500000001",
                Note: "Row2"
            }]
    }).expectChange("note", ["Row1", "Row2"]).expectChange("netAmount").expectChange("salesOrderID");
    return this.createView(assert, sView, oModel).then(function () {
        var oContextBinding = that.oView.byId("form").getElementBinding(), oListBinding = that.oView.byId("table").getBinding("rows");
        that.expectRequest("SalesOrderList('0500000000')?$select=NetAmount,SalesOrderID", {
            "@odata.etag": "ETag3",
            SalesOrderID: "0500000000",
            NetAmount: "10"
        }).expectRequest("SalesOrderList('0500000000')?$select=SalesOrderID", {
            "@odata.etag": "ETag4",
            SalesOrderID: "0500000000"
        }).expectChange("netAmount", "10.00").expectChange("salesOrderID", "0500000000");
        oContextBinding.setContext(oListBinding.getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            headers: { "If-Match": "ETag4" },
            method: "DELETE",
            url: "SalesOrderList('0500000000')"
        }).expectChange("note", null, null).expectChange("note", ["Row2"]).expectChange("netAmount", null).expectChange("salesOrderID", null);
        return Promise.all([
            that.oView.byId("form2").getBindingContext().delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("deregisterChange", function (assert) {
    var oModel = createSalesOrdersModel(), sView = "<FlexBox id=\"form\">\t<t:Table rows=\"{path : 'SO_2_SOITEM', parameters : {$$updateGroupId : 'update'}}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t</t:Table></FlexBox>", that = this;
    this.expectChange("position", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('0500000000')/SO_2_SOITEM?$skip=0&$top=110", {
            value: [{
                    ItemPosition: "10",
                    SalesOrderID: "0500000000"
                }]
        }).expectChange("position", ["10"]);
        that.oView.byId("form").bindElement("/SalesOrderList('0500000000')");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000001')/SO_2_SOITEM?$skip=0&$top=110", {
            value: [{
                    ItemPosition: "20",
                    SalesOrderID: "0500000001"
                }]
        }).expectChange("position", null, null).expectChange("position", ["20"]);
        that.oView.byId("form").bindElement("/SalesOrderList('0500000001')");
        return that.waitForChanges(assert);
    });
});
QUnit.test("delayed create", function (assert) {
    var oModel = createSalesOrdersModel(), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('0500000000')}\"/>", that = this;
    return this.createView(assert, sView, oModel).then(function () {
        var oParentBinding = that.oView.byId("form").getElementBinding(), oListBinding = that.oModel.bindList("SO_2_SOITEM", oParentBinding.getBoundContext(), undefined, undefined, { $$updateGroupId: "update" });
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('0500000000')/SO_2_SOITEM",
            payload: {}
        }, {
            SalesOrderID: "0500000000",
            ItemPosition: "0010"
        }).expectRequest("SalesOrderList('0500000000')" + "/SO_2_SOITEM(SalesOrderID='0500000000',ItemPosition='0010')", {
            SalesOrderID: "0500000000",
            ItemPosition: "0010"
        });
        oListBinding.create();
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("delayed execute", function (assert) {
    var sAction = "SalesOrderList('0500000000')/" + "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Cancel", oModel = createSalesOrdersModel(), sView = "<FlexBox id=\"form\" binding=\"{/" + sAction + "(...)}\"/>", that = this;
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: sAction,
            payload: {}
        }, { SalesOrderID: "0500000000" });
        return Promise.all([
            that.oView.byId("form").getElementBinding().execute("update"),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODCB: delayed refresh", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/BusinessPartnerList('0100000000')}\">\t<Text id=\"company\" text=\"{CompanyName}\"/></FlexBox><FlexBox binding=\"{/SalesOrderList}\"/>", that = this;
    this.expectRequest("BusinessPartnerList('0100000000')" + "?$select=BusinessPartnerID,CompanyName", {
        BusinessPartnerID: "0100000000",
        CompanyName: "SAP AG"
    }).expectChange("company", "SAP AG");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("BusinessPartnerList('0100000000')" + "?$select=BusinessPartnerID,CompanyName", {
            BusinessPartnerID: "0100000000",
            CompanyName: "SAP SE"
        }).expectChange("company", "SAP SE");
        that.oModel.refresh("update");
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: delayed refresh", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"note\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                Note: "Note",
                SalesOrderID: "0500000000"
            }]
    }).expectChange("note", ["Note"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.oModel.bindList("/BusinessPartnerList");
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    Note: "Note updated",
                    SalesOrderID: "0500000000"
                }]
        }).expectChange("note", ["Note updated"]);
        that.oModel.refresh("update");
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: delayed filter", function (assert) {
    var oTableBinding, sView = "<Table id=\"table\" items=\"{path : '/Equipments', parameters : {$$groupId : 'api'}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectChange("name", []);
    return this.createView(assert, sView).then(function () {
        that.expectRequest("Equipments?$skip=0&$top=100", {
            value: [{
                    Category: "1",
                    ID: "2",
                    Name: "Foo"
                }]
        }).expectChange("name", ["Foo"]);
        return Promise.all([
            that.oModel.submitBatch("api"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        oTableBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("Equipments" + "?$filter=EQUIPMENT_2_PRODUCT/ID eq 42&$skip=0&$top=100", {
            value: [{ Name: "Bar" }]
        }).expectChange("name", ["Bar"]);
        oTableBinding.filter(new Filter("EQUIPMENT_2_PRODUCT/ID", "EQ", 42));
        return Promise.all([
            that.oModel.submitBatch("api"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oListBinding = that.oModel.bindList("/Equipments", undefined, undefined, undefined, { $$groupId: "api" });
        that.expectRequest("Equipments?$skip=0&$top=100", {
            value: [{ Name: "Foo" }]
        }).ignoreNullChanges("name").expectChange("name", ["Foo"]);
        oListBinding.filter(new Filter("Name", "GT", "M"));
        oTableBinding.filter(null);
        return Promise.all([
            that.oModel.submitBatch("api"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.skip("ODLB: resume/refresh/filter w/ submitBatch on a t:Table", function (assert) {
    var oListBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<t:Table id=\"table\" visibleRowCountMode=\"Auto\"\t\trows=\"{path : '/Equipments', parameters : {$$groupId : 'api'}, suspended : true}\">\t<t:Column>\t\t<t:label>\t\t\t<Label text=\"Name\"/>\t\t</t:label>\t\t<t:template>\t\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t</t:template>\t</t:Column></t:Table>", that = this;
    this.expectChange("name", []);
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("table").getBinding("rows");
        that.expectRequest("Equipments?$select=Category,ID,Name&$skip=0&$top=105", {
            value: [{
                    Category: "1",
                    ID: "2",
                    Name: "Foo"
                }]
        }).expectChange("name", ["Foo"]);
        oListBinding.resume();
        return Promise.all([
            that.oModel.submitBatch("api"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Equipments?$select=Category,ID,Name" + "&$filter=EQUIPMENT_2_PRODUCT/ID eq 42&$skip=0&$top=105", {
            value: [{
                    Category: "1",
                    ID: "2",
                    Name: "Bar"
                }]
        }).expectChange("name", ["Bar"]);
        oListBinding.refresh("foo");
        oListBinding.filter(new Filter("EQUIPMENT_2_PRODUCT/ID", "EQ", 42));
        return Promise.all([
            that.oModel.submitBatch("api"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Data Aggregation: $$aggregation w/ groupLevels, paging", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table id=\"table\" rows=\"{path : '/SalesOrderList',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tGrossAmount : {subtotals : true},\t\t\t\t\tNetAmount : {}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tCurrencyCode : {},\t\t\t\t\tLifecycleStatus : {}\t\t\t\t},\t\t\t\tgroupLevels : ['LifecycleStatus']\t\t\t},\t\t\t$count : true,\t\t\t$orderby : 'LifecycleStatus desc,ItemPosition asc'\t\t}}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/>\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$apply=concat(" + "groupby((CurrencyCode,LifecycleStatus))/aggregate($count as UI5__leaves)" + ",groupby((LifecycleStatus),aggregate(GrossAmount))/orderby(LifecycleStatus desc)" + "/concat(aggregate($count as UI5__count),top(3)))", {
        value: [
            { UI5__leaves: "42", "UI5__leaves@odata.type": "#Decimal" },
            { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
            { GrossAmount: "1", LifecycleStatus: "Z" },
            { GrossAmount: "2", LifecycleStatus: "Y" },
            { GrossAmount: "3", LifecycleStatus: "X" }
        ]
    }).expectChange("count").expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [true, true, true]).expectChange("level", [1, 1, 1]).expectChange("grossAmount", ["1", "2", "3"]).expectChange("lifecycleStatus", ["Z", "Y", "X"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oListBinding = oTable.getBinding("rows");
        assert.strictEqual(oListBinding.getDownloadUrl(), sSalesOrderService + "SalesOrderList" + "?$apply=groupby((LifecycleStatus,CurrencyCode),aggregate(GrossAmount,NetAmount))" + "/orderby(LifecycleStatus%20desc)", "CPOUI5ODATAV4-609");
        oListBinding.getCurrentContexts().forEach(function (oContext, i) {
            assert.strictEqual(oContext.getPath(), "/SalesOrderList(LifecycleStatus='" + "ZYX"[i] + "')");
        });
        assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
        assert.strictEqual(oListBinding.getLength(), 26, "flat list as currently expanded");
        assert.strictEqual(oListBinding.getCount(), 42, "count of leaves");
        that.expectChange("count", "42");
        that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList" + "?$apply=groupby((LifecycleStatus),aggregate(GrossAmount))" + "/orderby(LifecycleStatus desc)/skip(7)/top(3)", {
            value: [
                { GrossAmount: "7", LifecycleStatus: "T" },
                { GrossAmount: "8", LifecycleStatus: "S" },
                { GrossAmount: "9", LifecycleStatus: "R" }
            ]
        }).expectResets(oTable, 3).expectChange("isExpanded", [, , , , , , , false, false, false]).expectChange("isTotal", [, , , , , , , true, true, true]).expectChange("level", [, , , , , , , 1, 1, 1]).expectChange("grossAmount", [, , , , , , , "7", "8", "9"]).expectChange("lifecycleStatus", [, , , , , , , "T", "S", "R"]);
        oTable.setFirstVisibleRow(7);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$apply=concat(" + "groupby((CurrencyCode,LifecycleStatus))/aggregate($count as UI5__leaves)" + ",groupby((LifecycleStatus))/orderby(LifecycleStatus desc)" + "/concat(aggregate($count as UI5__count),top(3)))", {
            value: [
                { UI5__leaves: "32", "UI5__leaves@odata.type": "#Decimal" },
                { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
                { LifecycleStatus: "Z" },
                { LifecycleStatus: "Y" },
                { LifecycleStatus: "X" }
            ]
        }).expectChange("count", "32").expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [false, false, false]).expectChange("level", [1, 1, 1]).expectChange("lifecycleStatus", ["Z", "Y", "X"]);
        oTable.removeColumn(4).destroy();
        oListBinding.setAggregation({
            group: {
                CurrencyCode: {}
            },
            groupLevels: ["LifecycleStatus"]
        });
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oListBinding.getCount(), 32, "count of leaves");
        assert.throws(function () {
            oListBinding.changeParameters({ $apply: "groupby((LifecycleStatus))" });
        }, new Error("Cannot combine $$aggregation and $apply"));
    });
});
QUnit.test("Data Aggregation: $$aggregation w/ grand total w/ unit", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/SalesOrderList',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tGrossAmount : {grandTotal : true, unit : 'CurrencyCode'}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tLifecycleStatus : {additionally : ['LifecycleStatusDesc']}\t\t\t\t}\t\t\t},\t\t\t$orderby : 'LifecycleStatusDesc asc'\t\t}}\">\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/>\t<Text id=\"lifecycleStatusDesc\" text=\"{LifecycleStatusDesc}\"/>\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/>\t<Text id=\"currencyCode\" text=\"{CurrencyCode}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$apply=concat(aggregate(GrossAmount,CurrencyCode)" + ",groupby((LifecycleStatus,LifecycleStatusDesc)" + ",aggregate(GrossAmount,CurrencyCode))" + "/orderby(LifecycleStatusDesc asc)" + "/concat(aggregate($count as UI5__count),top(99)))", {
        value: [
            { CurrencyCode: null, GrossAmount: "12345" },
            { UI5__count: "2", "UI5__count@odata.type": "#Decimal" },
            { CurrencyCode: "EUR", GrossAmount: "1", LifecycleStatus: "Z", LifecycleStatusDesc: "<Z>" },
            { CurrencyCode: "GBP", GrossAmount: "2", LifecycleStatus: "Y", LifecycleStatusDesc: "<Y>" }
        ]
    }).expectChange("isExpanded", [true, undefined, undefined]).expectChange("isTotal", [true, false, false]).expectChange("level", [0, 1, 1]).expectChange("lifecycleStatus", ["", "Z", "Y"]).expectChange("lifecycleStatusDesc", ["", "<Z>", "<Y>"]).expectChange("grossAmount", ["12345", "1", "2"]).expectChange("currencyCode", ["", "EUR", "GBP"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding = that.oView.byId("table").getBinding("items");
        assert.strictEqual(oListBinding.getDownloadUrl(), sSalesOrderService + "SalesOrderList" + "?$apply=groupby((LifecycleStatus,LifecycleStatusDesc)" + ",aggregate(GrossAmount,CurrencyCode))/orderby(LifecycleStatusDesc%20asc)", "CPOUI5ODATAV4-609");
        assert.strictEqual(oListBinding.getLength(), 3, "table length");
        assert.strictEqual(oListBinding.getCount(), 2, "count of leaves");
    });
});
QUnit.test("Data Aggregation: leaves' key predicates", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/SalesOrderList',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tGrossAmount : {grandTotal : true}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tLifecycleStatus : {},\t\t\t\t\tSalesOrderID : {}\t\t\t\t}\t\t\t}\t\t}}\">\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/>\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/>\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$apply=concat(aggregate(GrossAmount)" + ",groupby((LifecycleStatus,SalesOrderID),aggregate(GrossAmount))" + "/concat(aggregate($count as UI5__count),top(99)))", {
        value: [
            { GrossAmount: "12345" },
            { UI5__count: "2", "UI5__count@odata.type": "#Decimal" },
            { GrossAmount: "1", LifecycleStatus: "Z", SalesOrderID: "26" },
            { GrossAmount: "2", LifecycleStatus: "Y", SalesOrderID: "25" }
        ]
    }).expectChange("isExpanded", [true, undefined, undefined]).expectChange("isTotal", [true, false, false]).expectChange("level", [0, 1, 1]).expectChange("lifecycleStatus", ["", "Z", "Y"]).expectChange("grossAmount", ["12345", "1", "2"]).expectChange("salesOrderID", ["", "26", "25"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oTable = that.oView.byId("table");
        assert.deepEqual(oTable.getBinding("items").getCurrentContexts().map(getPath), [
            "/SalesOrderList()",
            "/SalesOrderList('26')",
            "/SalesOrderList('25')"
        ]);
    });
});
QUnit.test("Data Aggregation: expand, paging and collapse on sap.m.Table", function (assert) {
    var oListBinding, oModel = createAggregationModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"3\" items=\"{path : '/BusinessPartners',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tSalesAmount : {subtotals : true},\t\t\t\t\tSalesNumber : {}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tAccountResponsible : {}\t\t\t\t},\t\t\t\tgroupLevels : ['Region']\t\t\t},\t\t\t$count : false,\t\t\t$orderby : 'Region desc,AccountResponsible'\t\t}}\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"accountResponsible\" text=\"{AccountResponsible}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></Table><FlexBox id=\"detail\">\t<Text id=\"regionDetail\" text=\"{Region}\"/></FlexBox>", oTable, that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Region),aggregate(SalesAmount))" + "/orderby(Region desc)&$count=true&$skip=0&$top=3", {
        "@odata.count": "26",
        value: [
            { Region: "Z", SalesAmount: "100" },
            { Region: "Y", SalesAmount: "200" },
            { Region: "X", SalesAmount: "300" }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [true, true, true]).expectChange("level", [1, 1, 1]).expectChange("region", ["Z", "Y", "X"]).expectChange("accountResponsible", ["", "", ""]).expectChange("salesAmount", ["100", "200", "300"]).expectChange("salesNumber", [null, null, null]).expectChange("regionDetail");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Region eq 'Z')" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "/orderby(AccountResponsible)&$count=true&$skip=0&$top=3", {
            "@odata.count": "4",
            value: [
                { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 },
                { AccountResponsible: "b", SalesAmount: "20", SalesNumber: 2 },
                { AccountResponsible: "c", SalesAmount: "30", SalesNumber: 3 }
            ]
        }).expectChange("groupLevelCount", [4, , , ,]).expectChange("isExpanded", [true, undefined, undefined]).expectChange("isTotal", [, false, false]).expectChange("level", [, 2, 2]).expectChange("region", [, "Z", "Z"]).expectChange("accountResponsible", [, "a", "b"]).expectChange("salesAmount", [, "10", "20"]).expectChange("salesNumber", [, "1", "2"]);
        that.oLogMock.expects("error").withExactArgs("Failed to drill-down into $count, " + "invalid segment: $count", "/aggregation/BusinessPartners?$apply=groupby((Region,AccountResponsible)," + "aggregate(SalesAmount,SalesNumber))/orderby(Region%20desc,AccountResponsible)", "sap.ui.model.odata.v4.lib._Cache");
        oTable = that.oView.byId("table");
        oListBinding = oTable.getBinding("items");
        assert.strictEqual(oListBinding.getCount(), undefined);
        oTable.getItems()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'Z'");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Region eq 'Z')" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "/orderby(AccountResponsible)&$skip=3&$top=1", {
            value: [
                { AccountResponsible: "d", SalesAmount: "40", SalesNumber: 4 }
            ]
        }).expectChange("groupLevelCount", [, , , undefined, undefined, undefined]).expectChange("isExpanded", [, , , undefined, undefined, false]).expectChange("isTotal", [, , , false, false, true]).expectChange("level", [, , , 2, 2, 1]).expectChange("region", [, , , "Z", "Z", "Y"]).expectChange("accountResponsible", [, , , "c", "d", ""]).expectChange("salesAmount", [, , , "30", "40", "200"]).expectChange("salesNumber", [, , , "3", "4", null]);
        oTable.requestItems();
        return that.waitForChanges(assert);
    }).then(function () {
        assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
            "/BusinessPartners(Region='Z')",
            "/BusinessPartners(Region='Z',AccountResponsible='a')",
            "/BusinessPartners(Region='Z',AccountResponsible='b')",
            "/BusinessPartners(Region='Z',AccountResponsible='c')",
            "/BusinessPartners(Region='Z',AccountResponsible='d')",
            "/BusinessPartners(Region='Y')"
        ]);
        that.expectChange("regionDetail", "Z");
        that.oView.byId("detail").setBindingContext(oTable.getItems()[1].getBindingContext());
        that.expectRequest("BusinessPartners?$apply=groupby((Region),aggregate(SalesAmount))" + "/orderby(Region desc)&$skip=3&$top=3", {
            value: [
                { Region: "W", SalesAmount: "400" },
                { Region: "V", SalesAmount: "500" },
                { Region: "U", SalesAmount: "600" }
            ]
        }).expectChange("groupLevelCount", [undefined, , undefined, undefined, undefined, undefined]).expectChange("isExpanded", [false, , false, false, false, false]).expectChange("isTotal", [, , true, true, true, true]).expectChange("level", [, , 1, 1, 1, 1]).expectChange("region", [, , "X", "W", "V", "U"]).expectChange("accountResponsible", [, , "", "", "", ""]).expectChange("salesAmount", [, , "300", "400", "500", "600"]).expectChange("salesNumber", [, , null, null, null, null]).expectChange("regionDetail", null);
        oTable.getItems()[0].getBindingContext().collapse();
        return that.waitForChanges(assert, "collapse 'Z'");
    }).then(function () {
        assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
            "/BusinessPartners(Region='Z')",
            "/BusinessPartners(Region='Y')",
            "/BusinessPartners(Region='X')",
            "/BusinessPartners(Region='W')",
            "/BusinessPartners(Region='V')",
            "/BusinessPartners(Region='U')"
        ]);
        that.expectChange("groupLevelCount", [4, undefined, undefined, undefined, undefined]).expectChange("isExpanded", [true, undefined, undefined, undefined, undefined]).expectChange("isTotal", [, false, false, false, false]).expectChange("level", [, 2, 2, 2, 2]).expectChange("region", [, "Z", "Z", "Z", "Z"]).expectChange("accountResponsible", [, "a", "b", "c", "d"]).expectChange("salesAmount", [, "10", "20", "30", "40"]).expectChange("salesNumber", [, "1", "2", "3", "4"]);
        oTable.getItems()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'Z'");
    }).then(function () {
        assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
            "/BusinessPartners(Region='Z')",
            "/BusinessPartners(Region='Z',AccountResponsible='a')",
            "/BusinessPartners(Region='Z',AccountResponsible='b')",
            "/BusinessPartners(Region='Z',AccountResponsible='c')",
            "/BusinessPartners(Region='Z',AccountResponsible='d')",
            "/BusinessPartners(Region='Y')"
        ]);
    });
});
QUnit.test("Data Aggregation: expand and paging on sap.ui.table.Table", function (assert) {
    var oModel = createAggregationModel(), oTable, sView = "<t:Table id=\"table\" threshold=\"0\" visibleRowCount=\"3\"\trows=\"{path : '/BusinessPartners',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tSalesAmount : {subtotals : true},\t\t\t\t\tSalesNumber : {}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tAccountResponsible : {}\t\t\t\t},\t\t\t\tgroupLevels : ['Region']\t\t\t}\t\t},\t\tfilters : {path : 'AccountResponsible', operator : 'GE', value1 : 'a'}}\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"accountResponsible\" text=\"{AccountResponsible}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=filter(AccountResponsible ge 'a')" + "/groupby((Region),aggregate(SalesAmount))&$count=true&$skip=0&$top=3", {
        "@odata.count": "26",
        value: [
            { Region: "Z", SalesAmount: "100" },
            { Region: "Y", SalesAmount: "280" },
            { Region: "X", SalesAmount: "300" }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [true, true, true]).expectChange("level", [1, 1, 1]).expectChange("region", ["Z", "Y", "X"]).expectChange("accountResponsible", ["", "", ""]).expectChange("salesAmount", ["100", "280", "300"]).expectChange("salesNumber", [null, null, null]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        assert.strictEqual(oTable.getBinding("rows").getDownloadUrl(), "/aggregation/BusinessPartners?$apply=filter(AccountResponsible%20ge%20'a')" + "/groupby((Region,AccountResponsible),aggregate(SalesAmount,SalesNumber))", "CPOUI5ODATAV4-609");
        that.expectRequest("BusinessPartners?$apply=" + "filter(Region eq 'Z' and (AccountResponsible ge 'a'))" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$count=true&$skip=0&$top=3", {
            "@odata.count": "4",
            value: [
                { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 },
                { AccountResponsible: "b", SalesAmount: "20", SalesNumber: 2 },
                { AccountResponsible: "c", SalesAmount: "30", SalesNumber: 3 }
            ]
        }).expectChange("groupLevelCount", [4]).expectChange("isExpanded", [true, undefined, undefined]).expectChange("isTotal", [, false, false]).expectChange("level", [, 2, 2]).expectChange("region", [, "Z", "Z"]).expectChange("accountResponsible", [, "a", "b"]).expectChange("salesAmount", [, "10", "20"]).expectChange("salesNumber", [, "1", "2"]);
        oTable.getRows()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand node 'Z'");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=" + "filter(Region eq 'Z' and (AccountResponsible ge 'a'))" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$skip=3&$top=1", {
            value: [
                { AccountResponsible: "d", SalesAmount: "40", SalesNumber: 4 }
            ]
        }).expectResets(oTable, 2, 1, 1).expectChange("isExpanded", [, , , , , false]).expectChange("isTotal", [, , , false, false, true]).expectChange("level", [, , , 2, 2, 1]).expectChange("region", [, , , "Z", "Z", "Y"]).expectChange("accountResponsible", [, , , "c", "d", ""]).expectChange("salesAmount", [, , , "30", "40", "280"]).expectChange("salesNumber", [, , , "3", "4", null]);
        oTable.setFirstVisibleRow(3);
        return that.waitForChanges(assert, "scroll so that 'Z-c' is in first row");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=" + "filter(Region eq 'Y' and (AccountResponsible ge 'a'))" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$count=true&$skip=0&$top=3", {
            "@odata.count": "8",
            value: [
                { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 },
                { AccountResponsible: "b", SalesAmount: "20", SalesNumber: 2 },
                { AccountResponsible: "c", SalesAmount: "30", SalesNumber: 3 }
            ]
        }).expectChange("groupLevelCount", [, , , , , 8]).expectChange("isExpanded", [, , , , , true]);
        oTable.getRows()[2].getBindingContext().expand();
        return that.waitForChanges(assert, "expand node 'Y'");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=" + "filter(Region eq 'Y' and (AccountResponsible ge 'a'))" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$skip=7&$top=1", {
            value: [
                { AccountResponsible: "h", SalesAmount: "80", SalesNumber: 8 }
            ]
        }).expectRequest("BusinessPartners?$apply=filter(AccountResponsible ge 'a')" + "/groupby((Region),aggregate(SalesAmount))" + "&$skip=3&$top=1", {
            value: [
                { Region: "W", SalesAmount: "400" }
            ]
        }).expectResets(oTable, 2, 1, 1).expectChange("isExpanded", [, , , , , , , , , , , , , , false, false]).expectChange("isTotal", [, , , , , , , , , , , , , false, true, true]).expectChange("level", [, , , , , , , , , , , , , 2, 1, 1]).expectChange("region", [, , , , , , , , , , , , , "Y", "X", "W"]).expectChange("accountResponsible", [, , , , , , , , , , , , , "h", "", ""]).expectChange("salesAmount", [, , , , , , , , , , , , , "80", "300", "400"]).expectChange("salesNumber", [, , , , , , , , , , , , , "8", null, null]);
        oTable.setFirstVisibleRow(13);
        return that.waitForChanges(assert, "scroll to 'Y-h': 'Y-h', 'X' and 'W' visible");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=" + "filter(Region eq 'Y' and (AccountResponsible ge 'a'))" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$skip=3&$top=3", {
            value: [
                { AccountResponsible: "d", SalesAmount: "40", SalesNumber: 4 },
                { AccountResponsible: "e", SalesAmount: "50", SalesNumber: 5 },
                { AccountResponsible: "f", SalesAmount: "60", SalesNumber: 6 }
            ]
        }).expectResets(oTable, 3, 1, 3).expectChange("isExpanded", [, , , , , , , , , , ,]).expectChange("isTotal", [, , , , , , , , , false, false, false]).expectChange("level", [, , , , , , , , , 2, 2, 2]).expectChange("region", [, , , , , , , , , "Y", "Y", "Y"]).expectChange("accountResponsible", [, , , , , , , , , "d", "e", "f"]).expectChange("salesAmount", [, , , , , , , , , "40", "50", "60"]).expectChange("salesNumber", [, , , , , , , , , "4", "5", "6"]);
        oTable.setFirstVisibleRow(9);
        return that.waitForChanges(assert, "scroll to the middle of 'Y': " + "'Y-d', 'Y-e', 'Y-f' visible");
    }).then(function () {
        that.expectChange("groupLevelCount", [4, ,]).expectChange("isExpanded", [true, ,]).expectChange("isTotal", [true, ,]).expectChange("level", [1, ,]).expectChange("region", ["Z", "Z", "Z"]).expectChange("accountResponsible", ["", "a", "b"]).expectChange("salesAmount", ["100", "10", "20"]).expectChange("salesNumber", [null, "1", "2"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert, "scroll back to the first row: " + "'Z', 'Z-a' and 'Z-b' visible");
    }).then(function () {
        assert.deepEqual(oTable.getBinding("rows").getCurrentContexts().map(getPath), [
            "/BusinessPartners(Region='Z')",
            "/BusinessPartners(Region='Z',AccountResponsible='a')",
            "/BusinessPartners(Region='Z',AccountResponsible='b')"
        ]);
    });
});
[false, true].forEach(function (bWithExpand) {
    var sTitle = "Data Aggregation: intersecting requests, with expand = " + bWithExpand;
    QUnit.test(sTitle, function (assert) {
        var oModel = createAggregationModel(), fnRespondExpand, fnRespondScroll1, fnRespondScroll2, oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {subtotals : true},\t\t\t\tSalesNumber : {}\t\t\t},\t\t\tgroup : {\t\t\t\tAccountResponsible : {}\t\t\t},\t\t\tgroupLevels : ['Region']\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"accountResponsible\" text=\"{AccountResponsible}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
        this.expectRequest("BusinessPartners?$apply=groupby((Region),aggregate(SalesAmount))" + "&$count=true&$skip=0&$top=3", {
            "@odata.count": "26",
            value: [
                { Region: "Z", SalesAmount: "100" },
                { Region: "Y", SalesAmount: "200" },
                { Region: "X", SalesAmount: "300" }
            ]
        }).expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [true, true, true]).expectChange("level", [1, 1, 1]).expectChange("region", ["Z", "Y", "X"]).expectChange("accountResponsible", ["", "", ""]).expectChange("salesAmount", ["100", "200", "300"]).expectChange("salesNumber", [null, null, null]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            if (bWithExpand) {
                that.expectChange("isExpanded", [, true]).expectRequest("BusinessPartners?$apply=filter(Region eq 'Y')" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$count=true&$skip=0&$top=3", new Promise(function (resolve) {
                    fnRespondExpand = resolve.bind(null, {
                        "@odata.count": "1",
                        value: [
                            { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 }
                        ]
                    });
                }));
                oTable.getRows()[1].getBindingContext().expand();
            }
            return that.waitForChanges(assert, "expand 'Y' before scroll");
        }).then(function () {
            that.expectRequest("BusinessPartners?$apply=groupby((Region),aggregate(SalesAmount))" + "&$skip=3&$top=3", new Promise(function (resolve) {
                fnRespondScroll1 = resolve.bind(null, {
                    value: [
                        { Region: "W", SalesAmount: "400" },
                        { Region: "V", SalesAmount: "500" },
                        { Region: "U", SalesAmount: "600" }
                    ]
                });
            })).expectResets(oTable, 3, 0, 3);
            oTable.setFirstVisibleRow(3);
            return that.waitForChanges(assert, "first scroll to node 'W'");
        }).then(function () {
            that.expectRequest("BusinessPartners?$apply=groupby((Region),aggregate(SalesAmount))" + "&$skip=6&$top=1", new Promise(function (resolve) {
                fnRespondScroll2 = resolve.bind(null, {
                    value: [
                        { Region: "T", SalesAmount: "700" }
                    ]
                });
            }));
            oTable.setFirstVisibleRow(4);
            return that.waitForChanges(assert, "second scroll to node 'V'");
        }).then(function () {
            if (bWithExpand) {
                that.expectChange("isExpanded", [, , , , false, false, false]).expectChange("isTotal", [, , , , true, true, true]).expectChange("level", [, , , , 1, 1, 1]).expectChange("region", [, , , , "W", "V", "U"]).expectChange("accountResponsible", [, , , , "", "", ""]).expectChange("salesAmount", [, , , , "400", "500", "600"]).expectChange("salesNumber", [, , , , null, null, null]).expectCanceledError("Failed to get contexts for /aggregation/BusinessPartners" + " with start index 3 and length 3", "Collapse or expand before read has finished").expectCanceledError("Failed to get contexts for /aggregation/BusinessPartners" + " with start index 4 and length 3", "Collapse or expand before read has finished");
                fnRespondExpand();
            }
            else {
                that.expectChange("isExpanded", [, , , , false, false, false]).expectChange("isTotal", [, , , , true, true, true]).expectChange("level", [, , , , 1, 1, 1]).expectChange("region", [, , , , "V", "U", "T"]).expectChange("accountResponsible", [, , , , "", "", ""]).expectChange("salesAmount", [, , , , "500", "600", "700"]).expectChange("salesNumber", [, , , , null, null, null]);
            }
            fnRespondScroll1();
            fnRespondScroll2();
            return that.waitForChanges(assert, "result");
        }).then(function () {
            assert.deepEqual(oTable.getBinding("rows").oCache.aElements.slice(0, 7).map(function (oElement) {
                return oElement["@$ui5._"]["predicate"];
            }), bWithExpand ? [
                "(Region='Z')",
                "(Region='Y')",
                "(Region='Y',AccountResponsible='a')",
                "(Region='X')",
                "(Region='W')",
                "(Region='V')",
                "(Region='U')"
            ] : [
                "(Region='Z')",
                "(Region='Y')",
                "(Region='X')",
                "(Region='W')",
                "(Region='V')",
                "(Region='U')",
                "(Region='T')"
            ]);
        });
    });
});
QUnit.test("Data Aggregation: expand and paging to the last loaded leaf", function (assert) {
    var oModel = createAggregationModel(), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tAmountPerSale : {grandTotal : true, unit : 'Currency'},\t\t\t\tSalesAmount : {grandTotal : true, unit : 'Currency'},\t\t\t\tSalesAmountLocalCurrency\t\t\t\t\t: {grandTotal : true, subtotals : true, unit : 'LocalCurrency'},\t\t\t\tSalesNumber : {grandTotal : true}\t\t\t},\t\t\tgroup : {\t\t\t\tRegion : {}\t\t\t},\t\t\tgroupLevels : ['Country']\t\t},\t\t$count : true,\t\t$orderby : 'Country desc,Region,Currency asc,LocalCurrency desc'\t}}\" threshold=\"0\" visibleRowCount=\"4\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"amountPerSale\" text=\"{= %{AmountPerSale} }\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/>\t<Text id=\"currency\" text=\"{Currency}\"/>\t<Text id=\"salesAmountLocalCurrency\" text=\"{= %{SalesAmountLocalCurrency} }\"/>\t<Text id=\"localCurrency\" text=\"{LocalCurrency}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=concat(" + "groupby((Country,Region))/aggregate($count as UI5__leaves)" + ",aggregate(AmountPerSale,Currency,SalesAmount,SalesAmountLocalCurrency" + ",LocalCurrency,SalesNumber)" + ",groupby((Country),aggregate(SalesAmountLocalCurrency,LocalCurrency))" + "/orderby(Country desc,LocalCurrency desc)" + "/concat(aggregate($count as UI5__count),top(3)))", {
        value: [{
                UI5__leaves: "42",
                "UI5__leaves@odata.type": "#Decimal"
            }, {
                AmountPerSale: "10",
                Currency: "DEM",
                SalesAmount: "38610",
                SalesAmountLocalCurrency: "35100",
                LocalCurrency: null,
                SalesNumber: 0
            }, {
                UI5__count: "26",
                "UI5__count@odata.type": "#Decimal"
            }, {
                Country: "Z",
                LocalCurrency: "GBP",
                SalesAmountLocalCurrency: "100"
            }, {
                Country: "Y",
                LocalCurrency: "USD",
                SalesAmountLocalCurrency: "200"
            }, {
                Country: "X",
                LocalCurrency: "EUR",
                SalesAmountLocalCurrency: "300"
            }]
    }).expectChange("count").expectChange("isExpanded", [true, false, false, false]).expectChange("isTotal", [true, true, true, true]).expectChange("level", [0, 1, 1, 1]).expectChange("country", ["", "Z", "Y", "X"]).expectChange("region", ["", "", "", ""]).expectChange("amountPerSale", ["10", null, null, null]).expectChange("salesAmount", ["38610", null, null, null]).expectChange("currency", ["DEM", "", "", ""]).expectChange("salesAmountLocalCurrency", ["35100", "100", "200", "300"]).expectChange("localCurrency", ["", "GBP", "USD", "EUR"]).expectChange("salesNumber", ["0", null, null, null]);
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding;
        oTable = that.oView.byId("table");
        oListBinding = oTable.getBinding("rows");
        assert.strictEqual(oTable.getBinding("rows").getDownloadUrl(), "/aggregation/BusinessPartners?$apply=groupby((Country,Region)" + ",aggregate(AmountPerSale,Currency,SalesAmount,SalesAmountLocalCurrency" + ",LocalCurrency,SalesNumber))" + "/orderby(Country%20desc,Region,Currency%20asc,LocalCurrency%20desc)", "CPOUI5ODATAV4-609");
        assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
        assert.strictEqual(oListBinding.getLength(), 27, "length includes grand total row");
        that.expectChange("count", "42");
        that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'X')/groupby((Region)" + ",aggregate(AmountPerSale,Currency,SalesAmount,SalesAmountLocalCurrency" + ",LocalCurrency,SalesNumber))/orderby(Region,Currency asc,LocalCurrency desc)" + "&$count=true&$skip=0&$top=4", {
            "@odata.count": "5",
            value: [{
                    AmountPerSale: "10",
                    Currency: "DEM",
                    LocalCurrency: "USD",
                    Region: "a",
                    SalesAmount: "10.10",
                    SalesAmountLocalCurrency: "10",
                    SalesNumber: 1
                }, {
                    AmountPerSale: "10",
                    Currency: "DEM",
                    LocalCurrency: "USD",
                    Region: "b",
                    SalesAmount: "20.20",
                    SalesAmountLocalCurrency: "20",
                    SalesNumber: 2
                }, {
                    AmountPerSale: "10",
                    Currency: "DEM",
                    LocalCurrency: "USD",
                    Region: "c",
                    SalesAmount: "30.30",
                    SalesAmountLocalCurrency: "30",
                    SalesNumber: 3
                }, {
                    AmountPerSale: "10",
                    Currency: "DEM",
                    LocalCurrency: "USD",
                    Region: "d",
                    SalesAmount: "40.40",
                    SalesAmountLocalCurrency: "40",
                    SalesNumber: 4
                }]
        }).expectChange("isExpanded", [, , , true]);
        oTable.getRows()[3].getBindingContext().expand();
        return that.waitForChanges(assert, "expand node 'X'");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'X')/groupby((Region)" + ",aggregate(AmountPerSale,Currency,SalesAmount,SalesAmountLocalCurrency" + ",LocalCurrency,SalesNumber))/orderby(Region,Currency asc,LocalCurrency desc)" + "&$skip=4&$top=1", {
            value: [{
                    AmountPerSale: "10",
                    Currency: "DEM",
                    LocalCurrency: "USD",
                    Region: "e",
                    SalesAmount: "50.50",
                    SalesAmountLocalCurrency: "50",
                    SalesNumber: 5
                }]
        }).expectRequest("BusinessPartners?$apply=groupby((Country)" + ",aggregate(SalesAmountLocalCurrency,LocalCurrency))" + "/orderby(Country desc,LocalCurrency desc)/skip(3)/top(1)", {
            value: [{
                    Country: "W",
                    LocalCurrency: "JPY",
                    SalesAmountLocalCurrency: "400"
                }]
        }).expectResets(oTable, 4, 0, 4).expectChange("isExpanded", [, , , , , , , , , false]).expectChange("isTotal", [, , , , , , false, false, false, true]).expectChange("level", [, , , , , , 2, 2, 2, 1]).expectChange("country", [, , , , , , "X", "X", "X", "W"]).expectChange("region", [, , , , , , "c", "d", "e", ""]).expectChange("amountPerSale", [, , , , , , "10", "10", "10", null]).expectChange("salesAmount", [, , , , , , "30.30", "40.40", "50.50", null]).expectChange("currency", [, , , , , , "DEM", "DEM", "DEM", ""]).expectChange("salesAmountLocalCurrency", [, , , , , , "30", "40", "50", "400"]).expectChange("localCurrency", [, , , , , , "USD", "USD", "USD", "JPY"]).expectChange("salesNumber", [, , , , , , "3", "4", "5", null]);
        oTable.setFirstVisibleRow(6);
        assert.throws(function () {
            oTable.getRows()[0].getBindingContext().collapse();
        }, new Error("Not expandable: /BusinessPartners()[0]"));
        return that.waitForChanges(assert, "scroll to 'X-c'");
    });
});
[false, true].forEach(function (bGrandTotalAtBottomOnly) {
    var sTitle = "Data Aggregation: grandTotalAtBottomOnly=" + bGrandTotalAtBottomOnly;
    QUnit.test(sTitle, function (assert) {
        var oModel = createAggregationModel(), sView = "<t:Table fixedBottomRowCount=\"1\" fixedRowCount=\"" + (bGrandTotalAtBottomOnly ? 0 : 1) + "\"\tid=\"table\" rows=\"{path : '/BusinessPartners', parameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesNumber : {grandTotal : true}\t\t\t},\t\t\tgrandTotalAtBottomOnly : " + bGrandTotalAtBottomOnly + ",\t\t\tgroup : {Country : {}}\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"" + (bGrandTotalAtBottomOnly ? 4 : 5) + "\">\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
        this.expectRequest("BusinessPartners?$apply=concat(aggregate(SalesNumber)" + ",groupby((Country),aggregate(SalesNumber))" + "/concat(aggregate($count as UI5__count),top(3)))", {
            value: [{
                    SalesNumber: 0
                }, {
                    UI5__count: "7"
                }, {
                    Country: "Z",
                    SalesNumber: 26
                }, {
                    Country: "Y",
                    SalesNumber: 25
                }, {
                    Country: "X",
                    SalesNumber: 24
                }]
        });
        if (bGrandTotalAtBottomOnly) {
            this.expectChange("isExpanded", [undefined, undefined, undefined, , , , , true]).expectChange("isTotal", [false, false, false, , , , , true]).expectChange("level", [1, 1, 1, , , , , 0]).expectChange("country", ["Z", "Y", "X", , , , , ""]).expectChange("salesNumber", ["26", "25", "24", , , , , "0"]);
        }
        else {
            this.expectChange("isExpanded", [true, undefined, undefined, undefined, , , , , undefined]).expectChange("isTotal", [true, false, false, false, , , , , true]).expectChange("level", [0, 1, 1, 1, , , , , 0]).expectChange("country", ["", "Z", "Y", "X", , , , , ""]).expectChange("salesNumber", ["0", "26", "25", "24", , , , , "0"]);
        }
        return this.createView(assert, sView, oModel).then(function () {
            var aExpectedPaths = [
                "/BusinessPartners(Country='Z')",
                "/BusinessPartners(Country='Y')",
                "/BusinessPartners(Country='X')"
            ], oTable = that.oView.byId("table");
            if (bGrandTotalAtBottomOnly) {
                aExpectedPaths.push("/BusinessPartners()");
            }
            else {
                aExpectedPaths.unshift("/BusinessPartners()");
                aExpectedPaths.push("/BusinessPartners($isTotal=true)");
            }
            assert.deepEqual(oTable.getRows().map(getBindingContextPath), aExpectedPaths);
            assert.throws(function () {
                oTable.getRows()[bGrandTotalAtBottomOnly ? 3 : 0].getBindingContext().collapse();
            }, new Error("Not expandable: /BusinessPartners()[" + (bGrandTotalAtBottomOnly ? "7" : "0") + "]"));
        });
    });
});
[false, true].forEach(function (bSubtotalsAtBottomOnly) {
    var sTitle = "Data Aggregation: subtotalsAtBottomOnly=" + bSubtotalsAtBottomOnly;
    QUnit.test(sTitle, function (assert) {
        var oListBinding, oModel = createAggregationModel(), oTable, sView = "<Table id=\"table\" items=\"{path : '/BusinessPartners', parameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmountLocalCurrency :\t\t\t\t\t{grandTotal : true, subtotals : true, unit : 'LocalCurrency'}\t\t\t},\t\t\tgrandTotalAtBottomOnly : false,\t\t\tgroupLevels : ['Country','LocalCurrency','Region'],\t\t\tsubtotalsAtBottomOnly : " + bSubtotalsAtBottomOnly + "\t\t}\t}}\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesAmountLocalCurrency\" text=\"{= %{SalesAmountLocalCurrency} }\"/>\t<Text id=\"localCurrency\" text=\"{LocalCurrency}\"/></Table>", that = this;
        function checkTable(sTitle, aExpectedPaths, aExpectedContent) {
            assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
            assert.strictEqual(oListBinding.getLength(), aExpectedPaths.length, sTitle);
            assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), aExpectedPaths);
            aExpectedContent = aExpectedContent.map(function (aTexts) {
                return aTexts.map(function (vText) {
                    return vText !== undefined ? String(vText) : "";
                });
            });
            assert.deepEqual(oTable.getItems().map(function (oItem) {
                return oItem.getCells().map(function (oCell) {
                    return oCell.getText();
                });
            }), aExpectedContent, sTitle);
        }
        function subtotalAtTop(sText) {
            return bSubtotalsAtBottomOnly ? "" : sText;
        }
        this.expectRequest("BusinessPartners" + "?$apply=concat(aggregate(SalesAmountLocalCurrency,LocalCurrency)" + ",groupby((Country),aggregate(SalesAmountLocalCurrency,LocalCurrency))" + "/concat(aggregate($count as UI5__count),top(99)))", {
            value: [{
                    LocalCurrency: null,
                    SalesAmountLocalCurrency: "3510"
                }, {
                    UI5__count: "1",
                    "UI5__count@odata.type": "#Decimal"
                }, {
                    Country: "A",
                    LocalCurrency: "EUR",
                    SalesAmountLocalCurrency: "10"
                }]
        }).expectChange("level", [0, 1, 0]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            oListBinding = oTable.getBinding("items");
            checkTable("initial state", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [undefined, false, true, 1, "A", "", "10", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectRequest("BusinessPartners?$apply=filter(Country eq 'A')" + "/groupby((LocalCurrency),aggregate(SalesAmountLocalCurrency))" + "&$count=true&$skip=0&$top=100", {
                "@odata.count": "1",
                value: [{
                        LocalCurrency: "EUR",
                        SalesAmountLocalCurrency: "10"
                    }]
            }).expectChange("level", [, , 2, 1, 0]);
            oListBinding.getCurrentContexts()[1].expand();
            return that.waitForChanges(assert, "expand node 'A'");
        }).then(function () {
            checkTable("node 'A' expanded", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR')",
                "/BusinessPartners(Country='A',$isTotal=true)",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [1, true, true, 1, "A", "", subtotalAtTop("10"), subtotalAtTop("EUR")],
                [undefined, false, true, 2, "A", "", "10", "EUR"],
                [undefined, undefined, true, 1, "", "", "10", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectRequest("BusinessPartners" + "?$apply=filter(Country eq 'A' and LocalCurrency eq 'EUR')" + "/groupby((Region),aggregate(SalesAmountLocalCurrency,LocalCurrency))" + "&$count=true&$skip=0&$top=100", {
                "@odata.count": "3",
                value: [{
                        LocalCurrency: "EUR",
                        Region: "a",
                        SalesAmountLocalCurrency: "1"
                    }, {
                        LocalCurrency: "EUR",
                        Region: "b",
                        SalesAmountLocalCurrency: "2"
                    }, {
                        LocalCurrency: "EUR",
                        Region: "c",
                        SalesAmountLocalCurrency: "3"
                    }]
            }).expectChange("level", [, , , 3, 3, 3, 2, 1, 0]);
            oListBinding.getCurrentContexts()[2].expand();
            return that.waitForChanges(assert, "expand node 'A/EUR'");
        }).then(function () {
            checkTable("node 'A/EUR' expanded", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='a')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='b')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='c')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',$isTotal=true)",
                "/BusinessPartners(Country='A',$isTotal=true)",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [1, true, true, 1, "A", "", subtotalAtTop("10"), subtotalAtTop("EUR")],
                [3, true, true, 2, "A", "", subtotalAtTop("10"), "EUR"],
                [undefined, false, true, 3, "A", "a", "1", "EUR"],
                [undefined, false, true, 3, "A", "b", "2", "EUR"],
                [undefined, false, true, 3, "A", "c", "3", "EUR"],
                [undefined, undefined, true, 2, "", "", "10", "EUR"],
                [undefined, undefined, true, 1, "", "", "10", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectChange("level", [, , 0]);
            oListBinding.getCurrentContexts()[1].collapse();
            return that.waitForChanges(assert, "collapse node 'A'");
        }).then(function () {
            checkTable("node 'A' collapsed", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [undefined, false, true, 1, "A", "", "10", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
        });
    });
});
[false, true].forEach(function (bSubtotalsAtBottomOnly) {
    var sTitle = "Data Aggregation: subtotalsAtBottomOnly = " + bSubtotalsAtBottomOnly + " w/o subtotals";
    QUnit.test(sTitle, function (assert) {
        var oListBinding, oModel = createAggregationModel(), oTable, sView = "<Table id=\"table\" items=\"{path : '/BusinessPartners', parameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmountLocalCurrency : {\t\t\t\t\tgrandTotal : true,\t\t\t\t\tunit : 'LocalCurrency'\t\t\t\t}\t\t\t},\t\t\tgrandTotalAtBottomOnly : false,\t\t\tgroupLevels : ['Country','LocalCurrency','Region'],\t\t\tsubtotalsAtBottomOnly : " + bSubtotalsAtBottomOnly + "\t\t}\t}}\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesAmountLocalCurrency\" text=\"{= %{SalesAmountLocalCurrency} }\"/>\t<Text id=\"localCurrency\" text=\"{LocalCurrency}\"/></Table>", that = this;
        function checkTable(sTitle, aExpectedPaths, aExpectedContent) {
            assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
            assert.strictEqual(oListBinding.getLength(), aExpectedPaths.length, sTitle);
            assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), aExpectedPaths);
            aExpectedContent = aExpectedContent.map(function (aTexts) {
                return aTexts.map(function (vText) {
                    return vText !== undefined ? String(vText) : "";
                });
            });
            assert.deepEqual(oTable.getItems().map(function (oItem) {
                return oItem.getCells().map(function (oCell) {
                    return oCell.getText();
                });
            }), aExpectedContent, sTitle);
        }
        this.expectRequest("BusinessPartners?$apply=" + "concat(aggregate(SalesAmountLocalCurrency,LocalCurrency),groupby((Country))" + "/concat(aggregate($count as UI5__count),top(99)))", {
            value: [{
                    LocalCurrency: null,
                    SalesAmountLocalCurrency: "3510"
                }, {
                    UI5__count: "1",
                    "UI5__count@odata.type": "#Decimal"
                }, {
                    Country: "A"
                }]
        }).expectChange("level", [0, 1, 0]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            oListBinding = oTable.getBinding("items");
            checkTable("initial state", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [undefined, false, false, 1, "A", "", "", ""],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectRequest("BusinessPartners?$apply=filter(Country eq 'A')" + "/groupby((LocalCurrency))&$count=true&$skip=0&$top=100", {
                "@odata.count": "1",
                value: [{
                        LocalCurrency: "EUR"
                    }]
            }).expectChange("level", [, , 2, 0]);
            oListBinding.getCurrentContexts()[1].expand();
            return that.waitForChanges(assert, "expand node 'A'");
        }).then(function () {
            checkTable("node 'A' expanded", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [1, true, false, 1, "A", "", "", ""],
                [undefined, false, false, 2, "A", "", "", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectRequest("BusinessPartners" + "?$apply=filter(Country eq 'A' and LocalCurrency eq 'EUR')" + "/groupby((Region))&$count=true&$skip=0&$top=100", {
                "@odata.count": "3",
                value: [{
                        Region: "a"
                    }, {
                        Region: "b"
                    }, {
                        Region: "c"
                    }]
            }).expectChange("level", [, , , 3, 3, 3, 0]);
            oListBinding.getCurrentContexts()[2].expand();
            return that.waitForChanges(assert, "expand node 'A/EUR'");
        }).then(function () {
            checkTable("node 'A/EUR' expanded", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='a')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='b')",
                "/BusinessPartners(Country='A',LocalCurrency='EUR',Region='c')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [1, true, false, 1, "A", "", "", ""],
                [3, true, false, 2, "A", "", "", "EUR"],
                [undefined, false, false, 3, "A", "a", "", "EUR"],
                [undefined, false, false, 3, "A", "b", "", "EUR"],
                [undefined, false, false, 3, "A", "c", "", "EUR"],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
            that.expectChange("level", [, , 0]);
            oListBinding.getCurrentContexts()[1].collapse();
            return that.waitForChanges(assert, "collapse node 'A'");
        }).then(function () {
            checkTable("node 'A' collapsed", [
                "/BusinessPartners()",
                "/BusinessPartners(Country='A')",
                "/BusinessPartners($isTotal=true)"
            ], [
                [undefined, true, true, 0, "", "", "3510", ""],
                [undefined, false, false, 1, "A", "", "", ""],
                [undefined, undefined, true, 0, "", "", "3510", ""]
            ]);
        });
    });
});
QUnit.test("Data Aggregation: grandTotalAtBottomOnly=true, just two rows", function (assert) {
    var oModel = createAggregationModel(), sView = "<t:Table fixedBottomRowCount=\"1\" id=\"table\" rows=\"{path : '/BusinessPartners', parameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesNumber : {grandTotal : true}\t\t\t},\t\t\tgrandTotalAtBottomOnly : true,\t\t\tgroupLevels : ['Country','Region'],\t\t\tsubtotalsAtBottomOnly : false\t\t}\t}}\" visibleRowCount=\"2\">\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=concat(aggregate(SalesNumber)" + ",groupby((Country))/concat(aggregate($count as UI5__count),top(101)))", {
        value: [{ SalesNumber: 0 }, { UI5__count: "1" }, { Country: "Z" }]
    }).expectChange("isExpanded", [false, true]).expectChange("isTotal", [false, true]).expectChange("level", [1, 0]).expectChange("country", ["Z", ""]).expectChange("salesNumber", [null, "0"]);
    return this.createView(assert, sView, oModel).then(function () {
        assert.deepEqual(that.oView.byId("table").getRows().map(getBindingContextPath), [
            "/BusinessPartners(Country='Z')",
            "/BusinessPartners()"
        ]);
    });
});
QUnit.test("Data Aggregation: collapse with placeholders", function (assert) {
    var oModel = createAggregationModel(), oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {subtotals : true}\t\t\t},\t\t\tgroup : {\t\t\t\tRegion : {}\t\t\t},\t\t\tgroupLevels : ['Country']\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"4\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Country),aggregate(SalesAmount))" + "&$count=true&$skip=0&$top=4", {
        "@odata.count": "2",
        value: [
            { Country: "US", SalesAmount: "100" },
            { Country: "UK", SalesAmount: "200" }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined]).expectChange("isExpanded", [false, false]).expectChange("isTotal", [true, true]).expectChange("level", [1, 1]).expectChange("country", ["US", "UK"]).expectChange("region", ["", ""]).expectChange("salesAmount", ["100", "200"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'UK')" + "/groupby((Region),aggregate(SalesAmount))&$count=true&$skip=0&$top=4", {
            "@odata.count": "12",
            value: [
                { Region: "Z", SalesAmount: "10" },
                { Region: "Y", SalesAmount: "20" },
                { Region: "X", SalesAmount: "30" },
                { Region: "W", SalesAmount: "40" }
            ]
        }).expectChange("groupLevelCount", [, 12, undefined, undefined]).expectChange("isExpanded", [, true, undefined, undefined]).expectChange("isTotal", [, , false, false]).expectChange("level", [, , 2, 2]).expectChange("country", [, , "UK", "UK"]).expectChange("region", [, , "Z", "Y"]).expectChange("salesAmount", [, , "10", "20"]);
        oTable.getRows()[1].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'UK'");
    }).then(function () {
        var oThirdRow = oTable.getRows()[2].getBindingContext();
        that.expectResets(oTable, 2, 2, 2).expectChange("groupLevelCount", [, undefined]).expectChange("isExpanded", [, false]);
        oTable.getRows()[1].getBindingContext().collapse();
        assert.strictEqual(oTable.getBinding("rows").getContexts().length, 2);
        that.oLogMock.expects("error").withExactArgs("Failed to drill-down into" + " (Country='UK',Region='Z')/Region, invalid segment: (Country='UK',Region='Z')", "/aggregation/BusinessPartners" + "?$apply=groupby((Country,Region),aggregate(SalesAmount))", "sap.ui.model.odata.v4.lib._Cache");
        assert.strictEqual(oThirdRow.getProperty("Region"), undefined, "$byPredicate has been cleaned up");
        return that.waitForChanges(assert, "collapse 'UK'");
    });
});
QUnit.test("Data Aggregation: expand three levels, expand after collapse", function (assert) {
    var oModel = createAggregationModel(), oRowsBinding, oTable, oUKContext, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {subtotals : true},\t\t\t\tSalesNumber : {}\t\t\t},\t\t\tgroup : {\t\t\t\tAccountResponsible : {},\t\t\t\tCountry : {additionally : ['CountryText']},\t\t\t\tRegion : {additionally : ['RegionText']}\t\t\t},\t\t\tgroupLevels : ['Country', 'Region', 'Segment']\t\t},\t\t$orderby : 'RegionText desc'\t}}\" threshold=\"0\" visibleRowCount=\"4\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"countryText\" text=\"{CountryText}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"regionText\" text=\"{RegionText}\"/>\t<Text id=\"segment\" text=\"{Segment}\"/>\t<Text id=\"accountResponsible\" text=\"{AccountResponsible}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Country,CountryText)" + ",aggregate(SalesAmount))&$count=true&$skip=0&$top=4", {
        "@odata.count": "26",
        value: [
            { Country: "US", CountryText: "<US>", SalesAmount: "100" },
            { Country: "UK", CountryText: "<UK>", SalesAmount: "200" },
            { Country: "DE", CountryText: "<DE>", SalesAmount: "300" },
            { Country: "IT", CountryText: "<IT>", SalesAmount: "400" }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false, false]).expectChange("isTotal", [true, true, true, true]).expectChange("level", [1, 1, 1, 1]).expectChange("country", ["US", "UK", "DE", "IT"]).expectChange("countryText", ["<US>", "<UK>", "<DE>", "<IT>"]).expectChange("region", ["", "", "", ""]).expectChange("regionText", ["", "", "", ""]).expectChange("segment", ["", "", "", ""]).expectChange("accountResponsible", ["", "", "", ""]).expectChange("salesAmount", ["100", "200", "300", "400"]).expectChange("salesNumber", [null, null, null, null]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oRowsBinding = oTable.getBinding("rows");
        assert.strictEqual(oRowsBinding.getDownloadUrl(), "/aggregation/BusinessPartners?$apply=groupby((Country,Region,Segment" + ",AccountResponsible,CountryText,RegionText)" + ",aggregate(SalesAmount,SalesNumber))" + "/orderby(RegionText%20desc)", "CPOUI5ODATAV4-609");
        assert.strictEqual(oRowsBinding.getLength(), 26);
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region,RegionText),aggregate(SalesAmount))" + "/orderby(RegionText desc)&$count=true&$skip=0&$top=4", {
            "@odata.count": "3",
            value: [
                { Region: "Z", RegionText: "<Z>", SalesAmount: "10" },
                { Region: "Y", RegionText: "<Y>", SalesAmount: "20" },
                { Region: "X", RegionText: "<X>", SalesAmount: "30" }
            ]
        }).expectChange("groupLevelCount", [3]).expectChange("isExpanded", [true]).expectChange("level", [, 2, 2, 2]).expectChange("country", [, "US", "US", "US"]).expectChange("countryText", [, "<US>", "<US>", "<US>"]).expectChange("region", [, "Z", "Y", "X"]).expectChange("regionText", [, "<Z>", "<Y>", "<X>"]).expectChange("salesAmount", [, "10", "20", "30"]);
        oTable.getRows()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "first expand 'US'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3);
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'US' and Region eq 'Z')" + "/groupby((Segment),aggregate(SalesAmount))&$count=true&$skip=0&$top=4", {
            "@odata.count": "2",
            value: [
                { SalesAmount: "10", Segment: "z" },
                { SalesAmount: "20", Segment: "y" }
            ]
        }).expectChange("groupLevelCount", [, 2]).expectChange("isExpanded", [, true]).expectChange("level", [, , 3, 3]).expectChange("region", [, , "Z", "Z"]).expectChange("regionText", [, , "<Z>", "<Z>"]).expectChange("segment", [, , "z", "y"]).expectChange("salesAmount", [, , "10", "20"]);
        oTable.getRows()[1].getBindingContext().expand();
        return that.waitForChanges(assert, "second expand 'US-Z'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3 + 2);
        that.expectRequest("BusinessPartners?$apply=" + "filter(Country eq 'US' and Region eq 'Z' and Segment eq 'z')" + "/groupby((AccountResponsible),aggregate(SalesAmount,SalesNumber))" + "&$count=true&$skip=0&$top=4", {
            "@odata.count": "1",
            value: [
                { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 }
            ]
        }).expectChange("groupLevelCount", [, , 1]).expectChange("isExpanded", [, , true, undefined]).expectChange("isTotal", [, , , false]).expectChange("level", [, , , 4]).expectChange("segment", [, , , "z"]).expectChange("accountResponsible", [, , , "a"]).expectChange("salesAmount", [, , , "10"]).expectChange("salesNumber", [, , , "1"]);
        oTable.getRows()[2].getBindingContext().expand();
        return that.waitForChanges(assert, "third expand 'US-Z-z'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3 + 2 + 1);
        that.expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false, false]).expectChange("isTotal", [, , , true]).expectChange("level", [, 1, 1, 1]).expectChange("country", [, "UK", "DE", "IT"]).expectChange("countryText", [, "<UK>", "<DE>", "<IT>"]).expectChange("region", [, "", "", ""]).expectChange("regionText", [, "", "", ""]).expectChange("segment", [, , "", ""]).expectChange("accountResponsible", [, , , ""]).expectChange("salesAmount", [, "200", "300", "400"]).expectChange("salesNumber", [, , , null]);
        oTable.getRows()[0].getBindingContext().collapse();
        return that.waitForChanges(assert, "collapse 'US'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26);
        oUKContext = oRowsBinding.getCurrentContexts()[1];
        that.expectChange("groupLevelCount", [3, 2, 1]).expectChange("isExpanded", [true, true, true, undefined]).expectChange("isTotal", [, , , false]).expectChange("level", [, 2, 3, 4]).expectChange("country", [, "US", "US", "US"]).expectChange("countryText", [, "<US>", "<US>", "<US>"]).expectChange("region", [, "Z", "Z", "Z"]).expectChange("regionText", [, "<Z>", "<Z>", "<Z>"]).expectChange("segment", [, , "z", "z"]).expectChange("accountResponsible", [, , , "a"]).expectChange("salesAmount", [, "10", "10", "10"]).expectChange("salesNumber", [, , , "1"]);
        oTable.getRows()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'US' again");
    }).then(function () {
        var oUKContext0;
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3 + 2 + 1);
        assert.deepEqual(oRowsBinding.getCurrentContexts().map(getPath), [
            "/BusinessPartners(Country='US')",
            "/BusinessPartners(Country='US',Region='Z')",
            "/BusinessPartners(Country='US',Region='Z',Segment='z')",
            "/BusinessPartners(Country='US',Region='Z',Segment='z',AccountResponsible='a')"
        ]);
        oUKContext0 = oRowsBinding.getContexts(7, 1)[0];
        assert.strictEqual(oUKContext0.getPath(), oUKContext.getPath());
        assert.ok(oUKContext0 === oUKContext, "'UK' context is still the same instance");
    }).then(function () {
        that.expectChange("groupLevelCount", [, undefined, undefined]).expectChange("isExpanded", [, false, false, false]).expectChange("isTotal", [, , , true]).expectChange("level", [, , 2, 2]).expectChange("region", [, , "Y", "X"]).expectChange("regionText", [, , "<Y>", "<X>"]).expectChange("segment", [, , "", ""]).expectChange("accountResponsible", [, , , ""]).expectChange("salesAmount", [, , "20", "30"]).expectChange("salesNumber", [, , , null]);
        oTable.getRows()[1].getBindingContext().collapse();
        return that.waitForChanges(assert, "collapse 'US-Z'");
    });
});
QUnit.test("Data Aggregation: additionally via navigation", function (assert) {
    var oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/Artists',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tsendsAutographs : {}\t\t\t},\t\t\tgroup : {\t\t\t\tArtistID : {additionally : ['Address/City']},\t\t\t\tIsActiveEntity : {\t\t\t\t\tadditionally : ['BestPublication/DraftAdministrativeData/InProcessByUser']\t\t\t\t},\t\t\t\tName : {additionally : ['BestFriend/Name']}\t\t\t},\t\t\tgroupLevels : ['IsActiveEntity', 'Name'],\t\t\tsubtotalsAtBottomOnly : true\t\t},\t\t$orderby :'BestPublication/DraftAdministrativeData/InProcessByUser desc,BestFriend/Name,Address/City asc'\t}}\" threshold=\"0\" visibleRowCount=\"6\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"isActiveEntity\" text=\"{= %{IsActiveEntity} }\"/>\t<Text id=\"inProcessByUser\" text=\"{BestPublication/DraftAdministrativeData/InProcessByUser}\"/>\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"bestFriendName\" text=\"{BestFriend/Name}\"/>\t<Text id=\"artistID\" text=\"{ArtistID}\"/>\t<Text id=\"city\" text=\"{Address/City}\"/>\t<Text id=\"sendsAutographs\" text=\"{= %{sendsAutographs} }\"/></t:Table>", that = this;
    this.expectRequest("Artists?$apply=groupby" + "((IsActiveEntity,BestPublication/DraftAdministrativeData/InProcessByUser))" + "/orderby(BestPublication/DraftAdministrativeData/InProcessByUser%20desc)" + "&$count=true&$skip=0&$top=6", {
        "@odata.count": "2",
        value: [{
                BestPublication: {
                    DraftAdministrativeData: {
                        InProcessByUser: "JOHNDOE"
                    }
                },
                IsActiveEntity: false
            }, {
                BestPublication: {
                    DraftAdministrativeData: {
                        InProcessByUser: null
                    }
                },
                IsActiveEntity: true
            }]
    }).expectChange("groupLevelCount", [undefined, undefined]).expectChange("isExpanded", [false, false]).expectChange("isTotal", [false, false]).expectChange("level", [1, 1]).expectChange("isActiveEntity", [false, true]).expectChange("inProcessByUser", ["JOHNDOE", ""]).expectChange("name", ["", ""]).expectChange("bestFriendName", ["", ""]).expectChange("artistID", ["", ""]).expectChange("city", ["", ""]).expectChange("sendsAutographs", [null, null]);
    return this.createView(assert, sView, createSpecialCasesModel()).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("Artists?$apply=filter(IsActiveEntity eq true)" + "/groupby((Name,BestFriend/Name))/orderby(BestFriend/Name)" + "&$count=true&$skip=0&$top=6", {
            "@odata.count": "2",
            value: [
                { BestFriend: { Name: "A's best friend" }, Name: "A" },
                { BestFriend: { Name: "B's best friend" }, Name: "B" }
            ]
        }).expectChange("groupLevelCount", [, 2, undefined, undefined]).expectChange("isExpanded", [, true, false, false]).expectChange("isTotal", [, , false, false]).expectChange("level", [, , 2, 2]).expectChange("isActiveEntity", [, , true, true]).expectChange("inProcessByUser", [, , "", ""]).expectChange("name", [, , "A", "B"]).expectChange("bestFriendName", [, , "A's best friend", "B's best friend"]).expectChange("artistID", [, , "", ""]).expectChange("city", [, , "", ""]).expectChange("sendsAutographs", [, , null, null]);
        oTable.getRows()[1].getBindingContext().expand();
        return that.waitForChanges(assert, "1st expand");
    }).then(function () {
        that.expectRequest("Artists?$apply=filter(IsActiveEntity eq true and Name eq 'B')" + "/groupby((ArtistID,Address/City),aggregate(sendsAutographs))" + "/orderby(Address/City asc)&$count=true&$skip=0&$top=6", {
            "@odata.count": "2",
            value: [{
                    Address: { City: "Liverpool" },
                    ArtistID: "1",
                    sendsAutographs: false
                }, {
                    Address: { City: "London" },
                    ArtistID: "2",
                    sendsAutographs: true
                }]
        }).expectChange("groupLevelCount", [, , , 2, undefined, undefined]).expectChange("isExpanded", [, , , true, undefined, undefined]).expectChange("isTotal", [, , , , false, false]).expectChange("level", [, , , , 3, 3]).expectChange("isActiveEntity", [, , , , true, true]).expectChange("inProcessByUser", [, , , , "", ""]).expectChange("name", [, , , , "B", "B"]).expectChange("bestFriendName", [, , , , "B's best friend", "B's best friend"]).expectChange("artistID", [, , , , "1", "2"]).expectChange("city", [, , , , "Liverpool", "London"]).expectChange("sendsAutographs", [, , , , false, true]);
        oTable.getRows()[3].getBindingContext().expand();
        return that.waitForChanges(assert, "2nd expand");
    });
});
[false, true].forEach(function (bSecondScroll) {
    var sTitle = "Data Aggregation: expand and paging in parallel. (Second scroll = " + bSecondScroll + ")";
    QUnit.test(sTitle, function (assert) {
        var oModel = createAggregationModel(), oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {}\t\t\t},\t\t\tgroup : {\t\t\t\tAccountResponsible : {}\t\t\t},\t\t\tgroupLevels : ['Region'],\t\t\tsubtotalsAtBottomOnly : false\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"accountResponsible\" text=\"{AccountResponsible}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/></t:Table>", that = this;
        this.expectRequest("BusinessPartners?$apply=groupby((Region))&$count=true&$skip=0&$top=3", {
            "@odata.count": "26",
            value: [
                { Region: "Z" },
                { Region: "Y" },
                { Region: "X" }
            ]
        }).expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false]).expectChange("isTotal", [false, false, false]).expectChange("level", [1, 1, 1]).expectChange("region", ["Z", "Y", "X"]).expectChange("accountResponsible", ["", "", ""]).expectChange("salesAmount", [null, null, null]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            that.expectChange("isExpanded", [, true]);
            if (!bSecondScroll) {
                that.expectResets(oTable, 2, 0, 2).expectChange("region", [, , "X"]).expectChange("groupLevelCount", [, ,]).expectChange("isExpanded", [, , undefined]).expectChange("level", [, , 2]).expectChange("region", [, , "Y"]).expectChange("accountResponsible", [, , "a"]).expectChange("salesAmount", [, , "10"]);
            }
            else {
                that.expectResets(oTable, 3, 0, 3);
            }
            that.expectRequest("BusinessPartners?$apply=filter(Region eq 'Y')" + "/groupby((AccountResponsible),aggregate(SalesAmount))" + "&$count=true&$skip=0&$top=3", {
                "@odata.count": "1",
                value: [
                    { AccountResponsible: "a", SalesAmount: "10", SalesNumber: 1 }
                ]
            });
            oTable.getRows()[1].getBindingContext().expand();
            that.expectRequest("BusinessPartners?$apply=groupby((Region))&$skip=3&$top=" + (bSecondScroll ? "3" : "2"), {
                value: [
                    { Region: "W" },
                    { Region: "V" }
                ]
            });
            if (!bSecondScroll) {
                that.expectChange("groupLevelCount", [, , , ,]).expectChange("isExpanded", [, , , false, false]).expectChange("isTotal", [, , , false, false]).expectChange("level", [, , , 1, 1]).expectChange("region", [, , , "X", "W"]).expectChange("accountResponsible", [, , , "", ""]).expectChange("salesAmount", [, , , null, null]).expectCanceledError("Failed to get contexts for /aggregation/BusinessPartners" + " with start index 2 and length 3", "Collapse or expand before read has finished");
                oTable.setFirstVisibleRow(2);
            }
            else {
                that.expectChange("isExpanded", [, , , false, false, false]).expectChange("isTotal", [, , , false, false, false]).expectChange("level", [, , , 1, 1, 1]).expectChange("region", [, , , "X", "W", "V"]).expectChange("accountResponsible", [, , , "", "", ""]).expectChange("salesAmount", [, , , null, null, null]).expectCanceledError("Failed to get contexts for /aggregation/BusinessPartners" + " with start index 3 and length 3", "Collapse or expand before read has finished");
                oTable.setFirstVisibleRow(3);
            }
            return that.waitForChanges(assert, "expand and paging in parallel");
        }).then(function () {
            assert.deepEqual(oTable.getBinding("rows").getContexts(0, 6).map(getPath), [
                "/BusinessPartners(Region='Z')",
                "/BusinessPartners(Region='Y')",
                "/BusinessPartners(Region='Y',AccountResponsible='a')",
                "/BusinessPartners(Region='X')",
                "/BusinessPartners(Region='W')",
                "/BusinessPartners(Region='V')"
            ]);
        });
    });
});
QUnit.test("Data Aggregation: collapse while expanding", function (assert) {
    var oModel = createAggregationModel(), oRowsBinding, oTable, oUKContext, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {subtotals : true}\t\t\t},\t\t\tgroup : {\t\t\t\tSegment : {}\t\t\t},\t\t\tgroupLevels : ['Country', 'Region']\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"8\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"segment\" text=\"{Segment}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Country),aggregate(SalesAmount))" + "&$count=true&$skip=0&$top=8", {
        "@odata.count": "26",
        value: [
            { Country: "US", SalesAmount: "100" },
            { Country: "UK", SalesAmount: "200" },
            { Country: "DE", SalesAmount: "300" },
            { Country: "IT", SalesAmount: "400" },
            { Country: "FR", SalesAmount: "500" },
            { Country: "BE", SalesAmount: "600" },
            { Country: "NL", SalesAmount: "700" },
            { Country: "LU", SalesAmount: "800" }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined]).expectChange("isExpanded", [false, false, false, false, false, false, false, false]).expectChange("isTotal", [true, true, true, true, true, true, true, true]).expectChange("level", [1, 1, 1, 1, 1, 1, 1, 1]).expectChange("country", ["US", "UK", "DE", "IT", "FR", "BE", "NL", "LU"]).expectChange("region", ["", "", "", "", "", "", "", ""]).expectChange("segment", ["", "", "", "", "", "", "", ""]).expectChange("salesAmount", ["100", "200", "300", "400", "500", "600", "700", "800"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oRowsBinding = oTable.getBinding("rows");
        assert.strictEqual(oRowsBinding.getLength(), 26);
        oUKContext = oRowsBinding.getCurrentContexts()[1];
        that.expectChange("isExpanded", [true]).expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region),aggregate(SalesAmount))&$count=true&$skip=0&$top=8", {
            "@odata.count": "3",
            value: [
                { Region: "Z", SalesAmount: "10" },
                { Region: "Y", SalesAmount: "20" },
                { Region: "X", SalesAmount: "30" }
            ]
        }).expectChange("isExpanded", [false]);
        oTable.getRows()[0].getBindingContext().expand();
        oTable.getRows()[0].getBindingContext().collapse();
        return that.waitForChanges(assert, "expand and collapse 'US'");
    }).then(function () {
        var oUKContext0;
        assert.strictEqual(oRowsBinding.getLength(), 26);
        assert.deepEqual(oRowsBinding.getCurrentContexts().map(getPath), [
            "/BusinessPartners(Country='US')",
            "/BusinessPartners(Country='UK')",
            "/BusinessPartners(Country='DE')",
            "/BusinessPartners(Country='IT')",
            "/BusinessPartners(Country='FR')",
            "/BusinessPartners(Country='BE')",
            "/BusinessPartners(Country='NL')",
            "/BusinessPartners(Country='LU')"
        ]);
        oUKContext0 = oRowsBinding.getCurrentContexts()[1];
        assert.strictEqual(oUKContext0.getPath(), oUKContext.getPath());
        assert.ok(oUKContext0 === oUKContext, "'UK' context is still the same instance");
        that.expectChange("isExpanded", [true]).expectChange("groupLevelCount", [3]).expectChange("level", [, 2, 2, 2]).expectChange("country", [, "US", "US", "US", "UK", "DE", "IT", "FR"]).expectChange("region", [, "Z", "Y", "X"]).expectChange("salesAmount", [, "10", "20", "30", "200", "300", "400", "500"]);
        oTable.getRows()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'US' again");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3);
        that.expectChange("groupLevelCount", [undefined]).expectChange("isExpanded", [, true, true]).expectChange("isExpanded", [false, false, false]).expectChange("level", [, 1, 1, 1]).expectChange("country", [, "UK", "DE", "IT", "FR", "BE", "NL", "LU"]).expectChange("region", [, "", "", ""]).expectChange("salesAmount", [, "200", "300", "400", "500", "600", "700", "800"]).expectRequest("BusinessPartners?$apply=filter(Country eq 'US' and Region eq 'Z')" + "/groupby((Segment),aggregate(SalesAmount))&$count=true&$skip=0&$top=8", {
            "@odata.count": "2",
            value: [
                { SalesAmount: "1", Segment: "z" },
                { SalesAmount: "2", Segment: "y" }
            ]
        }).expectRequest("BusinessPartners?$apply=filter(Country eq 'US' and Region eq 'Y')" + "/groupby((Segment),aggregate(SalesAmount))&$count=true&$skip=0&$top=8", {
            "@odata.count": "1",
            value: [
                { SalesAmount: "26", Segment: "a" }
            ]
        });
        oTable.getRows()[1].getBindingContext().expand();
        oTable.getRows()[2].getBindingContext().expand();
        oTable.getRows()[0].getBindingContext().collapse();
        return that.waitForChanges(assert, "expand 'US-Z' and 'US-Y' and collapse 'US'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26);
        that.expectChange("groupLevelCount", [3, 2, , , 1]).expectChange("isExpanded", [true, true, undefined, undefined, true, undefined]).expectChange("isTotal", [, , false, false, , false]).expectChange("level", [, 2, 3, 3, 2, 3, 2]).expectChange("country", [, "US", "US", "US", "US", "US", "US", "UK"]).expectChange("region", [, "Z", "Z", "Z", "Y", "Y", "X"]).expectChange("segment", [, , "z", "y", , "a"]).expectChange("salesAmount", [, "10", "1", "2", "20", "26", "30", "200"]);
        oTable.getRows()[0].getBindingContext().expand();
        return that.waitForChanges(assert, "expand 'US' again");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 26 + 3 + 2 + 1);
    });
});
QUnit.test("Data Aggregation: collapse while paging", function (assert) {
    var oModel = createAggregationModel(), oRowsBinding, oTable, oUSContext, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\tparameters : {\t\t$$aggregation : {\t\t\taggregate : {\t\t\t\tSalesAmount : {subtotals : true}\t\t\t},\t\t\tgroup : {\t\t\t\tRegion : {}\t\t\t},\t\t\tgroupLevels : ['Country']\t\t}\t}}\" threshold=\"0\" visibleRowCount=\"4\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount} }\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Country),aggregate(SalesAmount))" + "&$count=true&$skip=0&$top=4", {
        "@odata.count": "1",
        value: [
            { Country: "US", SalesAmount: "100" }
        ]
    }).expectChange("groupLevelCount", [undefined]).expectChange("isExpanded", [false]).expectChange("isTotal", [true]).expectChange("level", [1]).expectChange("country", ["US"]).expectChange("region", [""]).expectChange("salesAmount", ["100"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oRowsBinding = oTable.getBinding("rows");
        assert.strictEqual(oRowsBinding.getLength(), 1);
        oUSContext = oRowsBinding.getCurrentContexts()[0];
        that.expectChange("isExpanded", [true]).expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region),aggregate(SalesAmount))&$count=true&$skip=0&$top=4", {
            "@odata.count": "26",
            value: [
                { Region: "Z", SalesAmount: "10" },
                { Region: "Y", SalesAmount: "20" },
                { Region: "X", SalesAmount: "30" },
                { Region: "W", SalesAmount: "40" }
            ]
        }).expectChange("groupLevelCount", [26, undefined, undefined, undefined]).expectChange("isExpanded", [, undefined, undefined, undefined]).expectChange("isTotal", [, false, false, false]).expectChange("level", [, 2, 2, 2]).expectChange("country", [, "US", "US", "US"]).expectChange("region", [, "Z", "Y", "X"]).expectChange("salesAmount", [, "10", "20", "30"]);
        oUSContext.expand();
        return that.waitForChanges(assert, "expand 'US'");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 1 + 26);
        that.expectResets(oTable, 4, 3, 3).expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region),aggregate(SalesAmount))&$skip=4&$top=3", function () {
            oUSContext.collapse();
            return resolveLater({
                value: [
                    { Region: "V", SalesAmount: "50" },
                    { Region: "U", SalesAmount: "60" },
                    { Region: "T", SalesAmount: "70" }
                ]
            });
        }).expectCanceledError("Failed to get contexts for /aggregation/BusinessPartners" + " with start index 4 and length 4", "Collapse before read has finished").expectChange("isExpanded", [false]).expectChange("isTotal", [true]).expectChange("level", [1]).expectChange("country", ["US"]).expectChange("region", [""]).expectChange("salesAmount", ["100"]);
        oTable.setFirstVisibleRow(4);
        return that.waitForChanges(assert, "collapse 'US' while paging");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 1);
        that.expectChange("groupLevelCount", [26]).expectChange("isExpanded", [true]).expectChange("isTotal", [, false, false, false]).expectChange("level", [, 2, 2, 2]).expectChange("country", [, "US", "US", "US"]).expectChange("region", [, "Z", "Y", "X"]).expectChange("salesAmount", [, "10", "20", "30"]);
        oUSContext.expand();
        return that.waitForChanges(assert, "expand 'US' again");
    }).then(function () {
        assert.strictEqual(oRowsBinding.getLength(), 1 + 26);
        that.expectChange("groupLevelCount", [, , , , undefined]).expectChange("isExpanded", [, , , , undefined]).expectChange("isTotal", [, , , , false]).expectChange("level", [, , , , 2]).expectChange("region", [, , , , "W", "V", "U", "T"]).expectChange("salesAmount", [, , , , "40", "50", "60", "70"]);
        oTable.setFirstVisibleRow(4);
        return that.waitForChanges(assert, "just paging");
    }).then(function () {
        assert.deepEqual(oRowsBinding.getContexts(0, 8).map(getPath), [
            "/BusinessPartners(Country='US')",
            "/BusinessPartners(Country='US',Region='Z')",
            "/BusinessPartners(Country='US',Region='Y')",
            "/BusinessPartners(Country='US',Region='X')",
            "/BusinessPartners(Country='US',Region='W')",
            "/BusinessPartners(Country='US',Region='V')",
            "/BusinessPartners(Country='US',Region='U')",
            "/BusinessPartners(Country='US',Region='T')"
        ]);
        assert.strictEqual(oRowsBinding.getContexts(0, 1)[0], oUSContext);
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    [false, true].forEach(function (bCount) {
        var sTitle = "Data Aggregation: $$aggregation grandTotal w/o groupLevels; $count : " + bCount + "; autoExpandSelect : " + bAutoExpandSelect;
        QUnit.test(sTitle, function (assert) {
            var oListBinding, oModel = createAggregationModel({ autoExpandSelect: bAutoExpandSelect }), aResponse = [
                { SalesNumber: 351, "SalesNumber@odata.type": "#Int32" },
                { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
                { Country: "b", Region: "Y", SalesNumber: 2 },
                { Country: "c", Region: "X", SalesNumber: 3 },
                { Country: "d", Region: "W", SalesNumber: 4 },
                { Country: "e", Region: "V", SalesNumber: 5 }
            ], oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table fixedRowCount=\"1\" firstVisibleRow=\"1\" id=\"table\" rows=\"{\t\t\tpath : '/BusinessPartners',\t\t\tparameters : {\t\t\t\t$$aggregation : {\t\t\t\t\taggregate : {\t\t\t\t\t\tSalesNumber : {grandTotal : true}\t\t\t\t\t},\t\t\t\t\tgroup : {\t\t\t\t\t\tCountry : {},\t\t\t\t\t\tRegion : {}\t\t\t\t\t}\t\t\t\t},\t\t\t\t$count : " + bCount + ",\t\t\t\t$orderby : 'Region desc'\t\t\t},\t\t\tfilters : {path : 'AmountPerSale', operator : 'GT', value1 : 99}}\"\t\tthreshold=\"0\" visibleRowCount=\"5\">\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
            this.expectRequest("BusinessPartners?$apply=filter(AmountPerSale gt 99)" + "/concat(aggregate(SalesNumber)" + ",groupby((Country,Region),aggregate(SalesNumber))/orderby(Region desc)" + "/concat(aggregate($count as UI5__count),skip(1)/top(4)))", {
                value: aResponse
            }).expectChange("count").expectChange("country", ["", , "b", "c", "d", "e"]).expectChange("region", ["", , "Y", "X", "W", "V"]).expectChange("salesNumber", ["351", , "2", "3", "4", "5"]);
            return this.createView(assert, sView, oModel).then(function () {
                oTable = that.oView.byId("table");
                oListBinding = oTable.getBinding("rows");
                assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
                assert.strictEqual(oListBinding.getLength(), 27, "length includes grand total row");
                that.expectChange("count", "26");
                that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
                return that.waitForChanges(assert);
            }).then(function () {
                assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
                    "/BusinessPartners(Country='b',Region='Y')",
                    "/BusinessPartners(Country='c',Region='X')",
                    "/BusinessPartners(Country='d',Region='W')",
                    "/BusinessPartners(Country='e',Region='V')"
                ]);
                that.expectRequest("BusinessPartners?$apply=filter(AmountPerSale gt 99)" + "/groupby((Country,Region),aggregate(SalesNumber))" + "/orderby(Region desc)/top(1)", {
                    value: [
                        { Country: "a", Region: "Z", SalesNumber: 1 }
                    ]
                }).expectChange("country", null, null).expectChange("region", null, null).expectChange("salesNumber", null, null).expectChange("country", [, "a", "b", "c", "d"]).expectChange("region", [, "Z", "Y", "X", "W"]).expectChange("salesNumber", [, "1", "2", "3", "4"]);
                oTable.setFirstVisibleRow(0);
                return that.waitForChanges(assert);
            }).then(function () {
                assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
                    "/BusinessPartners()",
                    "/BusinessPartners(Country='a',Region='Z')",
                    "/BusinessPartners(Country='b',Region='Y')",
                    "/BusinessPartners(Country='c',Region='X')",
                    "/BusinessPartners(Country='d',Region='W')"
                ]);
            });
        });
    });
});
[false, true].forEach(function (bCount) {
    var sTitle = "Data Aggregation: $$aggregation grandTotal w/o groupLevels; $count : " + bCount + "; grandTotal row not fixed";
    QUnit.test(sTitle, function (assert) {
        var oListBinding, oModel = createAggregationModel({ autoExpandSelect: true }), oTable, aValues = [
            { SalesNumber: 351, "SalesNumber@odata.type": "#Int32" },
            { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
            { Country: "a", Region: "Z", SalesNumber: 1 },
            { Country: "b", Region: "Y", SalesNumber: 2 },
            { Country: "c", Region: "X", SalesNumber: 3 },
            { Country: "d", Region: "W", SalesNumber: 4 },
            { Country: "e", Region: "V", SalesNumber: 5 }
        ], sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table fixedRowCount=\"0\" firstVisibleRow=\"1\" id=\"table\" rows=\"{\t\t\tpath : '/BusinessPartners',\t\t\tparameters : {\t\t\t\t$$aggregation : {\t\t\t\t\taggregate : {\t\t\t\t\t\tSalesNumber : {grandTotal : true}\t\t\t\t\t},\t\t\t\t\tgroup : {\t\t\t\t\t\tCountry : {},\t\t\t\t\t\tRegion : {}\t\t\t\t\t}\t\t\t\t},\t\t\t\t$count : " + bCount + ",\t\t\t\t$orderby : 'Region desc'\t\t\t},\t\t\tfilters : {path : 'AmountPerSale', operator : 'GT', value1 : 99}}\"\t\tthreshold=\"0\" visibleRowCount=\"5\">\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
        this.expectRequest("BusinessPartners?$apply=filter(AmountPerSale gt 99)" + "/concat(aggregate(SalesNumber)" + ",groupby((Country,Region),aggregate(SalesNumber))" + "/orderby(Region desc)/concat(aggregate($count as UI5__count),top(5)))", { value: aValues }).expectChange("count").expectChange("country", [, "a", "b", "c", "d", "e"]).expectChange("region", [, "Z", "Y", "X", "W", "V"]).expectChange("salesNumber", [, "1", "2", "3", "4", "5"]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            oListBinding = oTable.getBinding("rows");
            assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
            assert.strictEqual(oListBinding.getLength(), 27, "length includes grand total row");
            assert.strictEqual(oListBinding.getCount(), 26, "count of leaves");
            that.expectChange("count", "26");
            that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
            return that.waitForChanges(assert);
        }).then(function () {
            assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
                "/BusinessPartners(Country='a',Region='Z')",
                "/BusinessPartners(Country='b',Region='Y')",
                "/BusinessPartners(Country='c',Region='X')",
                "/BusinessPartners(Country='d',Region='W')",
                "/BusinessPartners(Country='e',Region='V')"
            ]);
            that.expectChange("country", ["", "a", "b", "c", "d"]).expectChange("region", ["", "Z", "Y", "X", "W"]).expectChange("salesNumber", ["351", "1", "2", "3", "4"]);
            oTable.setFirstVisibleRow(0);
            return that.waitForChanges(assert);
        }).then(function () {
            assert.deepEqual(oListBinding.getCurrentContexts().map(getPath), [
                "/BusinessPartners()",
                "/BusinessPartners(Country='a',Region='Z')",
                "/BusinessPartners(Country='b',Region='Y')",
                "/BusinessPartners(Country='c',Region='X')",
                "/BusinessPartners(Country='d',Region='W')"
            ]);
        });
    });
});
QUnit.test("Data Aggregation: $$aggregation grandTotal w/o groupLevels using with/as/unit", function (assert) {
    var oModel = createAggregationModel({ autoExpandSelect: true }), sView = "<t:Table id=\"table\" rows=\"{\t\t\tpath : '/BusinessPartners',\t\t\tparameters : {\t\t\t\t$$aggregation : {\t\t\t\t\taggregate : {\t\t\t\t\t\tSalesAmountSum : {\t\t\t\t\t\t\tgrandTotal : true,\t\t\t\t\t\t\tname : 'SalesAmount',\t\t\t\t\t\t\tunit : 'Currency',\t\t\t\t\t\t\twith : 'sum'\t\t\t\t\t\t},\t\t\t\t\t\tSalesNumber : {}\t\t\t\t\t},\t\t\t\t\tgroup : {\t\t\t\t\t\tRegion : {}\t\t\t\t\t}\t\t\t\t},\t\t\t\t$orderby : 'SalesAmountSum asc'\t\t\t},\t\t\tfilters : {path : 'AmountPerSale', operator : 'GT', value1 : 99}}\"\t\tthreshold=\"0\" visibleRowCount=\"5\">\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/>\t<Text id=\"salesAmountSum\" text=\"{= %{SalesAmountSum} }\"/>\t<Text id=\"currency\" text=\"{Currency}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=filter(AmountPerSale gt 99)/concat(" + "aggregate(SalesAmount with sum as SalesAmountSum,Currency),groupby((Region)" + ",aggregate(SalesAmount with sum as SalesAmountSum,Currency,SalesNumber))" + "/orderby(SalesAmountSum asc)/concat(aggregate($count as UI5__count),top(4)))", {
        value: [{
                Currency: "EUR",
                SalesAmountSum: "351",
                "SalesAmountSum@odata.type": "#Decimal"
            }, {
                UI5__count: "26",
                "UI5__count@odata.type": "#Decimal"
            }, {
                Currency: "EUR",
                Region: "Z",
                SalesNumber: 1,
                SalesAmountSum: "1"
            }, {
                Currency: "EUR",
                Region: "Y",
                SalesNumber: 2,
                SalesAmountSum: "2"
            }, {
                Currency: "EUR",
                Region: "X",
                SalesNumber: 3,
                SalesAmountSum: "3"
            }, {
                Currency: "EUR",
                Region: "W",
                SalesNumber: 4,
                SalesAmountSum: "4"
            }]
    }).expectChange("region", ["", "Z", "Y", "X", "W"]).expectChange("salesNumber", [null, "1", "2", "3", "4"]).expectChange("salesAmountSum", ["351", "1", "2", "3", "4"]).expectChange("currency", ["EUR", "EUR", "EUR", "EUR", "EUR"]);
    return this.createView(assert, sView, oModel).then(function () {
        assert.strictEqual(that.oView.byId("table").getBinding("rows").getDownloadUrl(), "/aggregation/BusinessPartners?$apply=filter(AmountPerSale%20gt%2099)" + "/groupby((Region)" + ",aggregate(SalesAmount%20with%20sum%20as%20SalesAmountSum,Currency,SalesNumber))" + "/orderby(SalesAmountSum%20asc)", "CPOUI5ODATAV4-609");
    });
});
QUnit.test("API calls before binding is resolved", function (assert) {
    var that = this;
    return this.createView(assert, "", createAggregationModel()).then(function () {
        var oListBinding = that.oModel.bindList("BusinessPartners");
        oListBinding.setAggregation({
            aggregate: {
                SalesNumber: { grandTotal: true }
            },
            group: {
                Region: {}
            }
        });
        oListBinding.filter([
            new Filter("Name", FilterOperator.EQ, "Foo"),
            new Filter("Region", FilterOperator.NE, "Bar")
        ]);
        oListBinding.sort(new Sorter("SalesNumber"));
        oListBinding.changeParameters({ custom: "foo" });
        oListBinding.setContext(that.oModel.createBindingContext("/"));
        that.expectRequest("BusinessPartners?custom=foo" + "&$apply=filter(Name eq 'Foo' and Region ne 'Bar')" + "/concat(aggregate(SalesNumber),groupby((Region),aggregate(SalesNumber))" + "/orderby(SalesNumber)/concat(aggregate($count as UI5__count),top(99)))", {
            value: [
                { SalesNumber: 0 },
                { UI5__count: "26", "UI5__count@odata.type": "#Decimal" }
            ]
        });
        return Promise.all([
            oListBinding.requestContexts(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("JIRA: CPOUI5ODATAV4-119 with _MinMaxHelper", function (assert) {
    var oModel = createAggregationModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oListBinding = that.oModel.bindList("/BusinessPartners", null, null, [
            new Filter("Name", FilterOperator.EQ, "Foo"),
            new Filter("SalesNumber", FilterOperator.GT, 0)
        ], {
            $$aggregation: {
                aggregate: {
                    SalesNumber: { min: true }
                },
                group: {
                    Region: {}
                }
            }
        });
        that.expectRequest("BusinessPartners?$apply=filter(Name eq 'Foo')" + "/groupby((Region),aggregate(SalesNumber))/filter(SalesNumber gt 0)" + "/concat(aggregate(SalesNumber with min as UI5min__SalesNumber),top(100))", {
            value: [
                { "UI5min__SalesNumber": 0, "UI5min__SalesNumber@odata.type": "#Int32" }
            ]
        });
        return Promise.all([
            oListBinding.requestContexts(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("JIRA: CPOUI5ODATAV4-119 with _AggregationCache", function (assert) {
    var oModel = createAggregationModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oListBinding = that.oModel.bindList("/BusinessPartners", null, null, [
            new Filter("Name", FilterOperator.EQ, "Foo")
        ], {
            $$aggregation: {
                aggregate: {
                    SalesNumber: { grandTotal: true }
                },
                group: {
                    Region: {}
                },
                search: "covfefe"
            },
            $orderby: "Region asc,SalesNumber desc"
        });
        that.expectRequest("BusinessPartners?$apply=filter(Name eq 'Foo')/search(covfefe)" + "/concat(aggregate(SalesNumber),groupby((Region),aggregate(SalesNumber))" + "/orderby(Region asc,SalesNumber desc)" + "/concat(aggregate($count as UI5__count),top(99)))", {
            value: [
                { SalesNumber: 351, "SalesNumber@odata.type": "#Int32" },
                { UI5__count: "26", "UI5__count@odata.type": "#Decimal" }
            ]
        });
        return Promise.all([
            oListBinding.requestContexts(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("JIRA: CPOUI5ODATAV4-119 with _Cache.CollectionCache", function (assert) {
    var oModel = createAggregationModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oListBinding = that.oModel.bindList("/BusinessPartners", null, null, [
            new Filter("Name", FilterOperator.EQ, "Foo"),
            new Filter("SalesNumber", FilterOperator.GT, 0)
        ], {
            $$aggregation: {
                aggregate: {
                    SalesNumber: {}
                },
                group: {
                    Region: {}
                },
                search: "tee"
            },
            $count: true,
            $search: "covfefe"
        });
        that.expectRequest("BusinessPartners?$count=true&$search=covfefe&$apply" + "=filter(Name eq 'Foo')/search(tee)/groupby((Region),aggregate(SalesNumber))" + "&$filter=SalesNumber gt 0&$skip=0&$top=100", {
            "@odata.count": 0,
            value: []
        });
        return Promise.all([
            oListBinding.requestContexts(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2170032897 with UI5 filters", function (assert) {
    var oListBinding, oModel = createAggregationModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        oListBinding = that.oModel.bindList("/BusinessPartners", null, [
            new Sorter("Region")
        ], [
            new Filter("Name", FilterOperator.EQ, "Foo"),
            new Filter("SalesAmount", FilterOperator.GT, 0)
        ], {
            $$aggregation: {
                aggregate: {
                    SalesAmount: { grandTotal: true, unit: "Currency" }
                },
                group: {
                    Region: {}
                },
                "grandTotal like 1.84": true,
                search: "covfefe"
            }
        });
        that.expectRequest("BusinessPartners?$apply=filter(Name eq 'Foo')/search(covfefe)" + "/groupby((Region),aggregate(SalesAmount,Currency))" + "/filter(SalesAmount gt 0)/orderby(Region)" + "/concat(aggregate(SalesAmount,Currency),aggregate($count as UI5__count)" + ",top(2))", {
            value: [
                { Currency: "DEM", SalesAmount: "0", "SalesAmount@odata.type": "#Decimal" },
                { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
                { Region: "A", SalesAmount: "100" },
                { Region: "B", SalesAmount: "200" }
            ]
        });
        return Promise.all([
            oListBinding.requestContexts(0, 3),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        var aContexts = aResults[0];
        assert.strictEqual(oListBinding.getHeaderContext().getProperty("$count"), 26);
        assert.deepEqual(aContexts.map(function (oContext) {
            return oContext.getObject();
        }), [{
                "@$ui5.node.isExpanded": true,
                "@$ui5.node.isTotal": true,
                "@$ui5.node.level": 0,
                Currency: "DEM",
                Region: null,
                SalesAmount: "0",
                "SalesAmount@odata.type": "#Decimal"
            }, {
                "@$ui5.node.isTotal": false,
                "@$ui5.node.level": 1,
                Currency: null,
                Region: "A",
                SalesAmount: "100"
            }, {
                "@$ui5.node.isTotal": false,
                "@$ui5.node.level": 1,
                Currency: null,
                Region: "B",
                SalesAmount: "200"
            }]);
        assert.deepEqual(aContexts.map(getPath), [
            "/BusinessPartners()",
            "/BusinessPartners(Region='A')",
            "/BusinessPartners(Region='B')"
        ]);
    });
});
QUnit.test("BCP: 2170032897 with $filter", function (assert) {
    var oListBinding, oModel = createAggregationModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        oListBinding = that.oModel.bindList("/BusinessPartners", null, [], [
            new Filter("Name", FilterOperator.EQ, "Foo")
        ], {
            $$aggregation: {
                aggregate: {
                    SalesAmountSum: {
                        grandTotal: true,
                        name: "SalesAmount",
                        unit: "Currency",
                        "with": "sum"
                    }
                },
                group: {
                    Region: {}
                },
                "grandTotal like 1.84": true
            },
            $count: true,
            $filter: "SalesAmountSum gt 0",
            $orderby: "Region"
        });
        that.expectRequest("BusinessPartners?$apply=filter(Name eq 'Foo')/groupby((Region)" + ",aggregate(SalesAmount with sum as SalesAmountSum,Currency))" + "/filter(SalesAmountSum gt 0)/orderby(Region)/concat(" + "aggregate(SalesAmountSum with sum as UI5grand__SalesAmountSum,Currency)" + ",aggregate($count as UI5__count),top(2))", {
            value: [{
                    Currency: "DEM",
                    UI5grand__SalesAmountSum: "0",
                    "UI5grand__SalesAmountSum@odata.type": "#Decimal"
                }, {
                    UI5__count: "26",
                    "UI5__count@odata.type": "#Decimal"
                }, {
                    Region: "A",
                    SalesAmountSum: "100"
                }, {
                    Region: "B",
                    SalesAmountSum: "200"
                }]
        });
        return Promise.all([
            oListBinding.requestContexts(0, 3),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        var aContexts = aResults[0];
        assert.strictEqual(oListBinding.getHeaderContext().getProperty("$count"), 26);
        assert.deepEqual(aContexts.map(function (oContext) {
            return oContext.getObject();
        }), [{
                "@$ui5.node.isExpanded": true,
                "@$ui5.node.isTotal": true,
                "@$ui5.node.level": 0,
                Currency: "DEM",
                Region: null,
                SalesAmountSum: "0",
                "SalesAmountSum@odata.type": "#Decimal"
            }, {
                "@$ui5.node.isTotal": false,
                "@$ui5.node.level": 1,
                Currency: null,
                Region: "A",
                SalesAmountSum: "100"
            }, {
                "@$ui5.node.isTotal": false,
                "@$ui5.node.level": 1,
                Currency: null,
                Region: "B",
                SalesAmountSum: "200"
            }]);
        assert.deepEqual(aContexts.map(getPath), [
            "/BusinessPartners()",
            "/BusinessPartners(Region='A')",
            "/BusinessPartners(Region='B')"
        ]);
    });
});
[false, true].forEach(function (bCount) {
    var sTitle = "Data Aggregation: $$aggregation, aggregate but no group; $count : " + bCount;
    QUnit.test(sTitle, function (assert) {
        var oListBinding, oMinMaxElement = {
            UI5min__AGE: 42,
            UI5max__AGE: 77
        }, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table id=\"table\" rows=\"{path : '/SalesOrderList',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tGrossAmount : {\t\t\t\t\t\tmin : true,\t\t\t\t\t\tmax : true\t\t\t\t\t}\t\t\t\t}\t\t\t},\t\t\t$count : " + bCount + "\t\t}}\" threshold=\"0\" visibleRowCount=\"1\">\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/></t:Table>", that = this;
        if (bCount) {
            oMinMaxElement["UI5__count"] = "26";
            oMinMaxElement["UI5__count@odata.type"] = "#Decimal";
        }
        this.expectRequest("SalesOrderList?$apply=aggregate(GrossAmount)" + "/concat(aggregate(GrossAmount with min as UI5min__GrossAmount," + "GrossAmount with max as UI5max__GrossAmount" + (bCount ? ",$count as UI5__count" : "") + "),top(1))", {
            value: [oMinMaxElement, { GrossAmount: "1" }]
        }).expectChange("count").expectChange("grossAmount", ["1"]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("table");
            oListBinding = oTable.getBinding("rows");
            if (bCount) {
                assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
                assert.strictEqual(oListBinding.getLength(), 26);
                that.expectChange("count", "26");
                that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
            }
            return that.waitForChanges(assert);
        }).then(function () {
            var oResponse = {
                value: [{ GrossAmount: "2" }]
            };
            if (bCount) {
                oResponse["@odata.count"] = "13";
                that.expectChange("count", "13");
            }
            that.expectRequest("SalesOrderList?" + (bCount ? "$count=true&" : "") + "$apply=aggregate(GrossAmount)&$skip=0&$top=1", oResponse).expectChange("grossAmount", ["2"]);
            oTable.getBinding("rows").setAggregation({
                aggregate: { GrossAmount: {} }
            });
            return that.waitForChanges(assert);
        }).then(function () {
            if (bCount) {
                assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
                assert.strictEqual(oListBinding.getLength(), 13);
            }
        });
    });
});
QUnit.test("Data Aggregation: search before aggregation", function (assert) {
    var oListBinding, oModel = createAggregationModel(), oTable, sView = "<t:Table id=\"table\" rows=\"{path : '/BusinessPartners',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {\t\t\t\t\tSalesNumber : {grandTotal : true, subtotals : true}\t\t\t\t},\t\t\t\tgroup : {\t\t\t\t\tRegion : {}\t\t\t\t},\t\t\t\tgroupLevels : ['Country'],\t\t\t\tsearch : 'covfefe'\t\t\t},\t\t\t$count : true,\t\t\t$orderby : 'Country asc,Region,SalesNumber desc'\t\t},\t\tfilters : {path : 'Name', operator : 'EQ', value1 : 'Foo'}\t}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"groupLevelCount\" text=\"{= %{@$ui5.node.groupLevelCount} }\"/>\t<Text id=\"isExpanded\" text=\"{= %{@$ui5.node.isExpanded} }\"/>\t<Text id=\"isTotal\" text=\"{= %{@$ui5.node.isTotal} }\"/>\t<Text id=\"level\" text=\"{= %{@$ui5.node.level} }\"/>\t<Text id=\"country\" text=\"{Country}\"/>\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesNumber\" text=\"{SalesNumber}\"/></t:Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=filter(Name eq 'Foo')/search(covfefe)" + "/concat(groupby((Country,Region))/aggregate($count as UI5__leaves)" + ",aggregate(SalesNumber),groupby((Country),aggregate(SalesNumber))" + "/orderby(Country asc,SalesNumber desc)" + "/concat(aggregate($count as UI5__count),top(2)))", {
        value: [
            { UI5__leaves: "42", "UI5__leaves@odata.type": "#Decimal" },
            { SalesNumber: 351, "SalesNumber@odata.type": "#Int32" },
            { UI5__count: "26", "UI5__count@odata.type": "#Decimal" },
            { Country: "A", SalesNumber: 101 },
            { Country: "B", SalesNumber: 102 }
        ]
    }).expectChange("groupLevelCount", [undefined, undefined, undefined]).expectChange("isExpanded", [true, false, false]).expectChange("isTotal", [true, true, true]).expectChange("level", [0, 1, 1]).expectChange("country", ["", "A", "B"]).expectChange("region", ["", "", ""]).expectChange("salesNumber", ["351", "101", "102"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oListBinding = oTable.getBinding("rows");
        assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
        assert.strictEqual(oListBinding.getLength(), 1 + 26, "flat list as currently expanded");
        assert.strictEqual(oListBinding.getCount(), 42, "count of leaves");
        that.expectChange("isExpanded", [, true]).expectRequest("BusinessPartners?$apply=filter(Country eq 'A' and (Name eq 'Foo'))" + "/search(covfefe)/groupby((Region),aggregate(SalesNumber))" + "/orderby(Region,SalesNumber desc)&$count=true&$skip=0&$top=3", {
            "@odata.count": "12",
            value: [
                { Region: "a", SalesNumber: 1 },
                { Region: "b", SalesNumber: 2 },
                { Region: "c", SalesNumber: 3 }
            ]
        }).expectChange("groupLevelCount", [, 12]).expectChange("isExpanded", [, , undefined]).expectChange("isTotal", [, , false]).expectChange("level", [, , 2]).expectChange("country", [, , "A"]).expectChange("region", [, , "a"]).expectChange("salesNumber", [, , "1"]);
        oTable.getRows()[1].getBindingContext().expand();
        return that.waitForChanges(assert, "expand");
    }).then(function () {
        assert.strictEqual(oListBinding.isLengthFinal(), true, "length is final");
        assert.strictEqual(oListBinding.getLength(), 1 + 26 + 12, "flat list as currently expanded");
        assert.strictEqual(oListBinding.getCount(), 42, "count of leaves");
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'A' and (Name eq 'Foo'))" + "/search(covfefe)/groupby((Region),aggregate(SalesNumber))" + "/orderby(Region,SalesNumber desc)&$skip=5&$top=3", {
            value: [
                { Region: "f", SalesNumber: 6 },
                { Region: "g", SalesNumber: 7 },
                { Region: "h", SalesNumber: 8 }
            ]
        }).expectResets(oTable, 3, 1, 2).expectChange("isExpanded", [, , , , , , , , ,]).expectChange("isTotal", [, , , , , , , false, false, false]).expectChange("level", [, , , , , , , 2, 2, 2]).expectChange("country", [, , , , , , , "A", "A", "A"]).expectChange("region", [, , , , , , , "f", "g", "h"]).expectChange("salesNumber", [, , , , , , , "6", "7", "8"]);
        oTable.setFirstVisibleRow(7);
        return that.waitForChanges(assert, "paging");
    });
});
QUnit.test("BCP: 2080047558", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel(), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$skip=0&$top=100", {
        value: [{ GrossAmount: "1" }]
    }).expectChange("grossAmount", ["1"]);
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("SalesOrderList?$apply=aggregate(GrossAmount)&$skip=0&$top=100", {
            value: [{ GrossAmount: "2" }]
        }).expectChange("grossAmount", ["2"]);
        oListBinding.setAggregation({
            aggregate: { GrossAmount: {} }
        });
        assert.throws(function () {
            oListBinding.changeParameters({
                $apply: "A.P.P.L.E."
            });
        }, new Error("Cannot combine $$aggregation and $apply"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$skip=0&$top=100", {
            value: [{ GrossAmount: "3" }]
        }).expectChange("grossAmount", ["3"]);
        assert.throws(function () {
            oListBinding.setAggregation(null);
        });
        oListBinding.setAggregation({});
        assert.throws(function () {
            oListBinding.changeParameters({
                $apply: "A.P.P.L.E."
            });
        }, new Error("Cannot combine $$aggregation and $apply"));
        return that.waitForChanges(assert);
    }).then(function () {
        oListBinding.setAggregation();
        that.expectRequest("SalesOrderList" + "?$apply=groupby((LifecycleStatus),aggregate(GrossAmount))" + "&$skip=0&$top=100", {
            value: [{ GrossAmount: "4" }]
        }).expectChange("grossAmount", ["4"]);
        oListBinding.changeParameters({
            $apply: "groupby((LifecycleStatus),aggregate(GrossAmount))"
        });
        return that.waitForChanges(assert);
    }).then(function () {
        oListBinding.setAggregation();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$skip=0&$top=100", {
            value: [{ GrossAmount: "5" }]
        }).expectChange("grossAmount", ["5"]);
        oListBinding.changeParameters({ $apply: undefined });
    }).then(function () {
        oListBinding.setAggregation({});
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2070044134", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel(), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/>\t<Text id=\"grossAmount\" text=\"{= %{GrossAmount}}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$skip=0&$top=100", {
        value: [{ GrossAmount: "1", LifecycleStatus: "Z" }]
    }).expectChange("grossAmount", ["1"]).expectChange("lifecycleStatus", ["Z"]);
    return this.createView(assert, sView, oModel).then(function () {
        oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("SalesOrderList?$apply=groupby((LifecycleStatus))&$count=true" + "&$skip=0&$top=100", {
            "@odata.count": 1,
            value: [{ LifecycleStatus: "Y" }]
        }).expectChange("grossAmount", [null]).expectChange("lifecycleStatus", ["Y"]);
        oListBinding.setAggregation({
            aggregate: { GrossAmount: {} },
            groupLevels: ["LifecycleStatus"]
        });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList" + "?$apply=groupby((LifecycleStatus),aggregate(GrossAmount))" + "&$count=true&$skip=0&$top=100", {
            "@odata.count": "1",
            value: [{ GrossAmount: "3", LifecycleStatus: "X" }]
        }).expectChange("grossAmount", ["3"]).expectChange("lifecycleStatus", ["X"]);
        oListBinding.setAggregation({
            aggregate: { GrossAmount: { subtotals: true } },
            groupLevels: ["LifecycleStatus"]
        });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$skip=0&$top=100", {
            value: [{ GrossAmount: "4", LifecycleStatus: "W" }]
        }).expectChange("grossAmount", ["4"]).expectChange("lifecycleStatus", ["W"]);
        oListBinding.setAggregation();
        return that.waitForChanges(assert);
    });
});
QUnit.test("requestSideEffects and $$aggregation", function (assert) {
    var oBinding, oHeaderContext, oModel = createAggregationModel(), sView = "<Table id=\"table\" items=\"{path : '/BusinessPartners',\t\tparameters : {\t\t\t$$aggregation : {\t\t\t\taggregate : {SalesAmount : {}},\t\t\t\tgroupLevels : ['Region'],\t\t\t\tsubtotalsAtBottomOnly : true\t\t\t}\t\t}}\">\t<Text id=\"region\" text=\"{Region}\"/>\t<Text id=\"salesAmount\" text=\"{= %{SalesAmount}}\"/></Table>", that = this;
    this.expectRequest("BusinessPartners?$apply=groupby((Region))&$count=true&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] }).expectChange("region", ["A"]).expectChange("salesAmount", [null]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        oHeaderContext = oBinding.getHeaderContext();
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $PropertyPath: "AccountResponsible" }]),
            that.waitForChanges(assert, "AccountResponsible (unused)")
        ]);
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=groupby((Region))&$count=true" + "&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] });
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $NavigationPropertyPath: "" }]),
            that.waitForChanges(assert, "entity")
        ]);
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=groupby((Region))&$count=true" + "&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] });
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $PropertyPath: "SalesAmount" }]),
            that.waitForChanges(assert, "SalesAmount (aggregate)")
        ]);
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=groupby((Region))&$count=true" + "&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] });
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $PropertyPath: "Region" }]),
            that.waitForChanges(assert, "Region (group level)")
        ]);
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region))&$count=true&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] });
        oBinding.filter(new Filter("Country", FilterOperator.EQ, "US"));
        return that.waitForChanges(assert, "filter");
    }).then(function () {
        that.expectRequest("BusinessPartners?$apply=filter(Country eq 'US')" + "/groupby((Region))&$count=true&$skip=0&$top=100", { "@odata.count": "1", value: [{ Region: "A" }] });
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $PropertyPath: "Country" }]),
            that.waitForChanges(assert, "Country (filter)")
        ]);
    }).then(function () {
        return that.oView.byId("table").getItems()[0].getBindingContext().requestSideEffects([{ $PropertyPath: "Country" }]).then(mustFail(assert), function (oError) {
            assert.strictEqual(oError.message, "Must not request side effects for a context" + " of a binding with $$aggregation");
        });
    });
});
QUnit.test("@$ui5.* is write-protected", function (assert) {
    var oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{/MANAGERS('1')}\" id=\"form\">\t<Input id=\"foo\" value=\"{= %{@$ui5.foo} }\"/>\t<Text id=\"id\" text=\"{ID}\"/></FlexBox>", that = this;
    this.expectRequest("MANAGERS('1')", {
        "@$ui5.foo": 42,
        ID: "1"
    }).expectChange("foo", 42).expectChange("id", "1");
    return this.createView(assert, sView, oModel).then(function () {
        var oMatcher = sinon.match("/MANAGERS('1')/@$ui5.foo: " + "Read-only path must not be updated"), oPropertyBinding = that.oView.byId("foo").getBinding("value");
        assert.strictEqual(oPropertyBinding.getValue(), 42);
        that.oLogMock.expects("error").withExactArgs("Read-only path must not be updated", oMatcher, "sap.ui.model.odata.v4.ODataMetaModel");
        that.oLogMock.expects("error").withExactArgs("Failed to update path /MANAGERS('1')/@$ui5.foo", oMatcher, "sap.ui.model.odata.v4.ODataPropertyBinding");
        that.expectMessages([{
                message: "/MANAGERS('1')/@$ui5.foo: Read-only path must not be updated",
                persistent: true,
                technical: true,
                technicalDetails: {},
                type: "Error"
            }]);
        oPropertyBinding.setValue(0);
        return that.waitForChanges(assert);
    }).then(function () {
        var oContext = that.oView.byId("form").getBindingContext();
        oContext.getObject()["@$ui5.foo"] = 1;
        assert.strictEqual(oContext.getProperty("@$ui5.foo"), 42);
    });
});
QUnit.test("@$ui5.* is write-protected for ODLB#create", function (assert) {
    var oContext, oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"salary\" text=\"{SALARY/MONTHLY_BASIC_SALARY_AMOUNT}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,Name,SALARY/MONTHLY_BASIC_SALARY_AMOUNT" + "&$skip=0&$top=100", {
        value: [{
                ID: "2",
                Name: "John Doe",
                SALARY: {
                    MONTHLY_BASIC_SALARY_AMOUNT: "888"
                }
            }]
    }).expectChange("name", ["John Doe"]).expectChange("salary", ["888"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding = that.oView.byId("table").getBinding("items"), oInitialData = {
            Name: "New Employee",
            "@$ui5.foo": "foo0",
            SALARY: {
                MONTHLY_BASIC_SALARY_AMOUNT: "999",
                "@$ui5.foo": "foo1"
            },
            Titles: [
                { "short": "Dr", "long": "Doctor" },
                { "short": "Prof", "long": "Professor", "@$ui5.foo": "foo2" }
            ]
        };
        that.expectChange("name", ["New Employee", "John Doe"]);
        that.expectChange("salary", ["999", "888"]);
        oContext = oListBinding.create(oInitialData, true);
        assert.strictEqual(oContext.getProperty("@$ui5.foo"), undefined);
        assert.strictEqual(oContext.getProperty("SALARY/@$ui5.foo"), undefined);
        assert.strictEqual(oContext.getObject("Titles")[0]["@$ui5.foo"], undefined);
        assert.strictEqual(oContext.getObject("Titles")[1]["@$ui5.foo"], undefined);
        return that.waitForChanges(assert, "no private annotation in transient entity");
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "EMPLOYEES",
            payload: {
                Name: "New Employee",
                SALARY: {
                    MONTHLY_BASIC_SALARY_AMOUNT: "999"
                },
                Titles: [
                    { "short": "Dr", "long": "Doctor" },
                    { "short": "Prof", "long": "Professor" }
                ]
            }
        }, {
            ID: "42",
            Name: "New Employee",
            SALARY: {
                MONTHLY_BASIC_SALARY_AMOUNT: "997"
            }
        }).expectChange("salary", ["997"]);
        return Promise.all([
            that.oModel.submitBatch("update"),
            oContext.created(),
            that.waitForChanges(assert, "no private annotation in request")
        ]);
    });
});
QUnit.test("@$ui5._ is read-protected", function (assert) {
    var oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{path : '/MANAGERS(\\'1\\')', \t\tparameters : {$expand : {Manager_to_Team : true}}}\" id=\"form\">\t<Text id=\"predicate\" text=\"{= %{@$ui5._/predicate} }\"/>\t<Text id=\"id\" text=\"{ID}\"/>\t<FlexBox binding=\"{Manager_to_Team}\">\t\t<Text id=\"teamPredicate\" text=\"{= %{@$ui5._/predicate} }\"/>\t\t<Text id=\"teamId\" text=\"{Team_Id}\"/>\t</FlexBox></FlexBox>", that = this;
    function expectFailedToDrillDown(sPrefix) {
        if (sPrefix !== "") {
            that.oLogMock.expects("error").withExactArgs("Failed to enhance query options for " + "auto-$expand/$select as the path '/MANAGERS('1')/" + sPrefix + "@$ui5._/predicate' does not point to a property", sinon.match.string, "sap.ui.model.odata.v4.ODataParentBinding");
            that.oLogMock.expects("error").withExactArgs("Not a valid property path: " + sPrefix + "@$ui5._/predicate", undefined, "sap.ui.model.odata.v4.Context");
        }
        that.oLogMock.expects("error").withExactArgs("Failed to drill-down into " + sPrefix + "@$ui5._/predicate, invalid segment: @$ui5._", sTeaBusi + "MANAGERS('1')?$expand=Manager_to_Team", "sap.ui.model.odata.v4.lib._Cache").exactly(sPrefix !== "" ? 2 : 3);
    }
    this.expectRequest("MANAGERS('1')?$expand=Manager_to_Team", {
        ID: "1",
        Manager_to_Team: {
            Team_Id: "42"
        }
    }).expectChange("predicate", undefined).expectChange("id", "1").expectChange("teamPredicate", undefined).expectChange("teamId", "42");
    expectFailedToDrillDown("");
    expectFailedToDrillDown("Manager_to_Team/");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("form").getBindingContext(), oManager = oContext.getObject();
        assert.notOk("@$ui5._" in oManager);
        assert.notOk("@$ui5._" in oManager.Manager_to_Team);
        assert.strictEqual(oContext.getProperty("@$ui5._/predicate"), undefined);
        assert.strictEqual(oContext.getProperty("Manager_to_Team/@$ui5._/predicate"), undefined);
        return Promise.all([
            oContext.requestProperty("@$ui5._/predicate"),
            oContext.requestProperty("Manager_to_Team/@$ui5._/predicate")
        ]).then(function (aResult) {
            assert.strictEqual(aResult[0], undefined);
            assert.strictEqual(aResult[1], undefined);
            return oContext.requestObject().then(function (oParent) {
                assert.notOk("@$ui5._" in oParent);
                assert.notOk("@$ui5._" in oParent.Manager_to_Team);
            });
        });
    });
});
[
    "Flat list with aggregated data",
    "ODLB#updateAnalyticalInfo without min/max"
].forEach(function (sTitle, i) {
    QUnit.test(sTitle, function (assert) {
        var aAggregation = [{
                grouped: false,
                inResult: true,
                name: "LifecycleStatus"
            }, {
                name: "GrossAmount",
                total: false
            }], sBasicPath = "SalesOrderList?$count=true&$filter=GrossAmount lt 42" + "&$orderby=LifecycleStatus desc" + "&$apply=groupby((LifecycleStatus),aggregate(GrossAmount))", oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table firstVisibleRow=\"1\" id=\"table\" rows=\"{path : '/SalesOrderList',\t\tparameters : {\t\t\t$count : true,\t\t\t$filter : 'GrossAmount lt 42',\t\t\t$orderby : 'LifecycleStatus desc'" + (i === 0 ? ",$apply : 'groupby((LifecycleStatus),aggregate(GrossAmount))'" : "") + "\t\t}}\" threshold=\"0\" visibleRowCount=\"4\">\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/>\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/></t:Table>", that = this;
        if (i > 0) {
            this.mock(ODataListBinding.prototype).expects("getContexts").withExactArgs(1, 4, 0, undefined).callsFake(function () {
                this.updateAnalyticalInfo(aAggregation);
                ODataListBinding.prototype.getContexts.restore();
                return this.getContexts.apply(this, arguments);
            });
        }
        this.expectRequest(sBasicPath + "&$skip=1&$top=4", {
            "@odata.count": "26",
            value: [
                { GrossAmount: "2", LifecycleStatus: "Y" },
                { GrossAmount: "3", LifecycleStatus: "X" },
                { GrossAmount: "4", LifecycleStatus: "W" },
                { GrossAmount: "5", LifecycleStatus: "V" }
            ]
        }).expectChange("count").expectChange("grossAmount", [, "2.00", "3.00", "4.00", "5.00"]).expectChange("lifecycleStatus", [, "Y", "X", "W", "V"]);
        return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
            oTable = that.oView.byId("table");
            that.expectChange("count", "26");
            that.oView.byId("count").setBindingContext(oTable.getBinding("rows").getHeaderContext());
            return that.waitForChanges(assert);
        }).then(function () {
            if (i > 0) {
                oTable.getBinding("rows").updateAnalyticalInfo(aAggregation);
            }
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest(sBasicPath + "&$skip=0&$top=1", {
                "@odata.count": "26",
                value: [{
                        GrossAmount: "1",
                        LifecycleStatus: "Z"
                    }]
            });
            that.expectChange("grossAmount", null, null).expectChange("lifecycleStatus", null, null);
            that.expectChange("grossAmount", ["1.00", "2.00", "3.00", "4.00"]).expectChange("lifecycleStatus", ["Z", "Y", "X", "W"]);
            oTable.setFirstVisibleRow(0);
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("ODLB#updateAnalyticalInfo with min/max", function (assert) {
    var aAggregation = [{
            grouped: false,
            inResult: true,
            name: "Name"
        }, {
            max: true,
            min: true,
            name: "AGE",
            total: false
        }], oMeasureRangePromise, oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><t:Table firstVisibleRow=\"1\" id=\"table\" rows=\"{\t\t\tpath : '/EMPLOYEES',\t\t\tparameters : {$count : true},\t\t\tfilters : {path : 'AGE', operator : 'GE', value1 : 30},\t\t\tsorter : {path : 'AGE'}\t\t}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"text\" text=\"{Name}\"/>\t<Text id=\"age\" text=\"{AGE}\"/></t:Table>", that = this;
    this.mock(ODataListBinding.prototype).expects("getContexts").withExactArgs(1, 3, 0, undefined).callsFake(function () {
        that.expectCanceledError("Failed to create cache for binding " + sODLB + ": /EMPLOYEES", "Cache discarded as a new cache has been created");
        oMeasureRangePromise = this.updateAnalyticalInfo(aAggregation).measureRangePromise.then(function (mMeasureRange) {
            assert.deepEqual(mMeasureRange, {
                AGE: {
                    max: 77,
                    min: 42
                }
            });
        });
        ODataListBinding.prototype.getContexts.restore();
        return this.getContexts.apply(this, arguments);
    });
    this.expectRequest("EMPLOYEES?$apply=groupby((Name),aggregate(AGE))" + "/filter(AGE ge 30)/orderby(AGE)" + "/concat(aggregate(AGE with min as UI5min__AGE," + "AGE with max as UI5max__AGE,$count as UI5__count)" + ",skip(1)/top(3))", {
        value: [{
                "@odata.id": null,
                "UI5min__AGE@odata.type": "#Int16",
                UI5min__AGE: 42,
                UI5max__AGE: 77,
                UI5__count: "4",
                "UI5__count@odata.type": "#Decimal"
            }, { ID: "1", Name: "Jonathan Smith", AGE: 50 }, { ID: "0", Name: "Frederic Fall", AGE: 70 }, { ID: "2", Name: "Peter Burke", AGE: 77 }]
    }).expectChange("count").expectChange("text", [, "Jonathan Smith", "Frederic Fall", "Peter Burke"]).expectChange("age", [, "50", "70", "77"]);
    return this.createView(assert, sView).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("count", "4");
        that.oView.byId("count").setBindingContext(oTable.getBinding("rows").getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        oTable.getBinding("rows").updateAnalyticalInfo(aAggregation);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES?$apply=groupby((Name),aggregate(AGE))" + "/filter(AGE ge 30)/orderby(AGE)/top(1)", {
            value: [{
                    ID: "3",
                    Name: "John Field",
                    AGE: 42
                }]
        }).expectChange("text", null, null).expectChange("age", null, null).expectChange("text", ["John Field", "Jonathan Smith", "Frederic Fall"]).expectChange("age", ["42", "50", "70"]);
        oTable.setFirstVisibleRow(0);
        return that.waitForChanges(assert);
    }).then(function () {
        return oMeasureRangePromise;
    });
});
QUnit.test("ODLB#updateAnalyticalInfo with min/max while suspended", function (assert) {
    var aAggregation = [{
            grouped: false,
            inResult: true,
            name: "Name"
        }, {
            max: true,
            min: true,
            name: "AGE",
            total: false
        }], sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', suspended : true}\">\t<Text id=\"text\" text=\"{Name}\"/>\t<Text id=\"age\" text=\"{AGE}\"/></Table>", that = this;
    this.expectChange("text", []).expectChange("age", []);
    return this.createView(assert, sView).then(function () {
        var oListBinding = that.oView.byId("table").getBinding("items"), oMeasureRangePromise;
        that.expectRequest("EMPLOYEES?$apply=search(covfefe)/groupby((Name),aggregate(AGE))" + "/concat(aggregate(AGE with min as UI5min__AGE,AGE with max as UI5max__AGE)" + ",top(100))", {
            value: [{
                    "@odata.id": null,
                    "UI5min__AGE@odata.type": "#Int16",
                    UI5min__AGE: 42,
                    UI5max__AGE: 77
                }, { ID: "1", Name: "Jonathan Smith", AGE: 50 }, { ID: "0", Name: "Frederic Fall", AGE: 70 }, { ID: "2", Name: "Peter Burke", AGE: 77 }]
        }).expectChange("text", ["Jonathan Smith", "Frederic Fall", "Peter Burke"]).expectChange("age", ["50", "70", "77"]);
        oListBinding.setAggregation({ search: "covfefe" });
        oMeasureRangePromise = oListBinding.updateAnalyticalInfo(aAggregation).measureRangePromise;
        oListBinding.resume();
        return Promise.all([oMeasureRangePromise, that.waitForChanges(assert)]);
    }).then(function (aResults) {
        var mMeasureRange = aResults[0];
        assert.deepEqual(mMeasureRange, {
            AGE: {
                max: 77,
                min: 42
            }
        });
    });
});
QUnit.test("bindElement called twice on table", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\" growing=\"true\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectChange("name", []);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("TEAMS('TEAM_01')?$select=Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        }).expectChange("name", ["Jonathan Smith"]);
        oTable.bindElement("/TEAMS('TEAM_01')");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('TEAM_01')?$select=Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
            Team_Id: "TEAM_01",
            TEAM_2_EMPLOYEES: [{
                    ID: "3",
                    Name: "Jonathan Smith"
                }]
        }).expectChange("name", ["Jonathan Smith"]);
        oTable.bindElement("/TEAMS('TEAM_01')");
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oTable.getItems().length, 1, "The one entry is still displayed");
    });
});
QUnit.test("Update model property via control", function (assert) {
    var oModel = createTeaBusiModel(), sView = "<FlexBox binding=\"{/TEAMS('1')}\" id=\"form\">\t<Text id=\"Team_Id\" text=\"{Team_Id}\"/>\t<Text id=\"Name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS('1')", {
        Team_Id: "1",
        Name: "Old Name"
    }).expectChange("Team_Id", "1");
    return this.createView(assert, sView, oModel).then(function () {
        var oText = that.oView.byId("Name");
        that.expectRequest({
            method: "PATCH",
            url: "TEAMS('1')",
            payload: { Name: "New Name" }
        }, {
            Team_Id: "1",
            Name: "New Name"
        });
        oText.setText("New Name");
        assert.strictEqual(oText.getText(), "New Name");
    });
});
[{
        operation: "EditAction",
        method: "POST"
    }, {
        operation: "GetDraft",
        method: "GET"
    }].forEach(function (oFixture, i) {
    QUnit.test("bound operation: execute resolves with V4 context, " + i, function (assert) {
        var oModel = createSpecialCasesModel({ autoExpandSelect: true }), oOperation, sRequestPath = "Artists(ArtistID='42',IsActiveEntity=true)/special.cases." + oFixture.operation + (oFixture.method === "GET" ? "()" : ""), sView = "<FlexBox id=\"objectPage\">\t<Text id=\"city\" text=\"{Address/City}\"/>\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", that = this;
        this.expectChange("city").expectChange("id").expectChange("isActive").expectChange("name");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=Address/City,ArtistID,IsActiveEntity,Name", {
                Address: { City: "Liverpool" },
                ArtistID: "42",
                IsActiveEntity: true,
                Name: "Hour Frustrated"
            }).expectChange("city", "Liverpool").expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", "Hour Frustrated");
            that.oView.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext());
            return that.waitForChanges(assert);
        }).then(function () {
            oOperation = that.oModel.bindContext("special.cases." + oFixture.operation + "(...)", that.oView.getBindingContext(), {
                $select: "Address/City,ArtistID,IsActiveEntity,Name,Messages"
            });
            that.expectRequest({
                method: oFixture.method,
                url: sRequestPath + "?$select=Address/City,ArtistID,IsActiveEntity,Messages,Name",
                payload: oFixture.method === "GET" ? undefined : {}
            }, {
                Address: { City: "Liverpool" },
                ArtistID: "42",
                IsActiveEntity: false,
                Name: "Hour Frustrated",
                Messages: [{
                        code: "23",
                        message: "Just A Message",
                        numericSeverity: 1,
                        transition: true,
                        target: "Name"
                    }]
            }).expectMessages([{
                    code: "23",
                    message: "Just A Message",
                    target: "/Artists(ArtistID='42',IsActiveEntity=false)/Name",
                    persistent: true,
                    type: "Success"
                }]);
            return Promise.all([
                oOperation.execute(),
                that.waitForChanges(assert)
            ]);
        }).then(function (aPromiseResults) {
            var oInactiveArtistContext = aPromiseResults[0];
            that.expectChange("isActive", "No");
            that.oView.byId("objectPage").setBindingContext(oInactiveArtistContext);
            return that.waitForChanges(assert);
        }).then(function () {
            return that.checkValueState(assert, "name", "Success", "Just A Message");
        }).then(function () {
            that.expectRequest({
                method: "PATCH",
                url: "Artists(ArtistID='42',IsActiveEntity=false)",
                payload: { Name: "foo" }
            }, { Name: "foo" }).expectChange("name", "foo");
            that.oView.byId("name").getBinding("value").setValue("foo");
            return that.waitForChanges(assert);
        }).then(function () {
            var oInactiveArtistContext = that.oView.byId("objectPage").getBindingContext();
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)" + "?$select=Address/City,Name", {
                Address: { City: "London" },
                Name: "bar"
            }).expectChange("city", "London").expectChange("name", "bar");
            return Promise.all([
                oInactiveArtistContext.requestSideEffects(["Address/City", "Name"]),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            that.expectChange("city", null).expectChange("id", null).expectChange("isActive", null).expectChange("name", null);
            oOperation.setContext(undefined);
            return that.waitForChanges(assert);
        });
    });
});
[
    { hiddenBinding: true, title: "relative hidden binding" },
    { title: "use row context directly; absolute hidden binding for 'deep links'" }
].forEach(function (oFixture) {
    var sTitle = "bound operation: switching between active and inactive entity, " + oFixture.title;
    QUnit.test(sTitle, function (assert) {
        var oHiddenBinding, oPublications, oModel = createSpecialCasesModel({ autoExpandSelect: true }), mNames = {
            23: "The Rolling Stones",
            42: "The Beatles"
        }, mPrices = {
            23: "12.99",
            42: "9.99"
        }, oObjectPage, oRowContext, sView = "<Table id=\"table\" items=\"{path : '/Artists', \t\tparameters : {$filter : 'IsActiveEntity', $$patchWithoutSideEffects : true}}\">\t<Text id=\"listId\" text=\"{ArtistID}\"/>\t<Text id=\"listIsActive\" text=\"{IsActiveEntity}\"/></Table><FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Input id=\"name\" value=\"{Name}\"/>\t<Table id=\"publication\" items=\"{path : '_Publication', parameters : {$$ownRequest : true}}\">\t\t<Input id=\"price\" value=\"{Price}\"/>\t</Table></FlexBox>", that = this;
        function expectArtistRequest(sId, bIsActive) {
            that.expectRequest("Artists(ArtistID='" + sId + "',IsActiveEntity=" + bIsActive + ")?$select=ArtistID,IsActiveEntity,Name", {
                ArtistID: sId,
                IsActiveEntity: bIsActive,
                Name: mNames[sId]
            }).expectChange("id", sId).expectChange("isActive", bIsActive ? "Yes" : "No").expectChange("name", mNames[sId]);
        }
        function expectPublicationRequest(sId, bIsActive, bAlreadyCached) {
            if (!bAlreadyCached) {
                that.expectRequest("Artists(ArtistID='" + sId + "',IsActiveEntity=" + bIsActive + ")/_Publication?$select=Price,PublicationID&$skip=0&$top=100", {
                    value: [{
                            Price: mPrices[sId],
                            PublicationID: "42-0"
                        }]
                });
            }
            that.expectChange("price", [mPrices[sId]]);
        }
        function action(sAction, sId, sName, bPublicationAlreadyCached) {
            var bIsActive = sAction === "ActivationAction", oEntityContext = oObjectPage.getBindingContext(), oAction = that.oModel.bindContext("special.cases." + sAction + "(...)", oEntityContext, { $$inheritExpandSelect: true });
            that.expectRequest({
                method: "POST",
                url: "Artists(ArtistID='" + sId + "',IsActiveEntity=" + !bIsActive + ")/special.cases." + sAction + "?$select=ArtistID,IsActiveEntity,Name",
                payload: {}
            }, {
                ArtistID: sId,
                IsActiveEntity: bIsActive,
                Name: sName || mNames[sId]
            });
            return Promise.all([
                oAction.execute(),
                that.waitForChanges(assert)
            ]).then(function (aPromiseResults) {
                var oContext = aPromiseResults[0], sIsActive = bIsActive ? "Yes" : "No";
                that.expectChange("isActive", sIsActive);
                expectPublicationRequest(sId, bIsActive, bPublicationAlreadyCached);
                if (sId === "42" && oFixture.keepAlive) {
                    that.expectChange("listIsActive", [sIsActive]);
                    oRowContext = oContext = oRowContext.replaceWith(oContext);
                }
                return bindObjectPage(oContext, false);
            });
        }
        function bindObjectPage(vSource, bUseHiddenBinding) {
            var oBinding, oContext = vSource;
            if (typeof vSource === "string") {
                if (oFixture.hiddenBinding) {
                    oHiddenBinding.setContext(that.oModel.createBindingContext(vSource));
                    oBinding = oHiddenBinding;
                }
                else {
                    oBinding = that.oModel.bindContext(vSource, undefined, { $$patchWithoutSideEffects: true });
                }
                oContext = oBinding.getBoundContext();
            }
            else if (bUseHiddenBinding) {
                oHiddenBinding.setContext(oContext);
                oContext = oHiddenBinding.getBoundContext();
            }
            oObjectPage.setBindingContext(oContext);
            if (vSource) {
                assert.ok(oObjectPage.getBindingContext().getBinding().isPatchWithoutSideEffects(), "Object page has $$patchWithoutSideEffects");
            }
            return that.waitForChanges(assert, "bind object page to " + oContext);
        }
        this.expectRequest("Artists?$filter=IsActiveEntity&$select=ArtistID,IsActiveEntity" + "&$skip=0&$top=100", {
            value: [{ ArtistID: "42", IsActiveEntity: true }]
        }).expectChange("listId", ["42"]).expectChange("listIsActive", ["Yes"]).expectChange("id").expectChange("isActive").expectChange("name").expectChange("price", []);
        return this.createView(assert, sView, oModel).then(function () {
            oObjectPage = that.oView.byId("objectPage");
            oPublications = that.oView.byId("publication").getBinding("items");
            if (oFixture.hiddenBinding) {
                oHiddenBinding = that.oModel.bindContext("", undefined, { $$patchWithoutSideEffects: true });
                expectArtistRequest("42", true);
            }
            else {
                that.expectChange("id", "42").expectChange("isActive", "Yes").expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=Name", { Name: "The Beatles" }).expectChange("name", "The Beatles");
            }
            expectPublicationRequest("42", true);
            oRowContext = that.oView.byId("table").getItems()[0].getBindingContext();
            oRowContext.setKeepAlive(oFixture.keepAlive);
            return bindObjectPage(oRowContext, oFixture.hiddenBinding);
        }).then(function () {
            return action("EditAction", "42");
        }).then(function () {
            var oRootBinding = oHiddenBinding ? oHiddenBinding.getRootBinding() : that.oView.byId("table").getBinding("items");
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)/_Publication" + "?$select=Price,PublicationID&$filter=Price gt 8&$skip=0&$top=100", {
                value: [{
                        Price: "8.88",
                        PublicationID: "42-0"
                    }]
            }).expectChange("price", ["8.88"]);
            oRootBinding.suspend();
            oPublications.filter(new Filter("Price", FilterOperator.GT, "8"));
            oRootBinding.resume();
            return that.waitForChanges(assert, "BCP: 2170181227");
        }).then(function () {
            expectPublicationRequest("42", false);
            oPublications.filter();
            return that.waitForChanges(assert, "BCP: 2170181227, reset filter");
        }).then(function () {
            that.expectRequest({
                headers: { Prefer: "return=minimal" },
                method: "PATCH",
                url: "Artists(ArtistID='42',IsActiveEntity=false)",
                payload: { Name: "The Beatles (modified)" }
            }).expectChange("name", "The Beatles (modified)");
            that.oView.byId("name").getBinding("value").setValue("The Beatles (modified)");
            return that.waitForChanges(assert, "PATCH");
        }).then(function () {
            return action("ActivationAction", "42", "The Beatles (modified)", oFixture.keepAlive);
        }).then(function () {
            expectArtistRequest("23", false);
            expectPublicationRequest("23", false);
            return bindObjectPage("/Artists(ArtistID='23',IsActiveEntity=false)");
        }).then(function () {
            return action("ActivationAction", "23");
        }).then(function () {
            return action("EditAction", "23");
        }).then(function () {
            var oRowContext;
            that.expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", oFixture.keepAlive ? "The Beatles (modified)" : "The Beatles");
            expectPublicationRequest("42", true, true);
            oRowContext = that.oView.byId("table").getItems()[0].getBindingContext();
            return bindObjectPage(oRowContext, oFixture.hiddenBinding);
        }).then(function () {
            that.expectChange("id", null).expectChange("isActive", null).expectChange("name", null);
            return bindObjectPage(null, false);
        });
    });
});
[function () {
        return this.oView.byId("table").getItems()[0].getBindingContext();
    }, function () {
        return this.oModel.createBindingContext("/Artists(ArtistID='42',IsActiveEntity=true)");
    }].forEach(function (fnGetParentContext, i) {
    var sTitle = "Fiori Elements Safeguard: Test 1 (Edit/Activate) " + (i ? "base" : "row") + " context";
    QUnit.test(sTitle, function (assert) {
        var oCreationRow, oCreationRowContext, oModel = createSpecialCasesModel({ autoExpandSelect: true }), oObjectPage, oReturnValueContext, sTable = "<Table id=\"table\" items=\"{/Artists}\">\t<Text id=\"listId\" text=\"{ArtistID}\"/></Table>", sView = "<FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Input id=\"name\" value=\"{Name}\"/>\t<Input id=\"bestFriend\" value=\"{BestFriend/Name}\"/>\t<FlexBox id=\"creationRow\">\t\t<Text id=\"price\" text=\"{Price}\"/>\t\t<Text id=\"artistName\" text=\"{_Artist/Name}\"/>\t</FlexBox></FlexBox>", that = this;
        function action(sAction) {
            var bIsActive = sAction === "ActivationAction", oEntityContext = oObjectPage.getBindingContext(), oAction = that.oModel.bindContext("special.cases." + sAction + "(...)", oEntityContext, { $$inheritExpandSelect: true });
            that.expectRequest({
                method: "POST",
                url: "Artists(ArtistID='42',IsActiveEntity=" + !bIsActive + ")/special.cases." + sAction + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)",
                payload: {}
            }, {
                ArtistID: "42",
                BestFriend: {
                    ArtistID: "23",
                    IsActiveEntity: true,
                    Name: bIsActive ? "Sgt. Pepper (modified)" : "Sgt. Pepper"
                },
                IsActiveEntity: bIsActive,
                Name: "The Beatles"
            });
            return Promise.all([
                oAction.execute(),
                that.waitForChanges(assert)
            ]).then(function (aPromiseResults) {
                oReturnValueContext = aPromiseResults[0];
                that.expectChange("isActive", bIsActive ? "Yes" : "No");
                oObjectPage.setBindingContext(oReturnValueContext);
                return that.waitForChanges(assert);
            });
        }
        if (!i) {
            sView = sTable + sView;
            this.expectRequest("Artists?$select=ArtistID,IsActiveEntity" + "&$skip=0&$top=100", {
                value: [{ ArtistID: "42", IsActiveEntity: true }]
            }).expectChange("listId", ["42"]);
        }
        this.expectChange("id").expectChange("isActive").expectChange("name").expectChange("bestFriend").expectChange("artistName").expectChange("price");
        return this.createView(assert, sView, oModel).then(function () {
            var oHiddenBinding;
            oHiddenBinding = that.oModel.bindContext("", fnGetParentContext.call(that), { $$patchWithoutSideEffects: true, $select: "Messages" });
            oObjectPage = that.oView.byId("objectPage");
            oCreationRow = that.oView.byId("creationRow");
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)", {
                ArtistID: "42",
                BestFriend: {
                    ArtistID: "23",
                    IsActiveEntity: true,
                    Name: "Sgt. Pepper"
                },
                IsActiveEntity: true,
                Name: "The Beatles"
            }).expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", "The Beatles").expectChange("bestFriend", "Sgt. Pepper");
            oCreationRow.setBindingContext(null);
            oObjectPage.setBindingContext(oHiddenBinding.getBoundContext());
            return that.waitForChanges(assert);
        }).then(function () {
            return action("EditAction");
        }).then(function () {
            that.expectChange("name", "The Beatles (modified)").expectRequest({
                headers: { "Prefer": "return=minimal" },
                method: "PATCH",
                url: "Artists(ArtistID='42',IsActiveEntity=false)",
                payload: { Name: "The Beatles (modified)" }
            }, {
                ArtistID: "42",
                IsActiveEntity: true,
                Name: "The Beatles"
            });
            that.oView.byId("name").getBinding("value").setValue("The Beatles (modified)");
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectChange("bestFriend", "Sgt. Pepper (modified)").expectRequest({
                headers: { "Prefer": "return=minimal" },
                method: "PATCH",
                url: "Artists(ArtistID='23',IsActiveEntity=true)",
                payload: { Name: "Sgt. Pepper (modified)" }
            });
            that.oView.byId("bestFriend").getBinding("value").setValue("Sgt. Pepper (modified)");
            return that.waitForChanges(assert);
        }).then(function () {
            var oMessageManager = sap.ui.getCore().getMessageManager();
            that.oLogMock.expects("error").twice();
            return oReturnValueContext.getBinding().getBoundContext().setProperty("BestFriend/Name", "n/a").then(mustFail(assert), function () {
                assert.strictEqual(oMessageManager.getMessageModel().getObject("/").length, 1);
                oMessageManager.removeAllMessages();
                assert.strictEqual(oReturnValueContext.getProperty("BestFriend/Name"), "Sgt. Pepper (modified)");
            });
        }).then(function () {
            oCreationRowContext = that.oModel.bindList("_Publication", oReturnValueContext, undefined, undefined, { $$updateGroupId: "doNotSubmit" }).create({ Price: "47" });
            that.expectChange("price", "47").expectChange("artistName", "The Beatles (modified)");
            oCreationRow.setBindingContext(oCreationRowContext);
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Messages,Name", {
                ArtistID: "42",
                IsActiveEntity: false,
                Name: "The Beatles"
            }).expectChange("name", "The Beatles").expectChange("artistName", "The Beatles");
            return Promise.all([
                oReturnValueContext.requestSideEffects(["*", "_Publication"]),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            that.expectChange("price", null).expectChange("artistName", null);
            return Promise.all([
                oCreationRowContext.delete(),
                checkCanceled(assert, oCreationRowContext.created()),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            return action("ActivationAction");
        });
    });
});
QUnit.test("Fiori Elements Safeguard: Test 2 (Create)", function (assert) {
    var oCreationRowContext, oModel = createSpecialCasesModel({ autoExpandSelect: true }), oReturnValueContext, sView = "<FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Text id=\"name\" text=\"{Name}\"/>\t<FlexBox id=\"bestFriend\" binding=\"{BestFriend}\">\t\t<Text id=\"bestFriendName\" text=\"{Name}\"/>\t</FlexBox>\t<FlexBox id=\"creationRow\">\t\t<Text id=\"price\" text=\"{Price}\"/>\t\t<Text id=\"artistName\" text=\"{_Artist/Name}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectChange("id").expectChange("isActive").expectChange("name").expectChange("bestFriendName").expectChange("price").expectChange("artistName");
    return this.createView(assert, sView, oModel).then(function () {
        var oOperationBinding = oModel.bindContext("special.cases.Create(...)", oModel.bindList("/Artists").getHeaderContext(), { $$patchWithoutSideEffects: true, $select: "Messages" });
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "Artists/special.cases.Create?$select=Messages"
        }, {
            ArtistID: "23",
            IsActiveEntity: false
        });
        return oOperationBinding.execute();
    }).then(function (oReturnValueContext0) {
        oReturnValueContext = oReturnValueContext0;
        that.expectRequest("Artists(ArtistID='23',IsActiveEntity=false)" + "?$select=BestFriend,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)", {
            Name: "DJ Bobo",
            BestFriend: {
                ArtistID: "32",
                IsActiveEntity: true,
                Name: "Robin Schulz"
            }
        }).expectChange("id", "23").expectChange("isActive", "No").expectChange("name", "DJ Bobo").expectChange("bestFriendName", "Robin Schulz");
        that.oView.byId("creationRow").setBindingContext(null);
        that.oView.byId("objectPage").setBindingContext(oReturnValueContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='23',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)", {
            ArtistID: "23",
            IsActiveEntity: false,
            Name: "DJ Bobo",
            BestFriend: {
                ArtistID: "32",
                IsActiveEntity: true,
                Name: "Robin Schulz"
            }
        });
        return Promise.all([
            oReturnValueContext.requestRefresh(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        oCreationRowContext = that.oModel.bindList("_Publication", oReturnValueContext, undefined, undefined, { $$updateGroupId: "doNotSubmit" }).create({ Price: "47" });
        that.expectChange("price", "47");
        that.expectChange("artistName", "DJ Bobo");
        that.oView.byId("creationRow").setBindingContext(oCreationRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='23',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)", {
            ArtistID: "23",
            IsActiveEntity: false,
            Name: "DJ Bobo",
            BestFriend: {
                ArtistID: "32",
                IsActiveEntity: true,
                Name: "Robin Schulz"
            }
        });
        return Promise.all([
            oReturnValueContext.requestSideEffects(["*", "BestFriend", "_Publication"]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oAction = that.oModel.bindContext("special.cases.ActivationAction(...)", oReturnValueContext, { $$inheritExpandSelect: true });
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='23',IsActiveEntity=false)" + "/special.cases.ActivationAction" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)",
            payload: {}
        }, {
            ArtistID: "23",
            IsActiveEntity: true,
            Name: "DJ Bobo",
            BestFriend: {
                ArtistID: "32",
                IsActiveEntity: true,
                Name: "Robin Schulz"
            }
        });
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        oReturnValueContext = aPromiseResults[0];
        that.expectChange("isActive", "Yes");
        that.oView.byId("objectPage").setBindingContext(oReturnValueContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='23',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)", {
            ArtistID: "23",
            IsActiveEntity: true,
            Name: "DJ Bobo",
            BestFriend: {
                ArtistID: "32",
                IsActiveEntity: true,
                Name: "Robin Schulz"
            }
        });
        return Promise.all([
            oReturnValueContext.requestRefresh(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2180125559", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), oObjectPage, sView = "<FlexBox id=\"objectPage\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Table id=\"table\" growing=\"true\" growingThreshold=\"5\" items=\"{\t\t\t\tpath : '_Publication',\t\t\t\tparameters : {$$ownRequest : true}\t\t\t}\">\t\t<Text id=\"price\" text=\"{Price}\"/>\t\t<Text id=\"channel\" text=\"{_Artist/defaultChannel}\"/>\t</Table></FlexBox><FlexBox id=\"subObjectPage\">\t<Text id=\"currency\" text=\"{CurrencyCode}\"/></FlexBox>", that = this;
    this.expectChange("name").expectChange("price", []).expectChange("channel", []).expectChange("currency");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=5", {
            value: []
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name,defaultChannel", {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated",
            defaultChannel: "Channel 1"
        }).expectChange("name", "Hour Frustrated");
        oObjectPage = that.oView.byId("objectPage");
        oObjectPage.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=5", {
            value: [{
                    Price: "9.99",
                    PublicationID: "42-0"
                }]
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name,defaultChannel", {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated again",
            defaultChannel: "Channel 2"
        }).expectChange("name", "Hour Frustrated again").expectChange("price", ["9.99"]).expectChange("channel", ["Channel 2"]);
        oObjectPage.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        var oContext = that.oView.byId("table").getItems()[0].getBindingContext();
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication('42-0')" + "?$select=CurrencyCode", { CurrencyCode: "EUR" }).expectChange("currency", "EUR");
        that.oView.byId("subObjectPage").setBindingContext(oContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=5", {
            value: [{
                    Price: "10.99",
                    PublicationID: "42-0"
                }]
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name,defaultChannel", {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated again and again",
            defaultChannel: "Channel 3"
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication('42-0')" + "?$select=CurrencyCode", { CurrencyCode: "USD" }).expectChange("name", "Hour Frustrated again and again").expectChange("price", ["10.99"]).expectChange("channel", ["Channel 3"]).expectChange("currency", "USD");
        oObjectPage.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("return value contexts: don't reuse caches if context changed", function (assert) {
    var oActiveArtistContext, oInactiveArtistContext, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Input id=\"name\" value=\"{Name}\"/>\t<Table id=\"table\" items=\"{\t\t\t\tpath : '_Publication',\t\t\t\tparameters : {$$ownRequest : true}\t\t\t}\">\t\t<Input id=\"price\" value=\"{Price}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("id").expectChange("isActive").expectChange("name").expectChange("price", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=100", {
            value: [{
                    Price: "9.99",
                    PublicationID: "42-0"
                }]
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name", {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated"
        }).expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", "Hour Frustrated").expectChange("price", ["9.99"]);
        oActiveArtistContext = oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext();
        that.oView.setBindingContext(oActiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        var oOperation = that.oModel.bindContext("special.cases.EditAction(...)", that.oView.getBindingContext(), { $$inheritExpandSelect: true });
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=true)/special.cases.EditAction" + "?$select=ArtistID,IsActiveEntity,Name",
            payload: {}
        }, {
            ArtistID: "42",
            IsActiveEntity: false,
            Name: "Hour Frustrated"
        });
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        oInactiveArtistContext = aPromiseResults[0];
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=100", {
            value: [{
                    Price: "9.99",
                    PublicationID: "42-0"
                }]
        }).expectChange("isActive", "No").expectChange("price", ["9.99"]);
        that.oView.setBindingContext(oInactiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        var oBinding = that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "Artists(ArtistID='42',IsActiveEntity=false)/_Publication('42-0')",
            payload: { Price: "8.88" }
        }, {
            "@odata.etag": "ETag1",
            Price: "8.88"
        }).expectChange("price", ["8.88"]);
        oBinding.setValue("8.88");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("isActive", "Yes").expectChange("price", ["9.99"]);
        that.oView.setBindingContext(oActiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("isActive", "No").expectChange("price", ["8.88"]);
        that.oView.setBindingContext(oInactiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        var oOperation = that.oModel.bindContext("special.cases.ActivationAction(...)", that.oView.getBindingContext(), { $$inheritExpandSelect: true });
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=false)" + "/special.cases.ActivationAction?$select=ArtistID,IsActiveEntity,Name",
            payload: {}
        }, {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated"
        });
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        var oNewActiveArtistContext = aPromiseResults[0];
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=100", {
            value: [{
                    Price: "8.88",
                    PublicationID: "42-0"
                }]
        }).expectChange("isActive", "Yes").expectChange("price", ["8.88"]);
        that.oView.setBindingContext(oNewActiveArtistContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Reuse caches in dependent tables w/ own request while switching list entry", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, oTableBinding, sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/></Table><FlexBox id=\"form\" binding=\"{path : '', parameters : {$$ownRequest : true}}\">\t<Text id=\"managerId\" text=\"{EMPLOYEE_2_MANAGER/ID}\"/>\t<Table items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"equipmentId\" text=\"{ID}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,Name&$skip=0&$top=100", {
        value: [
            { ID: "42", Name: "Jonathan Smith" },
            { ID: "43", Name: "Frederic Fall" }
        ]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]).expectChange("managerId").expectChange("equipmentId", []);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectRequest("EMPLOYEES('42')?$select=ID&$expand=EMPLOYEE_2_MANAGER($select=ID)", {
            ID: "42",
            EMPLOYEE_2_MANAGER: { ID: "1" }
        }).expectRequest("EMPLOYEES('42')/EMPLOYEE_2_EQUIPMENTS?$select=Category,ID" + "&$skip=0&$top=100", {
            value: [
                { Category: "Electronics", ID: 99 },
                { Category: "Electronics", ID: 98 }
            ]
        }).expectChange("managerId", "1").expectChange("equipmentId", ["99", "98"]);
        that.oView.byId("form").setBindingContext(oTableBinding.getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES('43')/EMPLOYEE_2_EQUIPMENTS?$select=Category,ID" + "&$skip=0&$top=100", {
            value: [
                { Category: "Electronics", ID: 97 },
                { Category: "Electronics", ID: 96 }
            ]
        }).expectRequest("EMPLOYEES('43')?$select=ID&$expand=EMPLOYEE_2_MANAGER($select=ID)", {
            ID: "43",
            EMPLOYEE_2_MANAGER: { ID: "2" }
        }).expectChange("managerId", "2").expectChange("equipmentId", ["97", "96"]);
        that.oView.byId("form").setBindingContext(oTableBinding.getCurrentContexts()[1]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("managerId", "1").expectChange("equipmentId", ["99", "98"]);
        that.oView.byId("form").setBindingContext(oTableBinding.getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    });
});
QUnit.test("bound operation: $$inheritExpandSelect", function (assert) {
    var fnDataReceived = this.spy(), fnDataRequested = this.spy(), oJustAMessage = {
        code: "23",
        message: "Just A Message",
        target: "/Artists(ArtistID='42',IsActiveEntity=false)/Name",
        persistent: true,
        type: "Success"
    }, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Input id=\"name\" value=\"{Name}\"/>\t<Text id=\"inProcessByUser\" text=\"{DraftAdministrativeData/InProcessByUser}\"/></FlexBox>", that = this;
    this.expectChange("id").expectChange("isActive").expectChange("name").expectChange("inProcessByUser");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?custom=foo" + "&$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
            ArtistID: "42",
            DraftAdministrativeData: null,
            IsActiveEntity: true,
            Name: "Hour Frustrated"
        }).expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", "Hour Frustrated").expectChange("inProcessByUser", null);
        that.oView.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)", null, { custom: "foo", $select: "Messages" }).getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        var oOperation = that.oModel.bindContext("special.cases.EditAction(...)", that.oView.getBindingContext(), { $$inheritExpandSelect: true });
        oOperation.attachDataReceived(fnDataReceived);
        oOperation.attachDataRequested(fnDataRequested);
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=true)/special.cases.EditAction" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)",
            payload: {}
        }, {
            "@odata.etag": "ETag0",
            ArtistID: "42",
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: "JOHNDOE"
            },
            IsActiveEntity: false,
            Messages: [{
                    code: "23",
                    message: "Just A Message",
                    numericSeverity: 1,
                    target: "Name",
                    transition: true
                }],
            Name: "Hour Frustrated"
        }).expectMessages([oJustAMessage]);
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        var oInactiveArtistContext = aPromiseResults[0];
        that.expectChange("isActive", "No").expectChange("inProcessByUser", "JOHNDOE");
        that.oView.setBindingContext(oInactiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, "name", "Success", "Just A Message");
    }).then(function () {
        var oInactiveArtistContext = that.oView.getBindingContext();
        that.expectChange("name", "TAFKAP").expectRequest({
            method: "PATCH",
            url: "Artists(ArtistID='42',IsActiveEntity=false)",
            headers: { "If-Match": "ETag0" },
            payload: { Name: "TAFKAP" }
        }, {});
        that.oView.byId("name").getBinding("value").setValue("TAFKAP");
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)" + "?$select=DraftAdministrativeData" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: "bar"
            }
        }).expectChange("inProcessByUser", "bar");
        return Promise.all([
            oInactiveArtistContext.requestSideEffects([{
                    $PropertyPath: "DraftAdministrativeData/InProcessByUser"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(fnDataReceived.callCount, 0, "no dataReceived");
        assert.strictEqual(fnDataRequested.callCount, 0, "no dataRequested");
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
            ArtistID: "42",
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: "JOHNDOE"
            },
            IsActiveEntity: false,
            Messages: [],
            Name: "Changed"
        }).expectChange("name", "Changed").expectChange("inProcessByUser", "JOHNDOE");
        that.oView.getBindingContext().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        var oOperation = that.oModel.bindContext("special.cases.ActivationAction(...)", that.oView.getBindingContext(), { $$inheritExpandSelect: true });
        assert.strictEqual(fnDataReceived.callCount, 1, "dataReceived");
        assert.strictEqual(fnDataRequested.callCount, 1, "dataRequested");
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=false)" + "/special.cases.ActivationAction" + "?$select=ArtistID,IsActiveEntity,Messages,Name" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)",
            payload: {}
        }, {
            ArtistID: "42",
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: ""
            },
            IsActiveEntity: true,
            Messages: [],
            Name: "Hour Frustrated"
        });
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("bound operation: copy result into context", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('42')}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"LifecycleStatusDesc\" text=\"{LifecycleStatusDesc}\"/>\t<Text id=\"CompanyName\" text=\"{SO_2_BP/CompanyName}\"/>\t<FlexBox id=\"action\"\t\tbinding=\"{path : 'com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm(...)'\t\t\t, parameters : {$$inheritExpandSelect : true}}\">\t\t<layoutData><FlexItemData/></layoutData>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=LifecycleStatusDesc,SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
        SalesOrderID: "42",
        LifecycleStatusDesc: "New",
        SO_2_BP: {
            BusinessPartnerID: "1",
            CompanyName: "Kunde"
        }
    }).expectChange("id", "42").expectChange("LifecycleStatusDesc", "New").expectChange("CompanyName", "Kunde");
    return this.createView(assert, sView, oModel).then(function () {
        var oOperation = that.oView.byId("action").getObjectBinding();
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('42')/" + "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm" + "?$select=LifecycleStatusDesc,SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)",
            payload: {}
        }, {
            SalesOrderID: "42",
            LifecycleStatusDesc: "Confirmed",
            SO_2_BP: {
                BusinessPartnerID: "1",
                CompanyName: "Kunde (gl\u00FCcklich)"
            }
        }).expectChange("LifecycleStatusDesc", "Confirmed").expectChange("CompanyName", "Kunde (gl\u00FCcklich)");
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("bound operation: delete return value context", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"objectPage\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"isActive\" text=\"{IsActiveEntity}\"/>\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("id").expectChange("isActive").expectChange("name");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name", {
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Hour Frustrated"
        }).expectChange("id", "42").expectChange("isActive", "Yes").expectChange("name", "Hour Frustrated");
        that.oView.setBindingContext(oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=true)/special.cases.EditAction",
            payload: {}
        }, {
            ArtistID: "42",
            IsActiveEntity: false,
            Name: "Hour Frustrated"
        });
        return Promise.all([
            that.oModel.bindContext("special.cases.EditAction(...)", that.oView.getBindingContext()).execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        var oInactiveArtistContext = aPromiseResults[0];
        that.expectChange("isActive", "No");
        that.oView.byId("objectPage").setBindingContext(oInactiveArtistContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "Artists(ArtistID='42',IsActiveEntity=false)"
        }).expectChange("id", null).expectChange("isActive", null).expectChange("name", null);
        return Promise.all([
            that.oView.byId("objectPage").getBindingContext().delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("bound operation: execute bound action on context w/o read", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), oParentContext = oModel.bindContext("/Artists(ArtistID='42',IsActiveEntity=true)").getBoundContext(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='42',IsActiveEntity=true)/special.cases.EditAction",
            payload: {}
        }, {
            ArtistID: "42",
            IsActiveEntity: false
        });
        return Promise.all([
            oModel.bindContext("special.cases.EditAction(...)", oParentContext).execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aPromiseResults) {
        var oInactiveArtistContext = aPromiseResults[0];
        assert.strictEqual(oInactiveArtistContext.getProperty("IsActiveEntity"), false);
    });
});
QUnit.test("bound operation: $$inheritExpandSelect and parent w/o cache #1", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/SalesOrderList', parameters : {$select : 'Messages'}}\">\t<Text id=\"listId\" text=\"{SalesOrderID}\"/></Table><FlexBox id=\"objectPage\" binding=\"{}\">\t<Text id=\"objectId\" text=\"{SalesOrderID}\"/>\t<FlexBox id=\"action\" binding=\"{path : '" + sAction + "(...)', \t\tparameters : {$$inheritExpandSelect : true}}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=Messages,SalesOrderID&$skip=0&$top=100", { value: [{ SalesOrderID: "1" }] }).expectChange("listId", ["1"]).expectChange("objectId");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("objectId", "1");
        that.oView.byId("objectPage").setBindingContext(that.oView.byId("table").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/" + sAction + "?$select=Messages,SalesOrderID",
            payload: {}
        }, {
            SalesOrderID: "1"
        });
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function (aResults) {
        assert.strictEqual(aResults[0].getPath(), "/SalesOrderList('1')");
    });
});
QUnit.test("bound operation: $$inheritExpandSelect and parent w/o cache #2", function (assert) {
    var sAction = "special.cases.EditAction", oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/Artists',\t\tparameters : {$select : 'BestFriend/Messages'}}\">\t<Text id=\"artists\" text=\"{ArtistID}\"/>\t<Text id=\"bestFriends\" text=\"{BestFriend/ArtistID}\"/></Table><FlexBox id=\"objectPage\" binding=\"{BestFriend}\">\t<Text id=\"bestFriend\" text=\"{ArtistID}\"/>\t<FlexBox id=\"action\" binding=\"{path : '" + sAction + "(...)', \t\tparameters : {$$inheritExpandSelect : true}}\"/></FlexBox>", that = this;
    this.expectRequest("Artists?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Messages)" + "&$skip=0&$top=100", {
        value: [{
                ArtistID: "1",
                IsActiveEntity: true,
                BestFriend: {
                    ArtistID: "2",
                    IsActiveEntity: true
                }
            }]
    }).expectChange("artists", ["1"]).expectChange("bestFriends", ["2"]).expectChange("bestFriend");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("bestFriend", "2");
        that.oView.byId("objectPage").setBindingContext(that.oView.byId("table").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "Artists(ArtistID='1',IsActiveEntity=true)/BestFriend/" + sAction + "?$select=ArtistID,IsActiveEntity,Messages",
            payload: {}
        }, {
            ArtistID: "2",
            IsActiveEntity: false
        });
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
    });
});
QUnit.test("Create absolute, save and call action", function (assert) {
    var oCreatedContext, oModel = createTeaBusiModel({ autoExpandSelect: true }), that = this, sView = "<Table id=\"table\" items=\"{/TEAMS}\">\t<Text id=\"Team_Id\" text=\"{Team_Id}\"/></Table>";
    this.expectRequest("TEAMS?$select=Team_Id&$skip=0&$top=100", {
        value: [{ Team_Id: "42" }]
    }).expectChange("Team_Id", ["42"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "TEAMS",
            payload: { Team_Id: "new" }
        }, { Team_Id: "newer" }).expectChange("Team_Id", ["new"]).expectChange("Team_Id", ["newer", "42"]).expectRequest("TEAMS('newer')?$select=Team_Id", { Team_Id: "newer" });
        oCreatedContext = that.oView.byId("table").getBinding("items").create({
            Team_Id: "new"
        });
        return Promise.all([oCreatedContext.created(), that.waitForChanges(assert)]);
    }).then(function () {
        var oAction = oModel.bindContext("com.sap.gateway.default.iwbep.tea_busi.v0001." + "AcChangeManagerOfTeam(...)", oCreatedContext);
        assert.strictEqual(oCreatedContext.getPath(), "/TEAMS('newer')");
        that.expectRequest({
            method: "POST",
            url: "TEAMS('newer')/com.sap.gateway.default.iwbep.tea_busi.v0001." + "AcChangeManagerOfTeam",
            payload: { ManagerID: "01" }
        });
        oAction.setParameter("ManagerID", "01");
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Create relative, save and call action", function (assert) {
    var oCreatedContext, oModel = createTeaBusiModel(), oTeam2EmployeesBinding, that = this, sView = "<FlexBox id=\"form\" binding=\"{path : '/TEAMS(\\'42\\')',\tparameters : {$expand : {TEAM_2_EMPLOYEES : {$select : 'ID'}}}}\">\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"id\" text=\"{ID}\"/>\t</Table></FlexBox>";
    this.expectRequest("TEAMS('42')?$expand=TEAM_2_EMPLOYEES($select=ID)", {
        TEAM_2_EMPLOYEES: [{ ID: "2" }]
    }).expectChange("id", ["2"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "TEAMS('42')/TEAM_2_EMPLOYEES",
            payload: { ID: null }
        }, { ID: "7" }).expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES('7')?$select=ID", { ID: "7" }).expectChange("id", [""]).expectChange("id", ["7", "2"]);
        oTeam2EmployeesBinding = that.oView.byId("table").getBinding("items");
        oCreatedContext = oTeam2EmployeesBinding.create({ ID: null });
        return Promise.all([oCreatedContext.created(), that.waitForChanges(assert)]);
    }).then(function () {
        var oAction = that.oModel.bindContext("com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee(...)", oCreatedContext);
        assert.strictEqual(oCreatedContext.getPath(), "/TEAMS('42')/TEAM_2_EMPLOYEES('7')");
        that.expectRequest({
            method: "POST",
            url: "TEAMS('42')/TEAM_2_EMPLOYEES('7')/" + "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee",
            payload: { TeamID: "TEAM_02" }
        }, { ID: "7" });
        oAction.setParameter("TeamID", "TEAM_02");
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Create absolute and contained entity, save and call bound action/function", function (assert) {
    var oCreatedItemContext, oCreatedSOContext, oItemBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this, sView = "<Table id=\"SalesOrders\" items=\"{/SalesOrderList}\">\t<Text id=\"SalesOrderID\" text=\"{SalesOrderID}\"/></Table><Table id=\"LineItems\" items=\"{SO_2_SOITEM}\">\t<Text id=\"ItemSalesOrderID\" text=\"{SalesOrderID}\"/>\t<Text id=\"ItemPosition\" text=\"{ItemPosition}\"/></Table>";
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [{ SalesOrderID: "42" }]
    }).expectChange("SalesOrderID", ["42"]).expectChange("ItemPosition", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList",
            payload: { SalesOrderID: "newID" }
        }, { SalesOrderID: "43" }).expectChange("SalesOrderID", ["newID"]).expectChange("SalesOrderID", ["43", "42"]).expectRequest("SalesOrderList('43')?$select=SalesOrderID", { SalesOrderID: "43" });
        oCreatedSOContext = that.oView.byId("SalesOrders").getBinding("items").create({
            SalesOrderID: "newID"
        });
        return Promise.all([oCreatedSOContext.created(), that.waitForChanges(assert)]);
    }).then(function () {
        that.expectRequest("SalesOrderList('43')/SO_2_SOITEM?$select=ItemPosition," + "SalesOrderID&$skip=0&$top=100", { value: [] });
        oItemBinding = that.oView.byId("LineItems").getBinding("items");
        oItemBinding.setContext(oCreatedSOContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('43')/SO_2_SOITEM",
            payload: {
                SalesOrderID: "43",
                ItemPosition: "newPos"
            }
        }, {
            SalesOrderID: "43",
            ItemPosition: "10"
        }).expectRequest("SalesOrderList('43')" + "/SO_2_SOITEM(SalesOrderID='43',ItemPosition='10')" + "?$select=ItemPosition,SalesOrderID", {
            SalesOrderID: "43",
            ItemPosition: "10"
        }).expectChange("ItemPosition", ["newPos"]).expectChange("ItemPosition", ["10"]);
        oCreatedItemContext = oItemBinding.create({
            SalesOrderID: "43",
            ItemPosition: "newPos"
        });
        return Promise.all([oCreatedItemContext.created(), that.waitForChanges(assert)]);
    }).then(function () {
        var oAction = oModel.bindContext("com.sap.gateway.default.zui5_epm_sample" + ".v0002.SalesOrder_Confirm(...)", oCreatedSOContext);
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('43')/com.sap.gateway.default.zui5_epm_sample" + ".v0002.SalesOrder_Confirm",
            payload: {}
        }, { SalesOrderID: "43" });
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oFunction = oModel.bindContext("com.sap.gateway.default.zui5_epm_" + "sample.v0002.SalesOrderLineItem_CheckAvailability(...)", oCreatedItemContext);
        that.expectRequest("SalesOrderList('43')/SO_2_SOITEM(SalesOrderID='43'" + ",ItemPosition='10')/com.sap.gateway.default.zui5_epm_" + "sample.v0002.SalesOrderLineItem_CheckAvailability()", { value: "5.0" });
        return Promise.all([
            oFunction.execute(),
            that.waitForChanges(assert)
        ]);
    });
});
["$direct", "$auto"].forEach(function (sGroupId) {
    QUnit.test("Header messages in response: " + sGroupId, function (assert) {
        var aMessages = [{
                code: "foo-42",
                longtextUrl: "../Messages(1)/LongText/$value",
                message: "text0",
                numericSeverity: 3
            }, {
                code: "foo-77",
                message: "text1",
                numericSeverity: 2,
                target: null
            }, {
                code: "foo-22",
                message: "text2",
                numericSeverity: 1,
                target: ""
            }, {
                code: "foo-13",
                message: "text3",
                numericSeverity: 1,
                target: "Name"
            }], oModel = createTeaBusiModel({ groupId: sGroupId }), sView = "<FlexBox binding=\"{path : '/TEAMS(\\'42\\')/TEAM_2_MANAGER',\tparameters : {custom : 'foo'}}\">\t<Text id=\"id\" text=\"{ID}\"/></FlexBox>";
        function withTransition(oObject) {
            return Object.assign({}, { transition: true }, oObject);
        }
        this.expectRequest("TEAMS('42')/TEAM_2_MANAGER?custom=foo", { ID: "23" }, {
            "sap-messages": JSON.stringify(aMessages)
        }).expectMessages([{
                code: "foo-42",
                descriptionUrl: sTeaBusi + "Messages(1)/LongText/$value",
                message: "text0",
                persistent: true,
                technicalDetails: {
                    originalMessage: withTransition(aMessages[0])
                },
                type: "Warning"
            }, {
                code: "foo-77",
                message: "text1",
                persistent: true,
                technicalDetails: {
                    originalMessage: withTransition(aMessages[1])
                },
                type: "Information"
            }, {
                code: "foo-22",
                message: "text2",
                persistent: true,
                target: "/TEAMS('42')/TEAM_2_MANAGER",
                technicalDetails: {
                    originalMessage: withTransition(aMessages[2])
                },
                type: "Success"
            }, {
                code: "foo-13",
                message: "text3",
                persistent: true,
                target: "/TEAMS('42')/TEAM_2_MANAGER/Name",
                technicalDetails: {
                    originalMessage: withTransition(aMessages[3])
                },
                type: "Success"
            }]).expectChange("id", "23");
        return this.createView(assert, sView, oModel);
    });
});
QUnit.test("List/Detail & messages", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{path : '/TEAMS', templateShareable : false}\">\t<Text id=\"text\" text=\"{Name}\"/></Table><Table id=\"detailTable\" items=\"{\t\t\tpath : 'TEAM_2_EMPLOYEES',\t\t\tparameters : {\t\t\t\t$select : '__CT__FAKE__Message/__FAKE__Messages'\t\t\t}\t\t}\">\t<Input id=\"Name\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", {
        value: [
            { Team_Id: "Team_01", Name: "Team 01" },
            { Team_Id: "Team_02", Name: "Team 02" }
        ]
    }).expectChange("text", ["Team 01", "Team 02"]).expectChange("Name", []);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("TEAMS('Team_01')/TEAM_2_EMPLOYEES" + "?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages&$skip=0&$top=100", {
            value: [{
                    ID: "1",
                    Name: "Peter Burke",
                    __CT__FAKE__Message: {
                        __FAKE__Messages: [{
                                code: "1",
                                message: "Text",
                                numericSeverity: 3,
                                target: "Name",
                                transition: false
                            }]
                    }
                }]
        }).expectChange("Name", ["Peter Burke"]).expectMessages([{
                code: "1",
                message: "Text",
                target: "/TEAMS('Team_01')/TEAM_2_EMPLOYEES('1')/Name",
                type: "Warning"
            }]);
        that.oView.byId("detailTable").setBindingContext(oTable.getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("detailTable").getItems()[0].getCells()[0], "Warning", "Text");
    }).then(function () {
        that.expectRequest("TEAMS('Team_02')/TEAM_2_EMPLOYEES" + "?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages&$skip=0&$top=100", {
            value: []
        }).expectChange("Name", []);
        that.oView.byId("detailTable").setBindingContext(oTable.getItems()[1].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("TEAMS('Team_02')/TEAM_2_EMPLOYEES" + "?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$orderby=Name&$skip=0&$top=100", {
            value: []
        }).expectMessages([]);
        that.oView.byId("detailTable").getBinding("items").sort(new Sorter("Name"));
        return that.waitForChanges(assert);
    });
});
QUnit.test("sap.ui.model.odata.v4.Context#refresh: caches and messages", function (assert) {
    var sView = "<Table id=\"tableSalesOrder\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrder\" text=\"{SalesOrderID}\"/></Table><Table id=\"tableSOItems\" items=\"{\t\t\tpath : 'SO_2_SOITEM',\t\t\tparameters : {\t\t\t\t$$ownRequest : true,\t\t\t\t$select : 'Messages'\t\t\t}}\">\t<Input id=\"note\" value=\"{Note}\"/></Table><!-- same paths in different control hierarchies --><Table id=\"tableSalesOrder2\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrder2\" text=\"{SalesOrderID}\"/></Table><!-- to determine which request is fired the second table requests only 5 entries --><Table id=\"tableSOItems2\" growing=\"true\" growingThreshold=\"5\" items=\"{SO_2_SOITEM}\">\t<Input id=\"note2\" value=\"{Note}\"/></Table>", oExpectedMessage0 = {
        code: "1",
        message: "Message0",
        target: "/SalesOrderList('0500000347')" + "/SO_2_SOITEM(SalesOrderID='0500000347',ItemPosition='0')/Note",
        type: "Warning"
    }, oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000347" },
            { SalesOrderID: "0500000348" }
        ]
    }).expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [
            { SalesOrderID: "0500000347" },
            { SalesOrderID: "0500000348" }
        ]
    }).expectChange("salesOrder", ["0500000347", "0500000348"]).expectChange("note", []).expectChange("salesOrder2", ["0500000347", "0500000348"]).expectChange("note2", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('0500000347')/SO_2_SOITEM" + "?$select=ItemPosition,Note,SalesOrderID&$skip=0&$top=5", {
            value: [
                { ItemPosition: "0", Note: "Test1", SalesOrderID: "0500000347" },
                { ItemPosition: "1", Note: "Test2", SalesOrderID: "0500000347" }
            ]
        }).expectRequest("SalesOrderList('0500000347')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "0",
                    Messages: [{
                            code: "1",
                            message: "Message0",
                            numericSeverity: 3,
                            target: "Note",
                            transition: false
                        }],
                    Note: "Test1",
                    SalesOrderID: "0500000347"
                }, {
                    ItemPosition: "1",
                    Messages: [],
                    Note: "Test2",
                    SalesOrderID: "0500000347"
                }]
        }).expectChange("note", ["Test1", "Test2"]).expectChange("note2", ["Test1", "Test2"]).expectMessages([oExpectedMessage0]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[0].getBindingContext());
        that.oView.byId("tableSOItems2").setBindingContext(that.oView.byId("tableSalesOrder2").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000348')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "0",
                    Messsages: [],
                    Note: "Test3",
                    SalesOrderID: "0500000348"
                }, {
                    ItemPosition: "1",
                    Messages: [{
                            code: "1",
                            message: "Message1",
                            numericSeverity: 3,
                            target: "Note",
                            transition: false
                        }],
                    Note: "Test4",
                    SalesOrderID: "0500000348"
                }]
        }).expectChange("note", ["Test3", "Test4"]).expectMessages([oExpectedMessage0, {
                code: "1",
                message: "Message1",
                target: "/SalesOrderList('0500000348')" + "/SO_2_SOITEM(SalesOrderID='0500000348',ItemPosition='1')/Note",
                type: "Warning"
            }]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[1].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[1].getCells()[0], "Warning", "Message1");
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000348')?$select=SalesOrderID", {
            SalesOrderID: "0500000348"
        }).expectRequest("SalesOrderList('0500000348')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "0",
                    Messages: [],
                    Note: "Test3a",
                    SalesOrderID: "0500000348"
                }, {
                    ItemPosition: "1",
                    Messages: [],
                    Note: "Test4a",
                    SalesOrderID: "0500000348"
                }]
        }).expectChange("note", ["Test3a", "Test4a"]).expectMessages([oExpectedMessage0]);
        that.oView.byId("tableSalesOrder").getItems()[1].getBindingContext().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[1].getCells()[0], "None", "");
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectChange("note", ["Test1", "Test2"]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectChange("note", []);
        that.oView.byId("tableSOItems").setBindingContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000347')?$select=SalesOrderID", {
            SalesOrderID: "0500000347"
        }).expectMessages([]);
        that.oView.byId("tableSalesOrder").getItems()[0].getBindingContext().refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "None", "");
    }).then(function () {
        that.expectRequest("SalesOrderList('0500000347')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "0",
                    Messages: [{
                            code: "1",
                            message: "Message0",
                            numericSeverity: 3,
                            target: "Note",
                            transition: false
                        }],
                    Note: "Test1",
                    SalesOrderID: "0500000347"
                }, {
                    ItemPosition: "1",
                    Messages: [],
                    Note: "Test2",
                    SalesOrderID: "0500000347"
                }]
        }).expectChange("note", ["Test1", "Test2"]).expectMessages([oExpectedMessage0]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectChange("note", ["Test3a", "Test4a"]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[1].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems").getItems()[0].getCells()[0], "None", "");
    }).then(function () {
        that.expectChange("note2", []);
        that.oView.byId("tableSOItems2").setBindingContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note2", ["Test1", "Test2"]);
        that.oView.byId("tableSOItems2").setBindingContext(that.oView.byId("tableSalesOrder2").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectChange("note", []);
        that.oView.byId("tableSOItems").setBindingContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
            value: [
                { SalesOrderID: "0500000347" },
                { SalesOrderID: "0500000348" }
            ]
        }).expectMessages([oExpectedMessage0]);
        that.oView.byId("tableSalesOrder").getBinding("items").refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("tableSOItems2").getItems()[0].getCells()[0], "Warning", "Message0");
    }).then(function () {
        that.expectChange("note", ["Test1", "Test2"]);
        that.oView.byId("tableSOItems").setBindingContext(that.oView.byId("tableSalesOrder").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("Context: Pending change in a hidden cache", function (assert) {
    var oContext0, oContext1, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"equipments\" items=\"{/Equipments}\">\t<Text id=\"id\" text=\"{ID}\"/></Table><FlexBox id=\"employeeDetails\"\t\tbinding=\"{path : 'EQUIPMENT_2_EMPLOYEE', parameters : {$$updateGroupId : 'foo'}}\">\t<Input id=\"employeeName\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("Equipments?$select=Category,ID&$skip=0&$top=100", {
        value: [
            { Category: "Electronics", ID: 23 },
            { Category: "Vehicle", ID: 42 }
        ]
    }).expectChange("id", ["23", "42"]).expectChange("employeeName");
    return this.createView(assert, sView, oModel).then(function () {
        oContext0 = that.oView.byId("equipments").getItems()[0].getBindingContext();
        that.expectRequest("Equipments(Category='Electronics',ID=23)/EQUIPMENT_2_EMPLOYEE" + "?$select=ID,Name", {
            ID: "1",
            Name: "John Smith"
        }).expectChange("employeeName", "John Smith");
        that.oView.byId("employeeDetails").setBindingContext(oContext0);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("employeeName", "Peter Burke");
        that.oView.byId("employeeName").getBinding("value").setValue("Peter Burke");
        assert.ok(oContext0.hasPendingChanges());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("employeeName", null);
        that.oView.byId("employeeDetails").setBindingContext(null);
        assert.notOk(that.oView.byId("employeeDetails").getObjectBinding().hasPendingChanges());
        assert.ok(oContext0.hasPendingChanges());
        assert.throws(function () {
            oContext0.refresh();
        }, /Cannot refresh entity due to pending changes:/);
        return that.waitForChanges(assert);
    }).then(function () {
        oContext1 = that.oView.byId("equipments").getItems()[1].getBindingContext();
        that.expectRequest("Equipments(Category='Vehicle',ID=42)/EQUIPMENT_2_EMPLOYEE" + "?$select=ID,Name", {
            ID: "2",
            Name: "Frederic Fall"
        }).expectChange("employeeName", "Frederic Fall");
        that.oView.byId("employeeDetails").setBindingContext(oContext1);
        assert.ok(that.oView.byId("equipments").getBinding("items").hasPendingChanges());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Equipments(Category='Vehicle',ID=42)?$select=Category,ID", {
            Category: "Vehicle",
            ID: 42
        }).expectRequest("Equipments(Category='Vehicle',ID=42)/EQUIPMENT_2_EMPLOYEE" + "?$select=ID,Name", {
            ID: "2",
            Name: "Frederic Fall"
        });
        oContext1.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("employeeName", "Peter Burke");
        that.oView.byId("employeeDetails").setBindingContext(oContext0);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Delete an entity with messages from an ODataListBinding", function (assert) {
    var oDeleteMessage = {
        code: "occupied",
        message: "Cannot delete occupied worker",
        persistent: true,
        target: "/EMPLOYEES('1')/STATUS",
        technical: true,
        type: "Error"
    }, oModel = createTeaBusiModel({ autoExpandSelect: true, groupId: "$direct" }), oReadMessage = {
        code: "1",
        message: "Text",
        target: "/EMPLOYEES('1')/Name",
        type: "Warning"
    }, oTable, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', \t\tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t<Input id=\"name\" value=\"{Name}\"/>\t<Input id=\"status\" value=\"{STATUS}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,Name,STATUS,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=100", {
        value: [{
                ID: "1",
                Name: "Jonathan Smith",
                STATUS: "Occupied",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "Text",
                            numericSeverity: 3,
                            target: "Name",
                            transition: false
                        }]
                }
            }, {
                ID: "2",
                Name: "Frederic Fall",
                STATUS: "Available",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }]
    }).expectChange("name", ["Jonathan Smith", "Frederic Fall"]).expectChange("status", ["Occupied", "Available"]).expectMessages([oReadMessage]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Warning", "Text");
    }).then(function () {
        var oContext = oTable.getItems()[0].getBindingContext(), oError = createError({
            code: "occupied",
            message: "Cannot delete occupied worker",
            target: "STATUS"
        });
        that.oLogMock.expects("error").withExactArgs("Failed to delete /EMPLOYEES('1')[0]", sinon.match(oError.message), "sap.ui.model.odata.v4.Context");
        that.expectRequest({ method: "DELETE", url: "EMPLOYEES('1')" }, oError).expectMessages([oReadMessage, oDeleteMessage]);
        return Promise.all([
            oContext.delete().then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0, oError);
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[1], "Error", "Cannot delete occupied worker");
    }).then(function () {
        var oContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest({
            method: "DELETE",
            url: "EMPLOYEES('1')"
        }).expectChange("name", ["Frederic Fall"]).expectChange("status", ["Available"]).expectMessages([oDeleteMessage]);
        return Promise.all([
            oContext.delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Delete an entity with messages from an ODataContextBinding", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{path : '/EMPLOYEES(\\'2\\')', \tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t<Input id=\"text\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('2')?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages", {
        ID: "1",
        Name: "Jonathan Smith",
        __CT__FAKE__Message: {
            __FAKE__Messages: [{
                    code: "1",
                    message: "Text",
                    numericSeverity: 3,
                    target: "Name",
                    transition: false
                }]
        }
    }).expectChange("text", "Jonathan Smith").expectMessages([{
            code: "1",
            message: "Text",
            target: "/EMPLOYEES('2')/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "text", "Warning", "Text");
    }).then(function () {
        var oContext = that.oView.byId("form").getBindingContext();
        that.expectRequest({
            method: "DELETE",
            url: "EMPLOYEES('2')"
        }).expectChange("text", null).expectMessages([]);
        return Promise.all([
            oContext.delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Delete an entity with messages from an relative ODLB w/o cache", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<FlexBox id=\"detail\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"Team_Id\" text=\"{Team_Id}\"/>\t<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', \t\t\tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t\t<Input id=\"name\" value=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$select=Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=ID,Name," + "__CT__FAKE__Message/__FAKE__Messages)", {
        Team_Id: "TEAM_01",
        TEAM_2_EMPLOYEES: [{
                ID: "1",
                Name: "Jonathan Smith",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "Text",
                            numericSeverity: 3,
                            target: "Name",
                            transition: false
                        }]
                }
            }, {
                ID: "2",
                Name: "Frederic Fall",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }]
    }).expectChange("Team_Id", "TEAM_01").expectChange("name", ["Jonathan Smith", "Frederic Fall"]).expectMessages([{
            code: "1",
            message: "Text",
            target: "/TEAMS('TEAM_01')/TEAM_2_EMPLOYEES('1')/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        return that.checkValueState(assert, oTable.getItems()[0].getCells()[0], "Warning", "Text");
    }).then(function () {
        var oContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest({
            method: "DELETE",
            url: "EMPLOYEES('1')"
        }).expectChange("name", ["Frederic Fall"]).expectMessages([]);
        return Promise.all([
            oContext.delete(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Delete entity from rel. ODLB with pending changes in siblings", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), oTable, sView = "<FlexBox id=\"detail\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"Team_Id\" text=\"{Team_Id}\"/>\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')?$select=Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
        Team_Id: "TEAM_01",
        TEAM_2_EMPLOYEES: [{
                ID: "1",
                Name: "Jonathan Smith"
            }, {
                ID: "2",
                Name: "Frederic Fall"
            }]
    }).expectChange("Team_Id", "TEAM_01").expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("name", ["John Doe", "Jonathan Smith", "Frederic Fall"]);
        oTable.getBinding("items").create({ Name: "John Doe" });
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "EMPLOYEES('1')"
        }).expectChange("name", [, "Frederic Fall"]);
        return Promise.all([
            oTable.getItems()[1].getBindingContext().delete("$auto"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Delete removes dependent caches", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox id=\"detail\" binding=\"\">\t<Text id=\"Team_Id\" text=\"{Team_Id}\"/>\t<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("Team_Id").expectChange("name", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("TEAMS('TEAM_01')?$select=Team_Id", {
            Team_Id: "TEAM_01"
        }).expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name" + "&$skip=0&$top=100", {
            value: [{
                    ID: "1",
                    Name: "Jonathan Smith"
                }, {
                    ID: "2",
                    Name: "Frederic Fall"
                }]
        }).expectChange("Team_Id", "TEAM_01").expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
        that.oView.byId("detail").setBindingContext(that.oModel.bindContext("/TEAMS('TEAM_01')").getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "TEAMS('TEAM_01')"
        }).expectChange("Team_Id", null);
        return Promise.all([
            that.oView.byId("detail").getBindingContext().delete("$auto"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oError1 = new Error("404 Not Found"), oError2 = new Error("404 Not Found");
        that.oLogMock.expects("error").withExactArgs("Failed to read path /TEAMS('TEAM_01')/Team_Id", sinon.match.string, "sap.ui.model.odata.v4.ODataPropertyBinding");
        that.oLogMock.expects("error").withExactArgs("Failed to read path /TEAMS('TEAM_01')", sinon.match.string, "sap.ui.model.odata.v4.ODataContextBinding");
        that.oLogMock.expects("error").withExactArgs("Failed to get contexts for " + sTeaBusi + "TEAMS('TEAM_01')/TEAM_2_EMPLOYEES with start index 0 and length 100", sinon.match.string, "sap.ui.model.odata.v4.ODataListBinding");
        that.expectRequest("TEAMS('TEAM_01')?$select=Team_Id", oError1).expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name" + "&$skip=0&$top=100", oError2).expectMessages([{
                message: "404 Not Found",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "404 Not Found",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oView.byId("detail").setBindingContext(that.oModel.bindContext("/TEAMS('TEAM_01')").getBoundContext());
        return that.waitForChanges(assert);
    });
});
QUnit.test("Delete an entity with messages from a relative ODCB w/o cache", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Equipments(Category='foo',ID=815)}\">\t<FlexBox id=\"form\" binding=\"{path : 'EQUIPMENT_2_EMPLOYEE', \t\tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Input id=\"text\" value=\"{Name}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Equipments(Category='foo',ID=815)?$select=Category,ID" + "&$expand=EQUIPMENT_2_EMPLOYEE($select=ID,Name," + "__CT__FAKE__Message/__FAKE__Messages)", {
        Category: "foo",
        ID: 815,
        EQUIPMENT_2_EMPLOYEE: {
            ID: "1",
            Name: "Jonathan Smith",
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "1",
                        message: "Text",
                        numericSeverity: 3,
                        target: "Name",
                        transition: false
                    }]
            }
        }
    }).expectChange("text", "Jonathan Smith").expectMessages([{
            code: "1",
            message: "Text",
            target: "/Equipments(Category='foo',ID=815)/EQUIPMENT_2_EMPLOYEE/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        return that.checkValueState(assert, "text", "Warning", "Text");
    }).then(function () {
        var oContext = that.oView.byId("form").getBindingContext();
        that.expectRequest({
            method: "DELETE",
            url: "EMPLOYEES('1')"
        }).expectChange("text", null).expectMessages([]);
        return oContext.delete().then(function () {
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("Update property (in absolute binding), getting bound messages", function (assert) {
    var oBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{path : '/EMPLOYEES(\\'1\\')', \t\tparameters : {\t\t\t$select : '__CT__FAKE__Message/__FAKE__Messages',\t\t\t$$updateGroupId : 'foo'\t\t}}\" id=\"form\">\t<Text id=\"id\" text=\"{ID}\"/>\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages", {
        ID: "1",
        Name: "Jonathan Smith",
        __CT__FAKE__Message: { __FAKE__Messages: [] }
    }).expectChange("id", "1").expectChange("name", "Jonathan Smith");
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("name").getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            payload: { Name: "" }
        }, {
            ID: "1",
            Name: "",
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "1",
                        message: "Enter a name",
                        numericSeverity: 3,
                        target: "Name",
                        transition: false
                    }]
            }
        }).expectChange("name", "").expectMessages([{
                code: "1",
                message: "Enter a name",
                target: "/EMPLOYEES('1')/Name",
                type: "Warning"
            }]);
        oBinding.setValue("");
        return Promise.all([
            oModel.submitBatch("foo"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "name", "Warning", "Enter a name");
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            payload: { Name: "Hugo" }
        }, {
            ID: "1",
            Name: "Hugo",
            __CT__FAKE__Message: { __FAKE__Messages: [] }
        }).expectChange("name", "Hugo").expectMessages([]);
        oBinding.setValue("Hugo");
        return Promise.all([
            oModel.submitBatch("foo"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "name", "None", "");
    });
});
QUnit.test("Update property (in relative binding), getting bound messages", function (assert) {
    var oBinding, oContext, oModel = createTeaBusiModel({ autoExpandSelect: true }), sPathToMessages = "TEAM_2_EMPLOYEES('1')/__CT__FAKE__Message/__FAKE__Messages", sView = "<FlexBox binding=\"{path : '/TEAMS(\\'TEAM_01\\')', \t\tparameters : {\t\t\t$expand : {\t\t\t\t'TEAM_2_EMPLOYEES' : {\t\t\t\t\t$select : '__CT__FAKE__Message/__FAKE__Messages'\t\t\t\t}\t\t\t},\t\t\t$$updateGroupId : 'foo'\t\t}}\" id=\"form\">\t<Text id=\"teamId\" text=\"{Team_Id}\"/>\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Input id=\"name\" value=\"{Name}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('TEAM_01')" + "?$expand=TEAM_2_EMPLOYEES($select=ID,Name,__CT__FAKE__Message/__FAKE__Messages)" + "&$select=Team_Id", {
        Team_Id: "TEAM_01",
        TEAM_2_EMPLOYEES: [{
                ID: "1",
                Name: "Jonathan Smith",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }]
    }).expectChange("teamId", "TEAM_01").expectChange("name", ["Jonathan Smith"]).expectMessages([]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value");
        oContext = that.oView.byId("form").getBindingContext();
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            payload: { Name: "" }
        }, {
            ID: "1",
            Name: "",
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "1",
                        message: "Enter a name",
                        numericSeverity: 3,
                        target: "Name",
                        transition: false
                    }]
            }
        }).expectChange("name", [""]).expectMessages([{
                code: "1",
                message: "Enter a name",
                target: "/TEAMS('TEAM_01')/TEAM_2_EMPLOYEES('1')/Name",
                type: "Warning"
            }]);
        assert.strictEqual(oContext.getObject(sPathToMessages).length, 0);
        assert.strictEqual(oContext.getObject(sPathToMessages + "/$count"), 0);
        oBinding.setValue("");
        return Promise.all([
            oModel.submitBatch("foo"),
            that.waitForChanges(assert)
        ]).then(function () {
            assert.strictEqual(oContext.getObject(sPathToMessages).length, 1);
            assert.strictEqual(oContext.getObject(sPathToMessages)[0].message, "Enter a name");
            assert.strictEqual(oContext.getObject(sPathToMessages + "/$count"), 1);
            return that.checkValueState(assert, that.oView.byId("table").getItems()[0].getCells()[0], "Warning", "Enter a name");
        });
    });
});
QUnit.test("Update property (in collection), getting bound messages", function (assert) {
    var oBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', \t\tparameters : {\t\t\t$select : '__CT__FAKE__Message/__FAKE__Messages',\t\t\t$$updateGroupId : 'foo'\t\t}}\">\t<Input id=\"name\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages" + "&$skip=0&$top=100", {
        value: [{
                ID: "1",
                Name: "Jonathan Smith",
                __CT__FAKE__Message: { __FAKE__Messages: [] }
            }]
    }).expectChange("name", ["Jonathan Smith"]).expectMessages([]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getItems()[0].getCells()[0].getBinding("value");
        that.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('1')",
            payload: { Name: "" }
        }, {
            ID: "1",
            Name: "",
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "1",
                        message: "Enter a name",
                        numericSeverity: 3,
                        target: "Name",
                        transition: false
                    }]
            }
        }).expectChange("name", [""]).expectMessages([{
                code: "1",
                message: "Enter a name",
                target: "/EMPLOYEES('1')/Name",
                type: "Warning"
            }]);
        oBinding.setValue("");
        return Promise.all([
            oModel.submitBatch("foo"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, that.oView.byId("table").getItems()[0].getCells()[0], "Warning", "Enter a name");
    });
});
QUnit.test("$$patchWithoutSideEffects, then requestSideEffects", function (assert) {
    var oModel = createModel(sSalesOrderService + "?sap-client=123", {
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), sView = "<FlexBox binding=\"{\t\t\tpath : '/SalesOrderList(\\'42\\')',\t\t\tparameters : {$$patchWithoutSideEffects : true}\t\t}\"\t\tid=\"form\">\t<Input id=\"netAmount\" value=\"{NetAmount}\"/>\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?sap-client=123" + "&$select=GrossAmount,NetAmount,SalesOrderID", {
        "@odata.etag": "ETag0",
        GrossAmount: "119.00",
        NetAmount: "100.00",
        SalesOrderID: "42"
    }).expectChange("netAmount", "100.00").expectChange("grossAmount", "119.00");
    return this.createView(assert, sView, oModel).then(function () {
        var oPromise;
        that.oLogMock.expects("error").withArgs("Failed to update path /SalesOrderList('42')/NetAmount");
        that.oLogMock.expects("error").withArgs("Failed to request side effects");
        that.expectChange("netAmount", "-1.00").expectRequest({
            batchNo: 1,
            method: "PATCH",
            url: "SalesOrderList('42')?sap-client=123",
            headers: { "If-Match": "ETag0", Prefer: "return=minimal" },
            payload: { NetAmount: "-1" }
        }, createErrorInsideBatch({ message: "Value -1 not allowed" })).expectRequest({
            batchNo: 1,
            url: "SalesOrderList('42')?sap-client=123&$select=GrossAmount"
        }).expectMessages([{
                code: "CODE",
                message: "Value -1 not allowed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oView.byId("netAmount").getBinding("value").setValue("-1");
        oPromise = that.oView.byId("form").getBindingContext().requestSideEffects([{
                $PropertyPath: "GrossAmount"
            }]).then(mustFail(assert), function (oError0) {
            assert.strictEqual(oError0.message, "HTTP request was not processed because the previous request failed");
        });
        return Promise.all([
            oPromise,
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        sap.ui.getCore().getMessageManager().removeAllMessages();
        that.expectMessages([]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("netAmount", "200.00").expectRequest({
            batchNo: 2,
            method: "PATCH",
            url: "SalesOrderList('42')?sap-client=123",
            headers: { "If-Match": "ETag0", Prefer: "return=minimal" },
            payload: { NetAmount: "200" }
        }, {
            "@odata.etag": "ETag1",
            GrossAmount: "238.00",
            NetAmount: "200.00",
            SalesOrderID: "42"
        });
        that.oView.byId("netAmount").getBinding("value").setValue("200");
        return Promise.all([
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oPromise;
        that.expectChange("netAmount", "0.00");
        that.oView.byId("netAmount").getBinding("value").setValue("0");
        oPromise = that.oView.byId("form").getBindingContext().requestSideEffects([{
                $PropertyPath: "NetAmount"
            }, {
                $PropertyPath: "GrossAmount"
            }, {
                $PropertyPath: "TaxAmount"
            }]).then(function (vResult) {
            assert.strictEqual(vResult, undefined);
        });
        that.expectRequest({
            batchNo: 3,
            method: "PATCH",
            url: "SalesOrderList('42')?sap-client=123",
            headers: { "If-Match": "ETag1", Prefer: "return=minimal" },
            payload: { NetAmount: "0" }
        }, {
            GrossAmount: "0.00",
            NetAmount: "0.00",
            Messages: [{
                    code: "n/a",
                    message: "n/a",
                    numericSeverity: 3,
                    target: "NetAmount"
                }],
            SalesOrderID: "42"
        }).expectRequest({
            batchNo: 3,
            url: "SalesOrderList('42')?sap-client=123&$select=GrossAmount,NetAmount"
        }, {
            GrossAmount: "0.00",
            NetAmount: "0.00",
            Messages: [{
                    code: "23",
                    message: "Enter a minimum amount of 1",
                    numericSeverity: 3,
                    target: "NetAmount"
                }]
        }).expectChange("grossAmount", "0.00").expectChange("netAmount", "0.00").expectMessages([{
                code: "23",
                message: "Enter a minimum amount of 1",
                target: "/SalesOrderList('42')/NetAmount",
                type: "Warning"
            }]);
        return Promise.all([
            oModel.submitBatch("update"),
            oPromise,
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "TaxAmount"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "netAmount", "Warning", "Enter a minimum amount of 1");
    });
});
QUnit.test("$$patchWithoutSideEffects in list binding and inherited", function (assert) {
    var oModel = createModel(sSalesOrderService, { autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{path : '/SalesOrderList',\t\tparameters : {$$patchWithoutSideEffects : true}}\">\t<Input id=\"listNote\" value=\"{Note}\"/></Table><FlexBox id=\"form\" binding=\"{path : '', parameters : {$$ownRequest : true}}\">\t<Input id=\"formNote\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                "@odata.etag": "ETag0",
                Note: "Note",
                SalesOrderID: "42"
            }]
    }).expectChange("listNote", ["Note"]).expectChange("formNote");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("listNote", ["Note (entered)"]).expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag0", Prefer: "return=minimal" },
            payload: { Note: "Note (entered)" }
        }, {
            "@odata.etag": "ETag1",
            Note: "Note (from server)",
            SalesOrderID: "42"
        });
        oTable.getItems()[0].getCells()[0].getBinding("value").setValue("Note (entered)");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
            "@odata.etag": "ETag1",
            Note: "Note (from server)",
            SalesOrderID: "42"
        }).expectChange("formNote", "Note (from server)");
        that.oView.byId("form").setBindingContext(oTable.getBinding("items").getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("formNote", "Note (entered)").expectRequest({
            method: "PATCH",
            url: "SalesOrderList('42')",
            headers: { "If-Match": "ETag1", Prefer: "return=minimal" },
            payload: { Note: "Note (entered)" }
        }, {
            "@odata.etag": "ETag2",
            Note: "Note (from server)",
            SalesOrderID: "42"
        });
        that.oView.byId("formNote").getBinding("value").setValue("Note (entered)");
        return that.waitForChanges(assert);
    });
});
QUnit.test("requestSideEffects with navigation properties", function (assert) {
    var oModel = createSpecialCasesModel({
        autoExpandSelect: true,
        groupId: "$direct",
        updateGroupId: "update"
    }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Input id=\"name\" value=\"{Name}\"/>\t<Text id=\"inProcessByUser\" text=\"{DraftAdministrativeData/InProcessByUser}\"/>\t<Text binding=\"{DraftAdministrativeData}\" id=\"inProcessByUser2\" text=\"{InProcessByUser}\"/></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
        "@odata.etag": "ETag0",
        ArtistID: "42",
        DraftAdministrativeData: {
            DraftID: "23",
            InProcessByUser: "foo"
        },
        IsActiveEntity: true,
        Name: "Prince"
    }).expectChange("name", "Prince").expectChange("inProcessByUser", "foo").expectChange("inProcessByUser2", "foo");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("name", "TAFKAP");
        that.oView.byId("name").getBinding("value").setValue("TAFKAP");
        that.expectRequest({
            batchNo: 1,
            method: "PATCH",
            url: "Artists(ArtistID='42',IsActiveEntity=true)",
            headers: { "If-Match": "ETag0" },
            payload: { Name: "TAFKAP" }
        }, {}).expectRequest({
            batchNo: 1,
            url: "Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=DraftAdministrativeData" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)"
        }, {
            DraftAdministrativeData: {
                DraftID: "23",
                InProcessByUser: "bar"
            }
        }).expectChange("inProcessByUser", "bar").expectChange("inProcessByUser2", "bar");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "DraftAdministrativeData/InProcessByUser"
                }]),
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects with $NavigationPropertyPath", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{}\" id=\"section\">\t\t<Text binding=\"{path : 'DraftAdministrativeData', parameters : {$$ownRequest : true}}\"\t\t\tid=\"inProcessByUser\" text=\"{InProcessByUser}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
        DraftID: "23",
        InProcessByUser: "foo"
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42").expectChange("inProcessByUser", "foo");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity", {
            ArtistID: "42",
            IsActiveEntity: true
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
            DraftID: "23",
            InProcessByUser: "bar"
        }).expectChange("inProcessByUser", "bar");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $NavigationPropertyPath: ""
                }, {
                    $NavigationPropertyPath: "DraftAdministrativeData"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
            DraftID: "23*",
            InProcessByUser: "foo"
        }).expectChange("inProcessByUser", "foo");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $NavigationPropertyPath: "DraftAdministrativeData"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects with $filter in $expand", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{path : '/SalesOrderList(\\'1\\')',\t\tparameters : {$expand : {SO_2_SOITEM : {$filter : 'Note.contains(\\' \u20AC\\''}}}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Table items=\"{SO_2_SOITEM}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')" + "?$expand=SO_2_SOITEM($filter=Note.contains('%20%E2%82%AC')", {
        SalesOrderID: "1",
        SO_2_SOITEM: [
            { ItemPosition: "0010", Note: "Note \u20AC", SalesOrderID: "1" }
        ]
    }).expectChange("id", "1").expectChange("note", ["Note \u20AC"]);
    return this.createView(assert, sView, createSalesOrdersModel()).then(function () {
        that.expectRequest("SalesOrderList('1')" + "?$expand=SO_2_SOITEM($filter=Note.contains('%20%E2%82%AC')" + "&$select=SO_2_SOITEM", {
            SO_2_SOITEM: [
                { ItemPosition: "0010", Note: "Note \u20AC*", SalesOrderID: "1" }
            ]
        }).expectChange("note", ["Note \u20AC*"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects(["SO_2_SOITEM"]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects delivers a new entity", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('1')}\" id=\"form\">\t<Input id=\"company\" value=\"{SO_2_BP/CompanyName}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
        SalesOrderID: "1",
        SO_2_BP: null
    }).expectChange("company", null);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=SO_2_BP" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
            SO_2_BP: {
                "@odata.etag": "ETag",
                BusinessPartnerID: "42",
                CompanyName: "Company"
            }
        }).expectChange("company", "Company");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects(["SO_2_BP"]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("company", "changed").expectRequest({
            headers: { "If-Match": "ETag" },
            method: "PATCH",
            payload: { CompanyName: "changed" },
            url: "BusinessPartnerList('42')"
        });
        that.oView.byId("company").getBinding("value").setValue("changed");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=SO_2_BP" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
            SO_2_BP: null
        }).expectChange("company", null);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects(["SO_2_BP"]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.skip("requestSideEffects unexpectedly deletes an entity", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('1')}\" id=\"form\">\t<Input id=\"company\" value=\"{SO_2_BP/CompanyName}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
        SalesOrderID: "1",
        SO_2_BP: {
            BusinessPartnerID: "42",
            CompanyName: "Company"
        }
    }).expectChange("company", "Company");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=SO_2_BP" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
            SO_2_BP: null
        });
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "SO_2_BP/CompanyName"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: dependent bindings #1", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{}\" id=\"section\">\t\t<Text binding=\"{\t\t\t\tpath : 'DraftAdministrativeData',\t\t\t\tparameters : {$$ownRequest : true}\t\t\t}\" id=\"inProcessByUser\" text=\"{InProcessByUser}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
        DraftID: "23",
        InProcessByUser: "foo"
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42").expectChange("inProcessByUser", "foo");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
            DraftID: "23",
            InProcessByUser: "bar"
        }).expectChange("inProcessByUser", "bar");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "DraftAdministrativeData/InProcessByUser"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: dependent bindings #2", function (assert) {
    var sDraftAdministrativeData = "Artists(ArtistID='42',IsActiveEntity=true)" + "/BestFriend/BestFriend/DraftAdministrativeData", oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\" id=\"section\">\t\t<FlexBox binding=\"{BestFriend}\" id=\"section2\">\t\t\t<Text binding=\"{\t\t\t\t\tpath : 'DraftAdministrativeData',\t\t\t\t\tparameters : {$$ownRequest : true}\t\t\t\t}\" id=\"inProcessByUser\" text=\"{InProcessByUser}\"/>\t\t</FlexBox>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest(sDraftAdministrativeData + "?$select=DraftID,InProcessByUser", {
        DraftID: "23",
        InProcessByUser: "foo"
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=BestFriend($select=ArtistID,IsActiveEntity))", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42").expectChange("inProcessByUser", "foo");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest(sDraftAdministrativeData + "?$select=DraftID,InProcessByUser", {
            DraftID: "23",
            InProcessByUser: "bar"
        }).expectChange("inProcessByUser", "bar");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestFriend/BestFriend/DraftAdministrativeData/InProcessByUser"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: dependent bindings #3", function (assert) {
    var sDraftAdministrativeData = "Artists(ArtistID='42',IsActiveEntity=true)" + "/BestFriend/_Friend(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData", oModel = createSpecialCasesModel({ autoExpandSelect: false }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\" id=\"section\">\t\t<FlexBox binding=\"{_Friend(ArtistID='42',IsActiveEntity=true)}\" id=\"section2\">\t\t\t<Text binding=\"{\t\t\t\t\tpath : 'DraftAdministrativeData',\t\t\t\t\tparameters : {$$ownRequest : true}\t\t\t\t}\" id=\"inProcessByUser\" text=\"{InProcessByUser}\"/>\t\t</FlexBox>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectRequest(sDraftAdministrativeData, {
        DraftID: "23",
        InProcessByUser: "foo"
    }).expectChange("id", "42").expectChange("inProcessByUser", "foo");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest(sDraftAdministrativeData + "?$select=DraftID,InProcessByUser", {
            DraftID: "23",
            InProcessByUser: "bar"
        }).expectChange("inProcessByUser", "bar");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestFriend/_Friend/DraftAdministrativeData/InProcessByUser"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
[false, true].forEach(function (bGrowing) {
    var sTitle = "requestSideEffects with collection-valued navigation; growing = " + bGrowing;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\" id=\"section\">\t\t<Table growing=\"" + bGrowing + "\" id=\"table\" items=\"{_Publication}\">\t\t\t<Text id=\"price\" text=\"{Price}\"/>\t\t</Table>\t</FlexBox></FlexBox>", that = this;
        this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=_Publication($select=Price,PublicationID))", {
            ArtistID: "42",
            BestFriend: {
                ArtistID: "23",
                IsActiveEntity: true,
                _Publication: [{
                        Price: "9.99",
                        PublicationID: "42-0"
                    }]
            },
            IsActiveEntity: true
        }).expectChange("id", "42").expectChange("price", ["9.99"]);
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=_Publication($select=Price,PublicationID))", {
                BestFriend: {
                    ArtistID: "23",
                    IsActiveEntity: true,
                    _Publication: [{
                            Price: "7.77",
                            PublicationID: "42-0"
                        }]
                }
            }).expectChange("price", ["7.77"]);
            return Promise.all([
                that.oView.byId("form").getBindingContext().requestSideEffects([{
                        $NavigationPropertyPath: "BestFriend/_Publication"
                    }]),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("requestSideEffects for a single property of a collection", function (assert) {
    var oModel = createModel("/special/cases/?sap-client=123", { autoExpandSelect: true }), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\" id=\"section\">\t\t<t:Table firstVisibleRow=\"1\" id=\"table\"\t\t\t\trows=\"{path : '_Publication', parameters : {$count : true,\t\t\t\t\t$filter : 'CurrencyCode eq \\'EUR\\'', $orderby : 'PublicationID',\t\t\t\t\t$$ownRequest : true}}\"\t\t\t\tthreshold=\"0\" visibleRowCount=\"2\">\t\t\t<Input id=\"price\" value=\"{Price}\"/>\t\t\t<Text id=\"currency\" text=\"{CurrencyCode}\"/>\t\t\t<Text id=\"inProcessByUser\" text=\"{DraftAdministrativeData/InProcessByUser}\"/>\t\t</t:Table>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?sap-client=123&$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity)", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?sap-client=123&$count=true&$filter=CurrencyCode eq 'EUR'" + "&$orderby=PublicationID&$select=CurrencyCode,Price,PublicationID" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)" + "&$skip=1&$top=2", {
        "@odata.count": "10",
        value: [{
                CurrencyCode: "EUR",
                DraftAdministrativeData: {
                    DraftID: "42-1-A",
                    InProcessByUser: "Charlie Brown"
                },
                Price: "9.11",
                PublicationID: "42-1"
            }, {
                CurrencyCode: "EUR",
                DraftAdministrativeData: {
                    DraftID: "42-2-A",
                    InProcessByUser: "Schroeder"
                },
                Price: "9.22",
                PublicationID: "42-2"
            }]
    }).expectChange("count").expectChange("id", "42").expectChange("price", [, "9.11", "9.22"]).expectChange("currency", [, "EUR", "EUR"]).expectChange("inProcessByUser", [, "Charlie Brown", "Schroeder"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("count", "10");
        that.oView.byId("count").setBindingContext(oTable.getBinding("rows").getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?sap-client=123" + "&$filter=PublicationID eq '42-1' or PublicationID eq '42-2'" + "&$select=Price,PublicationID" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)&$top=2", {
            value: [{
                    DraftAdministrativeData: {
                        DraftID: "42-1-A",
                        InProcessByUser: "Jane Doe"
                    },
                    Price: "7.11",
                    PublicationID: "42-1"
                }, {
                    DraftAdministrativeData: {
                        DraftID: "42-2-A",
                        InProcessByUser: "John Doe"
                    },
                    Messages: [{
                            code: "23",
                            message: "This looks pretty cheap now",
                            numericSeverity: 2,
                            target: "Price"
                        }],
                    Price: "7.22",
                    PublicationID: "42-2"
                }]
        }).expectChange("price", [, "7.11", "7.22"]).expectChange("inProcessByUser", [, "Jane Doe", "John Doe"]).expectMessages([{
                code: "23",
                message: "This looks pretty cheap now",
                target: "/Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-2')/Price",
                type: "Information"
            }]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestFriend/_Publication/Price"
                }, {
                    $PropertyPath: "BestFriend/_Publication/DraftAdministrativeData/InProcessByUser"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, oTable.getRows()[1].getCells()[0], "Information", "This looks pretty cheap now");
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?sap-client=123&$count=true&$filter=CurrencyCode eq 'EUR'" + "&$orderby=PublicationID&$select=CurrencyCode,Price,PublicationID" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)" + "&$skip=7&$top=2", {
            "@odata.count": "10",
            value: [{
                    CurrencyCode: "EUR",
                    DraftAdministrativeData: null,
                    Price: "7.77",
                    PublicationID: "42-7"
                }, {
                    CurrencyCode: "EUR",
                    DraftAdministrativeData: null,
                    Price: "7.88",
                    PublicationID: "42-8"
                }]
        }).expectChange("price", null, null).expectChange("price", null, null).expectChange("currency", null, null).expectChange("currency", null, null).expectChange("inProcessByUser", null, null).expectChange("inProcessByUser", null, null).expectChange("price", [, , , , , , , "7.77", "7.88"]).expectChange("currency", [, , , , , , , "EUR", "EUR"]);
        oTable.setFirstVisibleRow(7);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?sap-client=123" + "&$filter=PublicationID eq '42-7' or PublicationID eq '42-8'" + "&$select=Price,PublicationID&$top=2", {
            value: [{
                    Price: "5.88",
                    PublicationID: "42-8"
                }, {
                    Price: "5.77",
                    PublicationID: "42-7"
                }]
        }).expectChange("price", [, , , , , , , "5.77", "5.88"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestFriend/_Publication/Price"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?sap-client=123&$count=true&$filter=CurrencyCode eq 'EUR'" + "&$orderby=PublicationID&$select=CurrencyCode,Price,PublicationID" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)" + "&$skip=1&$top=2", {
            "@odata.count": "10",
            value: [{
                    CurrencyCode: "EUR",
                    DraftAdministrativeData: {
                        DraftID: "42-1-A",
                        InProcessByUser: "Charlie Brown"
                    },
                    Price: "5.11",
                    PublicationID: "42-1"
                }, {
                    CurrencyCode: "EUR",
                    DraftAdministrativeData: {
                        DraftID: "42-2-A",
                        InProcessByUser: "Schroeder"
                    },
                    Price: "5.22",
                    PublicationID: "42-2"
                }]
        }).expectChange("price", [, "5.11", "5.22"]).expectChange("inProcessByUser", [, "Charlie Brown", "Schroeder"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    });
});
QUnit.test("requestSideEffects: collection & list/detail", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), oTable, oTableBinding, sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\" id=\"section\">\t\t<Table id=\"table\" items=\"{path : '_Publication', parameters : {$$ownRequest : true}}\">\t\t\t<Text id=\"price\" text=\"{Price}\"/>\t\t\t<Text id=\"currency\" text=\"{CurrencyCode}\"/>\t\t</Table>\t</FlexBox></FlexBox><FlexBox binding=\"{path : '', parameters : {$$ownRequest : true}}\" id=\"detail\">\t<Text id=\"priceDetail\" text=\"{Price}\"/>\t<Text id=\"currencyDetail\" text=\"{CurrencyCode}\"/>\t<Text id=\"inProcessByUser\" text=\"{DraftAdministrativeData/InProcessByUser}\"/></FlexBox><Table id=\"detailTable\" items=\"{_Artist/_Friend}\">\t<Text id=\"idDetail\" text=\"{ArtistID}\"/>\t<Text id=\"nameDetail\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?$select=CurrencyCode,Price,PublicationID&$skip=0&$top=100", {
        value: [{
                CurrencyCode: "EUR",
                Price: "9.00",
                PublicationID: "42-0"
            }, {
                CurrencyCode: "EUR",
                Price: "9.11",
                PublicationID: "42-1"
            }]
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity)", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42").expectChange("price", ["9", "9.11"]).expectChange("currency", ["EUR", "EUR"]).expectChange("priceDetail").expectChange("currencyDetail").expectChange("inProcessByUser").expectChange("idDetail", []).expectChange("nameDetail", []);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-0')?$select=CurrencyCode,Price,PublicationID" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
            CurrencyCode: "EUR",
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: "JOHNDOE"
            },
            Price: "9.00",
            PublicationID: "42-0"
        }).expectChange("priceDetail", "9").expectChange("currencyDetail", "EUR").expectChange("inProcessByUser", "JOHNDOE");
        that.oView.byId("detail").setBindingContext(oTableBinding.getCurrentContexts()[0]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?$select=Price,PublicationID" + "&$filter=PublicationID eq '42-0' or PublicationID eq '42-1'&$top=2", {
            value: [{
                    Price: "7.11",
                    PublicationID: "42-1"
                }, {
                    Price: "7.00",
                    PublicationID: "42-0"
                }]
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-0')?$select=Price" + "&$expand=DraftAdministrativeData($select=DraftID,InProcessByUser)", {
            DraftAdministrativeData: {
                DraftID: "1",
                InProcessByUser: "Jane Doe"
            },
            Price: "7.00"
        }).expectChange("priceDetail", "7").expectChange("inProcessByUser", "Jane Doe").expectChange("price", ["7", "7.11"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([
                "BestFriend/_Publication/Price",
                "BestFriend/_Publication/DraftAdministrativeData/InProcessByUser"
            ]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-1')/_Artist/_Friend?$select=ArtistID,IsActiveEntity,Name" + "&$skip=0&$top=100", {
            value: [{
                    ArtistID: "0",
                    IsActiveEntity: true,
                    Name: "TAFKAP"
                }, {
                    ArtistID: "1",
                    IsActiveEntity: false,
                    Name: "John & Jane"
                }]
        }).expectChange("idDetail", ["0", "1"]).expectChange("nameDetail", ["TAFKAP", "John & Jane"]);
        that.oView.byId("detailTable").setBindingContext(oTableBinding.getCurrentContexts()[1]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-1')/_Artist/_Friend?$select=ArtistID,IsActiveEntity,Name" + "&$filter=ArtistID eq '0' and IsActiveEntity eq true" + " or ArtistID eq '1' and IsActiveEntity eq false&$top=2", {
            value: [{
                    ArtistID: "0",
                    IsActiveEntity: true,
                    Name: "TAFKAP (1)"
                }, {
                    ArtistID: "1",
                    IsActiveEntity: false,
                    Name: "John | Jane"
                }]
        }).expectChange("nameDetail", ["TAFKAP (1)", "John | Jane"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestFriend/_Publication/_Artist/_Friend/Name"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var o2ndRowContext = oTableBinding.getCurrentContexts()[1];
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend" + "/_Publication('42-1')?$select=CurrencyCode,Price,PublicationID", {
            CurrencyCode: "JPY",
            Price: "123",
            PublicationID: "42-1"
        }).expectChange("price", [, "123"]).expectChange("currency", [, "JPY"]);
        that.oView.byId("detailTable").setBindingContext(null);
        return Promise.all([
            o2ndRowContext.requestSideEffects([{ $NavigationPropertyPath: "" }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects on context of a list binding", function (assert) {
    var oCreatedContext0, oModel = createSpecialCasesModel({ autoExpandSelect: true, updateGroupId: "update" }), oTable, sView = "<t:Table id=\"table\" rows=\"{/Artists('42')/_Publication}\" threshold=\"0\" visibleRowCount=\"2\">\t<Text id=\"id\" text=\"{PublicationID}\"/>\t<Text id=\"price\" text=\"{Price}\"/></t:Table>", that = this;
    this.expectRequest("Artists('42')/_Publication?$select=Price,PublicationID" + "&$skip=0&$top=2", {
        value: [{
                Price: "1.11",
                PublicationID: "42-1"
            }, {
                Price: "2.22",
                PublicationID: "42-2"
            }]
    }).expectChange("id", ["42-1", "42-2"]).expectChange("price", ["1.11", "2.22"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("id", ["New 1", "42-1"]).expectChange("price", [null, "1.11"]);
        oCreatedContext0 = oTable.getBinding("rows").create({ PublicationID: "New 1" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "Artists('42')/_Publication",
            payload: { PublicationID: "New 1" }
        }, {
            Price: "3.33",
            PublicationID: "New 1"
        }).expectChange("price", ["3.33"]);
        return Promise.all([
            oCreatedContext0.created(),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists('42')/_Publication" + "?$select=Price,PublicationID" + "&$filter=PublicationID eq '42-1'", {
            value: [{
                    Price: "1.12",
                    PublicationID: "42-1"
                }]
        }).expectChange("price", [, "1.12"]);
        return Promise.all([
            oTable.getRows()[1].getBindingContext().requestSideEffects(["Price"]),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists('42')/_Publication('New 1')" + "?$select=Price,PublicationID", {
            Price: "3.34",
            PublicationID: "New 1"
        }).expectChange("price", ["3.34"]);
        return Promise.all([
            oTable.getRows()[0].getBindingContext().requestSideEffects([""]),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("id", [, "42-1", "42-2"]).expectChange("price", [, "1.12", "2.22"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists('42')/_Publication" + "?$select=Price,PublicationID" + "&$filter=PublicationID eq 'New 1' or " + "PublicationID eq '42-1' or PublicationID eq '42-2'&$top=3", {
            value: [{
                    Price: "3.35",
                    PublicationID: "New 1"
                }, {
                    Price: "1.13",
                    PublicationID: "42-1"
                }, {
                    Price: "2.23",
                    PublicationID: "42-2"
                }]
        }).expectChange("price", [, "1.13", "2.23"]);
        return Promise.all([
            oTable.getBinding("rows").getHeaderContext().requestSideEffects(["Price"]),
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: relative to a context binding", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<FlexBox binding=\"{BestFriend}\" id=\"bestFriend\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t<FlexBox binding=\"{BestPublication}\" id=\"bestPublication\">\t\t\t<Text id=\"bestPublication::currency\" text=\"{CurrencyCode}\"/>\t\t</FlexBox>\t\t<Table id=\"publication\" \t\t\t\titems=\"{path : '_Publication', parameters : {$$ownRequest : true}}\">\t\t\t<Text id=\"currency\" text=\"{CurrencyCode}\"/>\t\t</Table>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))", {
        ArtistID: "42",
        IsActiveEntity: true,
        BestFriend: {
            ArtistID: "23",
            BestPublication: {
                CurrencyCode: "JPY",
                PublicationID: "13"
            },
            IsActiveEntity: true,
            Name: "Best Friend"
        }
    }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?$select=CurrencyCode,PublicationID&$skip=0&$top=100", {
        value: [{
                CurrencyCode: "EUR",
                PublicationID: "1"
            }, {
                CurrencyCode: "USD",
                PublicationID: "2"
            }]
    }).expectChange("currency", ["EUR", "USD"]).expectChange("bestPublication::currency", "JPY").expectChange("name", "Best Friend");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))", {
            BestFriend: {
                ArtistID: "23",
                BestPublication: {
                    CurrencyCode: "JPY2",
                    PublicationID: "13"
                },
                IsActiveEntity: true,
                Name: "Best Friend2"
            }
        }).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/BestFriend/_Publication" + "?$select=CurrencyCode,PublicationID&$skip=0&$top=100", {
            value: [{
                    CurrencyCode: "EUR2",
                    PublicationID: "1*"
                }, {
                    CurrencyCode: "USD2",
                    PublicationID: "2*"
                }]
        }).expectChange("currency", ["EUR2", "USD2"]).expectChange("bestPublication::currency", "JPY2").expectChange("name", "Best Friend2");
        return Promise.all([
            that.oView.byId("bestFriend").getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestPublication/CurrencyCode"
                }, {
                    $PropertyPath: "Name"
                }, {
                    $NavigationPropertyPath: "_Publication"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))", {
            BestFriend: {
                ArtistID: "23",
                BestPublication: {
                    CurrencyCode: "USD",
                    PublicationID: "13"
                },
                IsActiveEntity: true
            }
        }).expectChange("bestPublication::currency", "USD");
        return Promise.all([
            that.oView.byId("bestPublication").getBindingContext().requestSideEffects([{
                    $PropertyPath: "CurrencyCode"
                }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: relative to a list binding", function (assert) {
    var oBestFriendBox, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/Artists}\">\t<FlexBox binding=\"{BestFriend}\"> \t\t<Text id=\"name\" text=\"{Name}\"/>\t\t<FlexBox binding=\"{BestPublication}\" id=\"bestPublication\">\t\t\t<Text id=\"currency\" text=\"{CurrencyCode}\"/>\t\t</FlexBox>\t</FlexBox></Table>", that = this;
    this.expectRequest("Artists" + "?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))" + "&$skip=0&$top=100", {
        value: [{
                ArtistID: "23",
                BestFriend: {
                    ArtistID: "43",
                    BestPublication: {
                        CurrencyCode: "GBP",
                        PublicationID: "13"
                    },
                    IsActiveEntity: true,
                    Name: "Best Friend of 23"
                },
                IsActiveEntity: true
            }, {
                ArtistID: "24",
                BestFriend: {
                    ArtistID: "44",
                    BestPublication: {
                        CurrencyCode: "JPY",
                        PublicationID: "14"
                    },
                    IsActiveEntity: true,
                    Name: "Best Friend of 24"
                },
                IsActiveEntity: true
            }]
    }).expectChange("currency", "GBP").expectChange("currency", "JPY").expectChange("name", "Best Friend of 23").expectChange("name", "Best Friend of 24");
    return this.createView(assert, sView, oModel).then(function () {
        oBestFriendBox = that.oView.byId("table").getItems()[1].getCells()[0];
        that.expectRequest("Artists?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))" + "&$filter=ArtistID eq '24' and IsActiveEntity eq true", {
            value: [{
                    ArtistID: "24",
                    BestFriend: {
                        ArtistID: "44",
                        BestPublication: {
                            CurrencyCode: "JPY2",
                            PublicationID: "14"
                        },
                        IsActiveEntity: true,
                        Name: "New Best Friend of 24"
                    },
                    IsActiveEntity: true
                }]
        }).expectChange("currency", "JPY2").expectChange("name", "New Best Friend of 24");
        return Promise.all([
            oBestFriendBox.getBindingContext().requestSideEffects([{
                    $PropertyPath: "BestPublication/CurrencyCode"
                }, {
                    $PropertyPath: "Name"
                }]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oBestPublicationBox = oBestFriendBox.getItems()[1];
        that.expectRequest("Artists?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity;" + "$expand=BestPublication($select=CurrencyCode,PublicationID))" + "&$filter=ArtistID eq '24' and IsActiveEntity eq true", {
            value: [{
                    ArtistID: "24",
                    BestFriend: {
                        ArtistID: "44",
                        BestPublication: {
                            CurrencyCode: "JPY3",
                            PublicationID: "14"
                        },
                        IsActiveEntity: true
                    },
                    IsActiveEntity: true
                }]
        }).expectChange("currency", "JPY3");
        return Promise.all([
            oBestPublicationBox.getBindingContext().requestSideEffects(["CurrencyCode"]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: skip empty path", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true, groupId: "$direct" }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"outer\">\t<Text id=\"outerName\" text=\"{Name}\"/>\t<FlexBox id=\"inner\" binding=\"{path : '', parameters : {$$ownRequest : true}}\"> \t\t<Text id=\"innerName\" text=\"{Name}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name", {
        ArtistID: "42",
        IsActiveEntity: true,
        Name: "Cher"
    }).expectChange("outerName", "Cher").expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Name", {
        ArtistID: "42",
        IsActiveEntity: true,
        Name: "Cher"
    }).expectChange("innerName", "Cher");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=Name", {
            Name: "Cherilyn"
        }).expectChange("innerName", "Cherilyn").expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=Name", {
            Name: "Cherilyn"
        }).expectChange("outerName", "Cherilyn");
        return Promise.all([
            that.oView.byId("innerName").getBindingContext().requestSideEffects(["Name"]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: refresh within requestSideEffects fails", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, oTableBinding, sView = "<Table id=\"list\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [{ SalesOrderID: "42" }]
    }).expectChange("salesOrderID", ["42"]).expectChange("note", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error");
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", createErrorInsideBatch()).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        oTable = that.oView.byId("list");
        oTableBinding = oTable.getBinding("items");
        return Promise.all([
            oTableBinding.getHeaderContext().requestSideEffects([""]).then(mustFail(assert), function () {
                assert.ok(true, "requestSideEffects failed as expected");
            }),
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oTableBinding.getCurrentContexts()[0].getPath(), "/SalesOrderList('42')");
    });
});
QUnit.test("ODLB+ODCB: refresh within requestSideEffects fails", function (assert) {
    var oContext, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oTable, oTableBinding, sView = "<Table id=\"list\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/></Table><FlexBox id=\"detail\" binding=\"{path : '', parameters : {$$ownRequest : true}}\">\t<Text id=\"note\" text=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [{ SalesOrderID: "42" }]
    }).expectChange("salesOrderID", ["42"]).expectChange("note");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
            SalesOrderID: "42",
            Note: "Note 42"
        }).expectChange("note", "Note 42");
        oTable = that.oView.byId("list");
        oTableBinding = oTable.getBinding("items");
        oContext = oTable.getItems()[0].getBindingContext();
        that.oView.byId("detail").setBindingContext(oContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.oLogMock.expects("error").twice();
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", createErrorInsideBatch()).expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID").expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            oTableBinding.getHeaderContext().requestSideEffects([""]).then(mustFail(assert), function () {
                assert.ok(true, "requestSideEffects failed as expected");
            }),
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oDetailContext = that.oView.byId("detail").getElementBinding().getBoundContext();
        assert.strictEqual(oTableBinding.getCurrentContexts()[0].getPath(), "/SalesOrderList('42')");
        assert.strictEqual(oDetailContext.getPath(), "/SalesOrderList('42')");
    });
});
QUnit.test("ODCB+ODLB: refresh within requestSideEffects fails", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('42')}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}, \t\t\ttemplateShareable : false}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=SalesOrderID", { SalesOrderID: "42" }).expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=ItemPosition,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                SalesOrderID: "42",
                ItemPosition: "0010"
            }]
    }).expectChange("salesOrderID", "42").expectChange("position", ["0010"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error").thrice();
        that.expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=ItemPosition,SalesOrderID" + "&$skip=0&$top=100", createErrorInsideBatch({
            code: "CODE1",
            message: "Request 1 intentionally failed"
        })).expectRequest("SalesOrderList('42')?$select=SalesOrderID", createErrorInsideBatch({
            code: "CODE2",
            message: "Request 2 intentionally failed"
        })).expectMessages([{
                code: "CODE1",
                message: "Request 1 intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            that.oView.byId("form").getElementBinding().getBoundContext().requestSideEffects([{ $NavigationPropertyPath: "" }]).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "HTTP request was not processed because the previous request failed");
                assert.strictEqual(oError.cause.error.message, "Request 1 intentionally failed");
            }),
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oFormContext = that.oView.byId("form").getElementBinding().getBoundContext(), oRowContext = that.oView.byId("table").getBinding("items").getCurrentContexts()[0];
        assert.strictEqual(oFormContext.getPath(), "/SalesOrderList('42')");
        assert.strictEqual(oRowContext.getPath(), "/SalesOrderList('42')/SO_2_SOITEM(SalesOrderID='42',ItemPosition='0010')");
    });
});
QUnit.test("ODCB: failed requestSideEffects & changeParameters", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('42')}\">\t<Text id=\"note\" text=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
        SalesOrderID: "42",
        Note: "Note"
    }).expectChange("note", "Note");
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = that.oView.byId("form").getElementBinding(), oPromise;
        that.expectCanceledError("Failed to create cache for binding " + sODCB + ": /SalesOrderList('42')", "Cache discarded as a new cache has been created").expectCanceledError("Failed to read path /SalesOrderList('42')/Note", "Cache discarded as a new cache has been created").expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID&foo=bar", {
            SalesOrderID: "42",
            Note: "Note updated"
        }).expectChange("note", "Note updated");
        oPromise = oBinding.getBoundContext().requestSideEffects([""]);
        oBinding.changeParameters({ foo: "bar" });
        return Promise.all([
            oPromise,
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Request side effects in a different batch group", function (assert) {
    var oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), oPromise, sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('42')}\">\t<Input id=\"note\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Note,SalesOrderID", {
        "@odata.etag": "ETag",
        Note: "Note",
        SalesOrderID: "42"
    }).expectChange("note", "Note");
    return this.createView(assert, sView, oModel).then(function () {
        var oInput = that.oView.byId("note");
        that.expectChange("note", "User input");
        oInput.getBinding("value").setValue("User input");
        oPromise = oInput.getBindingContext().requestSideEffects([{
                $PropertyPath: "Note"
            }], "differentBatchGroup");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList('42')?$select=Note", {
            Note: "Side effect"
        }).expectChange("note", "Side effect");
        return Promise.all([
            oPromise,
            oModel.submitBatch("differentBatchGroup"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            headers: { "If-Match": "ETag" },
            method: "PATCH",
            payload: { Note: "User input" },
            url: "SalesOrderList('42')"
        }, {
            Note: "Server response",
            SalesOrderID: "42"
        }).expectChange("note", "Server response");
        return Promise.all([
            oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2080268833: requestSideEffects before bound action", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Text id=\"note\" text=\"{Note}\"/>\t<Table items=\"{SO_2_SOITEM}\">\t\t<Text id=\"pos\" text=\"{ItemPosition}\"/>\t</Table>\t<FlexBox id=\"action\" binding=\"{" + sAction + "(...)}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=Note,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)", {
        "@odata.etag": "ETag",
        Note: "Note 1",
        SalesOrderID: "1",
        SO_2_SOITEM: [{ ItemPosition: "0010", SalesOrderID: "1" }]
    }).expectChange("note", "Note 1").expectChange("pos", ["0010"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            batchNo: 2,
            method: "POST",
            url: "SalesOrderList('1')/" + sAction,
            headers: { "If-Match": "ETag" },
            payload: {}
        }).expectRequest({
            batchNo: 2,
            url: "SalesOrderList('1')?$select=SO_2_SOITEM" + "&$expand=SO_2_SOITEM($select=ItemPosition,SalesOrderID)"
        }, {
            "@odata.etag": "ETag",
            SO_2_SOITEM: [{ ItemPosition: "0010*", SalesOrderID: "1" }]
        }).expectChange("pos", ["0010*"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects(["SO_2_SOITEM"]),
            Promise.resolve().then(function () {
                return that.oView.byId("action").getObjectBinding().execute();
            }),
            that.waitForChanges(assert)
        ]);
    });
});
[function () {
        var oStatusBinding = this.oView.byId("status").getBinding("value");
        this.expectChange("status", "Busy").expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                ROOM_ID: "42",
                STATUS: "Busy"
            }
        }, {});
        oStatusBinding.setValue("Busy");
    }, function () {
        var oRoomIdBinding = this.oView.byId("roomId").getBinding("value");
        this.expectChange("roomId", "23").expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                ROOM_ID: "23"
            }
        }, {});
        oRoomIdBinding.setValue("23");
    }, function () {
        var sAction = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oRoomIdBinding = this.oView.byId("roomId").getBinding("value");
        this.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                ROOM_ID: "42"
            }
        }, {}).expectRequest({
            method: "POST",
            headers: { "If-Match": "ETag0" },
            url: "EMPLOYEES('3')/" + sAction,
            payload: { TeamID: "23" }
        }, {});
        return this.oModel.bindContext(sAction + "(...)", oRoomIdBinding.getContext()).setParameter("TeamID", "23").execute("$auto");
    }, function (assert) {
        this.expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                ROOM_ID: "42"
            }
        }, {});
        assert.strictEqual(this.oModel.hasPendingChanges(), true);
        assert.strictEqual(this.oView.byId("form").getObjectBinding().hasPendingChanges(), true);
        return this.oModel.submitBatch("$auto");
    }, function (assert) {
        assert.strictEqual(this.oModel.hasPendingChanges(), true);
        assert.strictEqual(this.oView.byId("form").getObjectBinding().hasPendingChanges(), true);
        this.expectChange("roomId", "2").expectCanceledError("Failed to update path /EMPLOYEES('3')/ROOM_ID", "Request canceled: PATCH EMPLOYEES('3'); group: $parked.$auto");
        this.oModel.resetChanges("$auto");
        assert.strictEqual(this.oModel.hasPendingChanges(), false);
        assert.strictEqual(this.oView.byId("form").getObjectBinding().hasPendingChanges(), false);
        return this.oModel.submitBatch("$auto");
    }, function (assert) {
        var oEmployeeBinding = this.oView.byId("form").getObjectBinding();
        this.expectRequest({
            batchNo: 2,
            headers: { "If-Match": "ETag0" },
            method: "PATCH",
            payload: {
                ROOM_ID: "42"
            },
            url: "EMPLOYEES('3')"
        }, {}).expectRequest({
            batchNo: 2,
            url: "EMPLOYEES('3')?$select=STATUS"
        }, {
            STATUS: "Busy"
        }).expectChange("status", "Busy");
        assert.strictEqual(this.oModel.hasPendingChanges(), true);
        assert.strictEqual(oEmployeeBinding.hasPendingChanges(), true);
        return Promise.all([
            oEmployeeBinding.getBoundContext().requestSideEffects([{ $PropertyPath: "STATUS" }]),
            this.oModel.submitBatch("$auto")
        ]);
    }].forEach(function (fnCodeUnderTest, i) {
    QUnit.test("Later retry failed PATCHes for $auto, " + i, function (assert) {
        var oModel = createTeaBusiModel({ groupId: "$direct", updateGroupId: "$auto" }), sView = "<FlexBox binding=\"{/EMPLOYEES('3')}\" id=\"form\">\t<Input id=\"roomId\" value=\"{ROOM_ID}\"/>\t<Input id=\"status\" value=\"{STATUS}\"/></FlexBox>", that = this;
        this.expectRequest("EMPLOYEES('3')", {
            "@odata.etag": "ETag0",
            ID: "3",
            ROOM_ID: "2",
            STATUS: "Occupied"
        }).expectChange("roomId", "2").expectChange("status", "Occupied");
        return this.createView(assert, sView, oModel).then(function () {
            var oRoomIdBinding = that.oView.byId("roomId").getBinding("value");
            that.expectChange("roomId", "42").expectRequest({
                method: "PATCH",
                url: "EMPLOYEES('3')",
                headers: { "If-Match": "ETag0" },
                payload: { ROOM_ID: "42" }
            }, createErrorInsideBatch()).expectMessages([{
                    code: "CODE",
                    message: "Request intentionally failed",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }]);
            that.oLogMock.expects("error");
            oRoomIdBinding.setValue("42");
            return that.waitForChanges(assert);
        }).then(function () {
            return Promise.all([
                fnCodeUnderTest.call(that, assert),
                that.waitForChanges(assert)
            ]);
        });
    });
});
["$auto", "group"].forEach(function (sUpdateGroupId) {
    QUnit.test("Immediately retry failed PATCHes for " + sUpdateGroupId, function (assert) {
        var oAgeBinding, oModel = createTeaBusiModel({ updateGroupId: sUpdateGroupId }), oPromise, fnReject, oRoomIdBinding, sView = "<FlexBox binding=\"{/EMPLOYEES('3')}\">\t<Input id=\"age\" value=\"{AGE}\"/>\t<Input id=\"roomId\" value=\"{ROOM_ID}\"/>\t<Input id=\"status\" value=\"{STATUS}\"/></FlexBox>", that = this;
        this.expectRequest("EMPLOYEES('3')", {
            "@odata.etag": "ETag0",
            ID: "3",
            AGE: 66,
            ROOM_ID: "2",
            STATUS: "Occupied"
        }).expectChange("age", "66").expectChange("roomId", "2").expectChange("status", "Occupied");
        return this.createView(assert, sView, oModel).then(function () {
            oAgeBinding = that.oView.byId("age").getBinding("value");
            oRoomIdBinding = that.oView.byId("roomId").getBinding("value");
            that.expectChange("age", "67").expectChange("roomId", "42").expectRequest({
                method: "PATCH",
                url: "EMPLOYEES('3')",
                headers: { "If-Match": "ETag0" },
                payload: {
                    AGE: 67,
                    ROOM_ID: "42"
                }
            }, new Promise(function (_resolve, reject) {
                fnReject = reject;
            }));
            oAgeBinding.setValue(67);
            oRoomIdBinding.setValue("42");
            oPromise = oModel.submitBatch("group");
            return that.waitForChanges(assert);
        }).then(function () {
            var oError = createErrorInsideBatch();
            that.expectChange("roomId", "23").expectRequest({
                method: "PATCH",
                url: "EMPLOYEES('3')",
                headers: { "If-Match": "ETag0" },
                payload: {
                    AGE: 67,
                    ROOM_ID: "23"
                }
            }, {
                "@odata.etag": "ETag1",
                AGE: 67,
                ROOM_ID: "23"
            }).expectMessages([{
                    code: "CODE",
                    message: "Request intentionally failed",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }]);
            that.oLogMock.expects("error").twice();
            oRoomIdBinding.setValue("23");
            fnReject(oError);
            return Promise.all([
                oPromise,
                oModel.submitBatch("group"),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            var oStatusBinding = that.oView.byId("status").getBinding("value");
            that.expectChange("status", "Busy").expectRequest({
                method: "PATCH",
                url: "EMPLOYEES('3')",
                headers: { "If-Match": "ETag1" },
                payload: { STATUS: "Busy" }
            }, {});
            oStatusBinding.setValue("Busy");
            return Promise.all([
                oModel.submitBatch("group"),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("CPOUI5UISERVICESV3-1451: ODCB#execute after all PATCHes", function (assert) {
    var oModel = createTeaBusiModel({ groupId: "$direct", updateGroupId: "$auto" }), fnReject, oRoomIdBinding, sView = "<FlexBox binding=\"{/EMPLOYEES('3')}\">\t<Input id=\"age\" value=\"{AGE}\"/>\t<Input id=\"roomId\" value=\"{ROOM_ID}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('3')", {
        "@odata.etag": "ETag0",
        ID: "3",
        AGE: 66,
        ROOM_ID: "2"
    }).expectChange("age", "66").expectChange("roomId", "2");
    return this.createView(assert, sView, oModel).then(function () {
        oRoomIdBinding = that.oView.byId("roomId").getBinding("value");
        that.expectChange("age", "67").expectChange("roomId", "42").expectRequest({
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                AGE: 67,
                ROOM_ID: "42"
            }
        }, new Promise(function (_resolve, reject) {
            fnReject = reject;
        }));
        that.oView.byId("age").getBinding("value").setValue(67);
        oRoomIdBinding.setValue("42");
        return that.waitForChanges(assert);
    }).then(function () {
        var sAction = "com.sap.gateway.default.iwbep.tea_busi.v0001.AcChangeTeamOfEmployee", oPromise;
        function reject() {
            that.expectMessages([{
                    code: "CODE",
                    message: "Request intentionally failed",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }]);
            that.oLogMock.expects("error").twice();
            fnReject(createErrorInsideBatch());
        }
        that.expectRequest({
            batchNo: 2,
            method: "PATCH",
            url: "EMPLOYEES('3')",
            headers: { "If-Match": "ETag0" },
            payload: {
                AGE: 67,
                ROOM_ID: "42"
            }
        }, {}).expectRequest({
            batchNo: 2,
            method: "POST",
            headers: { "If-Match": "ETag0" },
            url: "EMPLOYEES('3')/" + sAction,
            payload: { TeamID: "23" }
        }, {});
        oPromise = that.oModel.bindContext(sAction + "(...)", oRoomIdBinding.getContext()).setParameter("TeamID", "23").execute("$auto");
        return Promise.all([
            oPromise,
            resolveLater(reject),
            that.waitForChanges(assert)
        ]);
    });
});
[false, true].forEach(function (bKeepTransientPath) {
    var sTitle = "Create relative, on newly created entity, keep transient path: " + bKeepTransientPath;
    QUnit.test(sTitle, function (assert) {
        var oEmployeeCreatedContext, oModel = createTeaBusiModel(), sNestedTransientPath, oTable, oTeamCreatedContext, sTransientPath, sView = "<FlexBox binding=\"{path : '',\t\tparameters : {\t\t\t$expand : {\t\t\t\t'TEAM_2_EMPLOYEES' : {\t\t\t\t\t$select : '__CT__FAKE__Message/__FAKE__Messages,ID'\t\t\t\t}\t\t\t}\t\t}}\" id=\"form\">\t<Table id=\"table\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Input id=\"id\" value=\"{ID}\"/>\t</Table></FlexBox>", that = this;
        this.expectChange("id", []);
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest({
                method: "POST",
                url: "TEAMS",
                payload: {}
            }, { Team_Id: "23" });
            oTeamCreatedContext = oModel.bindList("/TEAMS").create({
                "@$ui5.keepTransientPath": bKeepTransientPath
            }, true);
            sTransientPath = oTeamCreatedContext.getPath();
            return Promise.all([
                oTeamCreatedContext.created(),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            assert.strictEqual(oTeamCreatedContext.getPath().replace(rTransientPredicate, "($uid=...)"), bKeepTransientPath ? "/TEAMS($uid=...)" : "/TEAMS('23')");
            if (bKeepTransientPath) {
                assert.strictEqual(oTeamCreatedContext.getPath(), sTransientPath);
            }
            that.expectRequest("TEAMS('23')?$expand=TEAM_2_EMPLOYEES(" + "$select=__CT__FAKE__Message/__FAKE__Messages,ID)", {
                Team_Id: "23",
                TEAM_2_EMPLOYEES: [{
                        ID: "3",
                        __CT__FAKE__Message: { __FAKE__Messages: [] }
                    }]
            }).expectChange("id", ["3"]).expectMessages([]);
            that.oView.byId("form").setBindingContext(oTeamCreatedContext);
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectRequest({
                method: "POST",
                url: "TEAMS('23')/TEAM_2_EMPLOYEES",
                payload: { ID: null }
            }, {
                ID: "7",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "Enter an ID",
                            numericSeverity: 3,
                            target: "ID",
                            transition: false
                        }]
                }
            }).expectChange("id", [""]).expectChange("id", ["7", "3"]).expectMessages([{
                    code: "1",
                    message: "Enter an ID",
                    target: bKeepTransientPath ? "/TEAMS($uid=...)/TEAM_2_EMPLOYEES($uid=...)/ID" : "/TEAMS('23')/TEAM_2_EMPLOYEES('7')/ID",
                    type: "Warning"
                }]);
            oTable = that.oView.byId("table");
            oEmployeeCreatedContext = oTable.getBinding("items").create({
                "@$ui5.keepTransientPath": bKeepTransientPath,
                ID: null
            }, true);
            sNestedTransientPath = oEmployeeCreatedContext.getPath();
            return Promise.all([
                oEmployeeCreatedContext.created(),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            var oInput = oTable.getItems()[0].getCells()[0];
            assert.strictEqual(oEmployeeCreatedContext.getPath(), bKeepTransientPath ? sNestedTransientPath : "/TEAMS('23')/TEAM_2_EMPLOYEES('7')");
            assert.strictEqual(oInput.getBindingContext().getPath(), oEmployeeCreatedContext.getPath(), "we got the right input control");
            return that.checkValueState(assert, oInput, "Warning", "Enter an ID");
        });
    });
});
[false, true].forEach(function (bUseCanonicalPath) {
    QUnit.test("read with deep path, $$canonicalPath: " + bUseCanonicalPath, function (assert) {
        var sEntityPath = bUseCanonicalPath ? "BusinessPartnerList('23')" : "SalesOrderList('0500000000')/SO_2_BP", oModel = createSalesOrdersModel({ autoExpandSelect: true, groupId: "$direct" }), sParameters = bUseCanonicalPath ? "parameters : {$$canonicalPath : true}" : "parameters : {$$ownRequest : true}", oTable, sView = "<FlexBox binding=\"{/SalesOrderList('0500000000')/SO_2_BP}\">\t<Text text=\"{BusinessPartnerID}\"/>\t<FlexBox binding=\"{path : '',\t\t" + sParameters + "\t\t}\">\t\t<layoutData><FlexItemData/></layoutData>\t\t<Text id=\"street\" text=\"{Address/Street}\"/>\t</FlexBox>\t<Table id=\"table\" items=\"{path : 'BP_2_PRODUCT', " + sParameters + " }\">\t\t<Text text=\"{ProductID}\"/>\t\t<Input value=\"{Name}\"/>\t</Table></FlexBox>", that = this;
        this.expectRequest("SalesOrderList('0500000000')/SO_2_BP?$select=BusinessPartnerID", {
            BusinessPartnerID: "23"
        }).expectRequest(sEntityPath + "?$select=Address/Street,BusinessPartnerID", {
            Address: { Street: "Bakerstreet" },
            BusinessPartnerID: "23"
        }).expectRequest(sEntityPath + "/BP_2_PRODUCT?$select=Name,ProductID&$skip=0" + "&$top=100", {
            value: [{
                    "@odata.etag": "ETag",
                    ProductID: "1",
                    Name: "NoName"
                }]
        });
        return this.createView(assert, sView, oModel).then(function () {
            var oError = createError({
                code: "top_patch",
                message: "Error occurred while processing the request",
                details: [{
                        code: "bound_patch",
                        message: "Must not change mock data",
                        "@Common.longtextUrl": "Messages(1)/LongText",
                        "@Common.numericSeverity": 4,
                        target: "Name"
                    }]
            });
            oTable = that.oView.byId("table");
            that.oLogMock.expects("error").twice().withArgs("Failed to update path /SalesOrderList('0500000000')/SO_2_BP/" + "BP_2_PRODUCT('1')/Name", sinon.match(oError.message));
            that.expectRequest({
                method: "PATCH",
                url: "ProductList('1')",
                headers: { "If-Match": "ETag" },
                payload: { Name: "A product with no name" }
            }, oError).expectMessages([{
                    code: "top_patch",
                    message: "Error occurred while processing the request",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }, {
                    code: "bound_patch",
                    descriptionUrl: sSalesOrderService + "Messages(1)/LongText",
                    message: "Must not change mock data",
                    persistent: true,
                    target: "/SalesOrderList('0500000000')/SO_2_BP/BP_2_PRODUCT('1')/Name",
                    type: "Error"
                }]);
            oTable.getItems("items")[0].getCells()[1].getBinding("value").setValue("A product with no name");
            return that.waitForChanges(assert);
        }).then(function () {
            var oInput = oTable.getItems("items")[0].getCells()[1];
            return that.checkValueState(assert, oInput, "Error", "Must not change mock data");
        }).then(function () {
            var oError = createError({
                code: "top_delete",
                message: "Error occurred while processing the request",
                details: [{
                        code: "bound_delete",
                        message: "Must not delete mock data",
                        "@Common.longtextUrl": "./Messages(1)/LongText",
                        "@Common.numericSeverity": 4,
                        target: ""
                    }]
            });
            that.oLogMock.expects("error").withExactArgs("Failed to delete /SalesOrderList('0500000000')/SO_2_BP/" + "BP_2_PRODUCT('1')[0]", sinon.match(oError.message), "sap.ui.model.odata.v4.Context");
            that.expectRequest({
                method: "DELETE",
                url: "ProductList('1')",
                headers: { "If-Match": "ETag" }
            }, oError).expectMessages([{
                    code: "top_delete",
                    message: "Error occurred while processing the request",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }, {
                    code: "bound_delete",
                    descriptionUrl: sSalesOrderService + "Messages(1)/LongText",
                    message: "Must not delete mock data",
                    persistent: true,
                    target: "/SalesOrderList('0500000000')/SO_2_BP/BP_2_PRODUCT('1')",
                    type: "Error"
                }]);
            sap.ui.getCore().getMessageManager().removeAllMessages();
            return Promise.all([
                oTable.getBinding("items").getCurrentContexts()[0].delete().then(mustFail(assert), function (oError0) {
                    assert.strictEqual(oError0, oError);
                }),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            that.expectRequest({
                method: "PATCH",
                url: "ProductList('1')",
                headers: { "If-Match": "ETag" },
                payload: { Name: "A product name leads to PATCH success with a message" }
            }, {
                Name: "A product name (from server)",
                Messages: [{
                        code: "23",
                        message: "Enter a product name",
                        numericSeverity: 3,
                        target: "Name"
                    }]
            }).expectMessages([{
                    code: "23",
                    message: "Enter a product name",
                    target: "/SalesOrderList('0500000000')/SO_2_BP/BP_2_PRODUCT('1')/Name",
                    type: "Warning"
                }]);
            sap.ui.getCore().getMessageManager().removeAllMessages();
            oTable.getItems("items")[0].getCells()[1].getBinding("value").setValue("A product name leads to PATCH success with a message");
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("hasPendingChanges and refresh with $$canonicalPath", function (assert) {
    var oBusinessPartnerContext, oBusinessPartnerList, oForm, oModel = createSalesOrdersModel({ autoExpandSelect: true, updateGroupId: "update" }), oTable, sView = "<Table id=\"businessPartnerList\" items=\"{/BusinessPartnerList}\">\t<Text id=\"businessPartnerID\" text=\"{BusinessPartnerID}\"/></Table><FlexBox id=\"form\" binding=\"{BP_2_SO('42')}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$canonicalPath : true}}\">\t\t<Text id=\"productID\" text=\"{ProductID}\"/>\t\t<Input id=\"note\" value=\"{Note}\"/>\t</Table>\t<FlexBox binding=\"{path : 'SO_2_BP/BP_2_SO(\\'23\\')',\t\t\tparameters : {$$canonicalPath : true}}\">\t\t<Input id=\"billingStatus\" value=\"{BillingStatus}\"/>\t</FlexBox></FlexBox>", that = this;
    function checkPendingChanges() {
        assert.strictEqual(oBusinessPartnerList.getBinding("items").hasPendingChanges(), true);
        assert.strictEqual(oBusinessPartnerContext.hasPendingChanges(), true);
    }
    function clearDetails() {
        that.expectChange("billingStatus", null).expectChange("note", []).expectChange("productID", []).expectChange("salesOrderID", null);
        oForm.setBindingContext(null);
    }
    function expectDetailRequests() {
        that.expectRequest("BusinessPartnerList('0500000000')/BP_2_SO('42')" + "?$select=SalesOrderID", {
            SalesOrderID: "42"
        }).expectRequest("SalesOrderList('42')/SO_2_SOITEM" + "?$select=ItemPosition,Note,ProductID,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    ItemPosition: "10",
                    Note: "Notebook Basic 15",
                    ProductID: "HT-1000",
                    SalesOrderID: "42"
                }, {
                    ItemPosition: "20",
                    Messages: [{
                            code: "23",
                            message: "Just a test",
                            numericSeverity: 3,
                            target: "Note"
                        }],
                    Note: "ITelO Vault",
                    ProductID: "HT-1007",
                    SalesOrderID: "42"
                }]
        }).expectRequest("SalesOrderList('42')/SO_2_BP/BP_2_SO('23')" + "?$select=BillingStatus,SalesOrderID", {
            BillingStatus: "UNKNOWN",
            Messages: [{
                    code: "00",
                    message: "Unknown billing status",
                    numericSeverity: 3,
                    target: "BillingStatus"
                }],
            SalesOrderID: "23"
        }).expectMessages([{
                code: "23",
                message: "Just a test",
                target: "/BusinessPartnerList('0500000000')/BP_2_SO('42')" + "/SO_2_SOITEM(SalesOrderID='42',ItemPosition='20')/Note",
                type: "Warning"
            }, {
                code: "00",
                message: "Unknown billing status",
                target: "/BusinessPartnerList('0500000000')/BP_2_SO('42')" + "/SO_2_BP/BP_2_SO('23')/BillingStatus",
                type: "Warning"
            }]);
    }
    function selectFirst() {
        that.expectChange("billingStatus", "UNKNOWN").expectChange("note", ["Notebook Basic 15", "ITelO Vault"]).expectChange("productID", ["HT-1000", "HT-1007"]).expectChange("salesOrderID", "42");
        oForm.setBindingContext(oBusinessPartnerContext);
    }
    this.expectRequest("BusinessPartnerList?$select=BusinessPartnerID&$skip=0&$top=100", {
        value: [{ BusinessPartnerID: "0500000000" }]
    }).expectChange("billingStatus").expectChange("businessPartnerID", ["0500000000"]).expectChange("note", []).expectChange("productID", []).expectChange("salesOrderID");
    return this.createView(assert, sView, oModel).then(function () {
        oForm = that.oView.byId("form");
        oBusinessPartnerList = that.oView.byId("businessPartnerList");
        oBusinessPartnerContext = oBusinessPartnerList.getItems()[0].getBindingContext();
        expectDetailRequests();
        selectFirst();
        return that.waitForChanges(assert);
    }).then(function () {
        var oInput;
        oTable = that.oView.byId("table");
        oInput = oTable.getItems()[1].getCells()[1];
        return that.checkValueState(assert, oInput, "Warning", "Just a test");
    }).then(function () {
        return that.checkValueState(assert, "billingStatus", "Warning", "Unknown billing status");
    }).then(function () {
        clearDetails();
        return that.waitForChanges(assert);
    }).then(function () {
        selectFirst();
        return that.waitForChanges(assert);
    }).then(function () {
        clearDetails();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("BusinessPartnerList('0500000000')?$select=BusinessPartnerID", {
            BusinessPartnerID: "0500000000"
        }).expectMessages([]);
        oBusinessPartnerContext.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        expectDetailRequests();
        selectFirst();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("note", ["Foo"]);
        oTable.getItems()[0].getCells()[1].getBinding("value").setValue("Foo");
        checkPendingChanges();
        return that.waitForChanges(assert);
    }).then(function () {
        clearDetails();
        checkPendingChanges();
        return that.waitForChanges(assert);
    });
});
QUnit.skip("CPOUI5UISERVICESV3-1677: Avoid unnecessary $expand", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{BestFriend}\">\t\t<FlexBox binding=\"{_Friend(ArtistID='42',IsActiveEntity=true)}\">\t\t</FlexBox>\t</FlexBox></FlexBox>";
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42");
    return this.createView(assert, sView, oModel);
});
QUnit.skip("CPOUI5UISERVICESV3-1679: nav.prop. using key predicate", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<FlexBox binding=\"{_Friend(ArtistID='23',IsActiveEntity=true)}\">\t\t<Text id=\"friend\" text=\"{ArtistID}\"/>\t</FlexBox></FlexBox>";
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=_Friend($select=ArtistID,IsActiveEntity)", {
        ArtistID: "42",
        IsActiveEntity: true
    }).expectChange("id", "42").expectChange("id", "23");
    return this.createView(assert, sView, oModel);
});
QUnit.skip("CPOUI5UISERVICESV3-1685: autoExpandSelect with grid table", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<t:Table rows=\"{_Publication}\">\t\t<Text id=\"price\" text=\"{Price}\"/>\t</t:Table></FlexBox>";
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity" + "&$expand=_Publication($select=Price,PublicationID)", {
        ArtistID: "42",
        IsActiveEntity: true,
        _Publication: [{
                Price: "9.99",
                PublicationID: "42-0"
            }]
    }).expectChange("id", "42").expectChange("price", ["9.99"]);
    return this.createView(assert, sView, oModel);
});
testViewStart("Property binding with metapath", "<FlexBox binding=\"{/Artists('42')}\">\t<Text id=\"label0\" text=\"{Name##@com.sap.vocabularies.Common.v1.Label}\"/>\t<Text id=\"name\" text=\"{Name}\"/></FlexBox><Text id=\"insertable\"\ttext=\"{/Artists##@Org.OData.Capabilities.V1.InsertRestrictions/Insertable}\"/><Text id=\"label1\" text=\"{/Artists##/@com.sap.vocabularies.Common.v1.Label}\"/>", { "Artists('42')?$select=ArtistID,IsActiveEntity,Name": {
        Name: "Foo"
    } }, { label0: "Artist Name", name: "Foo", insertable: true, label1: "Artist" }, createSpecialCasesModel({ autoExpandSelect: true }));
testViewStart("Metadata property binding with object value", "<Text id=\"insertable\"\ttext=\"{:= %{/Artists##@Org.OData.Capabilities.V1.InsertRestrictions}.Insertable }\"/>", undefined, { insertable: true }, createSpecialCasesModel({ autoExpandSelect: true }));
testViewStart("Relative data property binding with object value", "<FlexBox binding=\"{/Artists('42')}\">\t<Text id=\"publicationCount\" text=\"{:= %{_Publication}.length }\"/></FlexBox>", { "Artists('42')?$select=ArtistID,IsActiveEntity&$expand=_Publication($select=PublicationID)": {
        _Publication: [{}, {}, {}]
    } }, { publicationCount: 3 }, createSpecialCasesModel({ autoExpandSelect: true }));
QUnit.test("Auto-$expand/$select with dynamic filter, but no metadata", function (assert) {
    var oModel, sView;
    this.useFakeServer({ "/invalid/model/$metadata": { code: 500 } });
    oModel = createModel(sInvalidModel, { autoExpandSelect: true });
    sView = "<Table items=\"{path : '/Artists', \t\tfilters : {path : 'IsActiveEntity', operator : 'EQ', value1 : 'true'}}\">\t<Text id=\"id\" text=\"{path : 'ID', type : 'sap.ui.model.odata.type.String'}\"/></Table>";
    this.oLogMock.restore();
    this.stub(Log, "error");
    this.expectMessages([{
            message: "Could not load metadata: 500 Internal Server Error",
            persistent: true,
            technical: true,
            type: "Error"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        sinon.assert.calledWithExactly(Log.error.firstCall, "GET /invalid/model/$metadata", "Could not load metadata: 500 Internal Server Error", "sap.ui.model.odata.v4.lib._MetadataRequestor");
    });
});
QUnit.test("OData Unit type considering unit customizing", function (assert) {
    var oControl, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/ProductList('HT-1000')}\">\t<Input id=\"weight\" value=\"{parts: ['WeightMeasure', 'WeightUnit',\t\t\t\t\t{path : '/##@@requestUnitsOfMeasure',\t\t\t\t\t\tmode : 'OneTime', targetType : 'any'}],\t\t\t\tmode : 'TwoWay',\t\t\t\ttype : 'sap.ui.model.odata.type.Unit'}\"/>\t<Text id=\"weightMeasure\" text=\"{WeightMeasure}\"/>\t<!-- for CPOUI5MODELS-302 -->\t<Input id=\"weight0\" value=\"{\t\tformatOptions : {showMeasure : false},\t\tmode : 'TwoWay',\t\tparts: ['WeightMeasure', 'WeightUnit',\t\t\t{mode : 'OneTime', path : '/##@@requestUnitsOfMeasure', targetType : 'any'}],\t\ttype : 'sap.ui.model.odata.type.Unit'}\"/>\t<Input id=\"weight1\" value=\"{\t\tformatOptions : {showMeasure : false},\t\tmode : 'TwoWay',\t\tparts: [\t\t\t'WeightMeasure',\t\t\t{parameters : {$$ignoreMessages : false}, path : 'WeightUnit'},\t\t\t{mode : 'OneTime', path : '/##@@requestUnitsOfMeasure', targetType : 'any'}\t\t],\t\ttype : 'sap.ui.model.odata.type.Unit'}\"/></FlexBox>", that = this;
    this.expectRequest("ProductList('HT-1000')?$select=ProductID,WeightMeasure,WeightUnit", {
        "@odata.etag": "ETag",
        ProductID: "HT-1000",
        WeightMeasure: "12.34",
        WeightUnit: "KG"
    }).expectRequest("UnitsOfMeasure?$select=ExternalCode,DecimalPlaces,Text,ISOCode", {
        value: [{
                DecimalPlaces: 5,
                ExternalCode: "KG",
                ISOCode: "KGM",
                Text: "Kilogramm",
                UnitCode: "KG"
            }]
    }).expectChange("weightMeasure", "12.340").expectChange("weight", "12.34000 KG").expectChange("weight0", "12.34000").expectChange("weight1", "12.34000");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectMessages([{
                code: "42",
                message: "Warning for WeightUnit",
                target: "/ProductList('HT-1000')/WeightUnit",
                type: "Warning"
            }]);
        oModel.reportStateMessages("ProductList", {
            "": [{
                    code: "42",
                    message: "Warning for WeightUnit",
                    numericSeverity: 3,
                    target: "('HT-1000')/WeightUnit",
                    transition: false
                }]
        }, []);
        return that.waitForChanges(assert);
    }).then(function () {
        return Promise.all([
            that.checkValueState(assert, "weight", "Warning", "Warning for WeightUnit"),
            that.checkValueState(assert, "weight0", "None", ""),
            that.checkValueState(assert, "weight1", "Warning", "Warning for WeightUnit"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectMessages([]);
        oModel.reportStateMessages("ProductList", {});
    }).then(function () {
        that.expectChange("weight", "23.40000 KG").expectChange("weight0", "23.40000").expectChange("weight1", "23.40000").expectChange("weightMeasure", "23.400").expectRequest({
            method: "PATCH",
            url: "ProductList('HT-1000')",
            headers: { "If-Match": "ETag" },
            payload: { WeightMeasure: "23.4", WeightUnit: "KG" }
        });
        that.oView.byId("weight").getBinding("value").setRawValue(["23.4", "KG"]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("weightMeasure", "0.000").expectChange("weight0", "0.00000").expectChange("weight1", "0.00000").expectRequest({
            method: "PATCH",
            url: "ProductList('HT-1000')",
            headers: { "If-Match": "ETag" },
            payload: { WeightMeasure: "0", WeightUnit: "KG" }
        });
        oControl = that.oView.byId("weight");
        oControl.getBinding("value").setFormatter(null);
        oControl.setValue("");
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oControl.getValue(), "0.00000 KG");
        that.expectMessages([{
                message: "Enter a number with a maximum of 5 decimal places",
                target: oControl.getId() + "/value",
                type: "Error"
            }]);
        oControl.setValue("12.123456 KG");
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oControl, "Error", "Enter a number with a maximum of 5 decimal places");
    });
});
QUnit.test("OData Currency type considering currency customizing", function (assert) {
    var oControl, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/ProductList('HT-1000')}\">\t<Input id=\"price\" value=\"{parts: ['Price', 'CurrencyCode',\t\t\t\t\t{path : '/##@@requestCurrencyCodes',\t\t\t\t\t\tmode : 'OneTime', targetType : 'any'}],\t\t\t\tmode : 'TwoWay',\t\t\t\ttype : 'sap.ui.model.odata.type.Currency'}\"/>\t<Text id=\"amount\" text=\"{Price}\"/>\t<!-- for CPOUI5MODELS-302 -->\t<Input id=\"price0\" value=\"{\t\tformatOptions : {showMeasure : false},\t\tmode : 'TwoWay',\t\tparts: ['Price', 'CurrencyCode',\t\t\t{mode : 'OneTime', path : '/##@@requestCurrencyCodes', targetType : 'any'}],\t\ttype : 'sap.ui.model.odata.type.Currency'}\"/>\t<Input id=\"price1\" value=\"{\t\tformatOptions : {showMeasure : false},\t\tmode : 'TwoWay',\t\tparts: [\t\t\t'Price',\t\t\t{parameters : {$$ignoreMessages : false}, path : 'CurrencyCode'},\t\t\t{mode : 'OneTime', path : '/##@@requestCurrencyCodes', targetType : 'any'}],\t\ttype : 'sap.ui.model.odata.type.Currency'}\"/></FlexBox>", that = this;
    this.expectRequest("ProductList('HT-1000')?$select=CurrencyCode,Price,ProductID", {
        "@odata.etag": "ETag",
        ProductID: "HT-1000",
        Price: "12.3",
        CurrencyCode: "EUR"
    }).expectRequest("Currencies?$select=CurrencyCode,DecimalPlaces,Text,ISOCode", {
        value: [{
                CurrencyCode: "EUR",
                DecimalPlaces: 2,
                ISOCode: "EUR",
                Text: "Euro"
            }, {
                CurrencyCode: "JPY",
                DecimalPlaces: 0,
                ISOCode: "JPY",
                Text: "Yen"
            }]
    }).expectChange("amount", "12.3").expectChange("price", "12.30\u00A0EUR").expectChange("price0", "12.30").expectChange("price1", "12.30");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectMessages([{
                code: "43",
                message: "Info for CurrencyCode",
                target: "/ProductList('HT-1000')/CurrencyCode",
                type: "Information"
            }]);
        oModel.reportStateMessages("ProductList", {
            "": [{
                    code: "43",
                    message: "Info for CurrencyCode",
                    numericSeverity: 2,
                    target: "('HT-1000')/CurrencyCode",
                    transition: false
                }]
        }, []);
        return that.waitForChanges(assert);
    }).then(function () {
        return Promise.all([
            that.checkValueState(assert, "price", "Information", "Info for CurrencyCode"),
            that.checkValueState(assert, "price0", "None", ""),
            that.checkValueState(assert, "price1", "Information", "Info for CurrencyCode"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectMessages([]);
        oModel.reportStateMessages("ProductList", {});
    }).then(function () {
        that.expectChange("price", "42.00\u00A0EUR").expectChange("price", "42\u00A0JPY").expectChange("price0", "42.00").expectChange("price0", "42").expectChange("price1", "42.00").expectChange("price1", "42").expectChange("amount", "42").expectRequest({
            method: "PATCH",
            url: "ProductList('HT-1000')",
            headers: { "If-Match": "ETag" },
            payload: { Price: "42", CurrencyCode: "JPY" }
        });
        that.oView.byId("price").getBinding("value").setRawValue(["42", "JPY"]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("amount", "0").expectChange("price0", "0").expectChange("price1", "0").expectRequest({
            method: "PATCH",
            url: "ProductList('HT-1000')",
            headers: { "If-Match": "ETag" },
            payload: { Price: "0", CurrencyCode: "JPY" }
        });
        oControl = that.oView.byId("price");
        oControl.getBinding("value").setFormatter(null);
        oControl.setValue("");
        return that.waitForChanges(assert);
    }).then(function () {
        assert.strictEqual(oControl.getValue(), "0\u00A0JPY");
        that.expectMessages([{
                message: "EnterInt",
                target: oControl.getId() + "/value",
                type: "Error"
            }]);
        TestUtils.withNormalizedMessages(function () {
            oControl.setValue("12.1");
        });
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oControl, "Error", "EnterInt");
    });
});
QUnit.test("Value help at action parameter", function (assert) {
    var oModel = createSpecialCasesModel(), sPropertyPath = "/Artists/special.cases.Create/Countryoforigin";
    return oModel.getMetaModel().requestValueListType(sPropertyPath).then(function (sValueListType) {
        assert.strictEqual(sValueListType, ValueListType.Fixed);
        return oModel.getMetaModel().requestValueListInfo(sPropertyPath);
    }).then(function (mQualifier2ValueList) {
        assert.strictEqual(mQualifier2ValueList[""].$model.toString(), "sap.ui.model.odata.v4.ODataModel: /special/countryoforigin/");
        delete mQualifier2ValueList[""].$model;
        assert.deepEqual(mQualifier2ValueList, {
            "": {
                $qualifier: "",
                CollectionPath: "I_AIVS_CountryCode",
                Label: "Country Code Value Help",
                Parameters: [{
                        $Type: "com.sap.vocabularies.Common.v1.ValueListParameterInOut",
                        LocalDataProperty: {
                            $PropertyPath: "Countryoforigin"
                        },
                        ValueListProperty: "CountryCode"
                    }]
            }
        });
    });
});
QUnit.test("Value help at bound action parameter, 4.01 syntax, fixed", function (assert) {
    var oModel = createSpecialCasesModel(), oOperationBinding = oModel.bindContext("/Artists('42')/_Publication/special.cases.Create(...)"), oPropertyBinding = oModel.bindProperty("CurrencyCode", oOperationBinding.getParameterContext());
    return oModel.getMetaModel().requestData().then(function () {
        assert.strictEqual(oPropertyBinding.getValueListType(), ValueListType.Fixed);
        return oPropertyBinding.requestValueListInfo();
    }).then(function (mQualifier2ValueList) {
        assert.strictEqual(mQualifier2ValueList[""].$model.toString(), "sap.ui.model.odata.v4.ODataModel: /special/CurrencyCode/");
        delete mQualifier2ValueList[""].$model;
        assert.deepEqual(mQualifier2ValueList, {
            "": {
                $qualifier: "",
                Label: "Publication's Currency"
            }
        });
    });
});
QUnit.test("Value help at bound action parameter, 4.01 syntax, standard", function (assert) {
    var oModel = createSpecialCasesModel(), oOperationBinding = oModel.bindContext("/Artists('42')/_Publication/special.cases.Create(...)"), oPropertyBinding = oModel.bindProperty("Price", oOperationBinding.getParameterContext());
    return oModel.getMetaModel().requestData().then(function () {
        assert.strictEqual(oPropertyBinding.getValueListType(), ValueListType.Standard);
        return oPropertyBinding.requestValueListInfo();
    }).then(function (mQualifier2ValueList) {
        assert.strictEqual(mQualifier2ValueList[""].$model.toString(), "sap.ui.model.odata.v4.ODataModel: /special/Price/");
        delete mQualifier2ValueList[""].$model;
        assert.strictEqual(mQualifier2ValueList.A.$model.toString(), "sap.ui.model.odata.v4.ODataModel: /special/Price/");
        delete mQualifier2ValueList.A.$model;
        assert.strictEqual(mQualifier2ValueList.B.$model.toString(), "sap.ui.model.odata.v4.ODataModel: /special/Price/");
        delete mQualifier2ValueList.B.$model;
        assert.deepEqual(mQualifier2ValueList, {
            "": {
                Label: "Price #"
            },
            "A": {
                Label: "Price #A"
            },
            "B": {
                Label: "Price #B"
            }
        });
    });
});
QUnit.test("bound action on navigation property updates binding parameter", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sResourcePath = "Artists(ArtistID='42',IsActiveEntity=true)/BestPublication", sView = "<FlexBox binding=\"{\t\tpath : '/Artists(ArtistID=\\'42\\',IsActiveEntity=true)/BestPublication',\t\tparameters : {$select : 'Messages'}\t}\" id=\"form\">\t<Input id=\"price\" value=\"{Price}\"/></FlexBox>", that = this;
    this.expectRequest(sResourcePath + "?$select=Messages,Price,PublicationID", {
        PublicationID: "42-0",
        Price: "9.99"
    }).expectChange("price", "9.99");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("form").getObjectBinding().getBoundContext(), oOperation = that.oModel.bindContext("special.cases.PreparationAction(...)", oContext, { $$inheritExpandSelect: true });
        that.expectRequest({
            method: "POST",
            url: sResourcePath + "/special.cases.PreparationAction" + "?$select=Messages,Price,PublicationID",
            payload: {}
        }, {
            Messages: [{
                    code: "23",
                    message: "Just A Message",
                    numericSeverity: 1,
                    transition: true,
                    target: "Price"
                }],
            PublicationID: "42-0",
            Price: "3.33"
        }).expectChange("price", "3.33").expectMessages([{
                code: "23",
                message: "Just A Message",
                target: "/Artists(ArtistID='42',IsActiveEntity=true)/BestPublication/Price",
                persistent: true,
                type: "Success"
            }]);
        return Promise.all([
            oOperation.execute(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "price", "Success", "Just A Message");
    });
});
QUnit.test("BCP: 1980108040", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), oReturnValueContext, sView = "<FlexBox id=\"objectPage\" binding=\"{path : '', parameters : {$$ownRequest : true}}\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("id").expectChange("name");
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding = that.oModel.bindList("/Artists"), oHeaderContext = oListBinding.getHeaderContext(), oOperationBinding = that.oModel.bindContext("special.cases.Create(...)", oHeaderContext, { $$patchWithoutSideEffects: true });
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "Artists/special.cases.Create"
        }, {
            ArtistID: "42",
            IsActiveEntity: false
        });
        return oOperationBinding.execute();
    }).then(function (oReturnValueContext0) {
        oReturnValueContext = oReturnValueContext0;
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Name", {
            ArtistID: "42",
            IsActiveEntity: false,
            Name: ""
        }).expectChange("id", "42").expectChange("name", "");
        that.oView.byId("objectPage").setBindingContext(oReturnValueContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=false)?$select=Name", {
            Name: "Hour Frustrated"
        }).expectChange("name", "Hour Frustrated");
        return Promise.all([
            that.oView.byId("objectPage").getObjectBinding().getBoundContext().requestSideEffects([{ $PropertyPath: "Name" }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 1980173241", function (assert) {
    var fnRespond, sView = "<Table items=\"{/EMPLOYEES}\">\t<Text text=\"{ID}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$skip=0&$top=100", new Promise(function (resolve) {
        fnRespond = resolve.bind(null, { value: [] });
    }));
    return this.createView(assert, sView).then(function () {
        that.expectCanceledError("Failed to get contexts for " + sTeaBusi + "EMPLOYEES with start index 0 and length 100", sODLB + ": /EMPLOYEES is ignoring response from inactive cache: " + sTeaBusi + "EMPLOYEES");
        that.oView.destroy();
        delete that.oView;
        fnRespond();
    });
});
[function () {
        this.expectRequest("BusinessPartnerList?$select=BusinessPartnerID,CompanyName" + "&$filter=not (BusinessPartnerID eq '4710')" + "&$skip=2&$top=1", {
            value: [{
                    BusinessPartnerID: "4713",
                    CompanyName: "FooBar"
                }]
        }).expectChange("id", [, , "4712", "4713"]).expectChange("name", [, , "Bar", "FooBar"]);
        this.oView.byId("table").requestItems();
    }, function () {
        this.expectRequest("BusinessPartnerList?$select=BusinessPartnerID,CompanyName" + "&$filter=BusinessPartnerID eq '4710' or BusinessPartnerID eq '4711'&$top=2", {
            value: [{
                    BusinessPartnerID: "4710",
                    CompanyName: "Baz*"
                }, {
                    BusinessPartnerID: "4711",
                    CompanyName: "Foo*"
                }]
        }).expectChange("name", ["Baz*", "Foo*"]);
        return Promise.all([
            this.oView.byId("table").getBinding("items").getHeaderContext().requestSideEffects([{ $PropertyPath: "CompanyName" }]),
            this.oModel.submitBatch("update")
        ]);
    }].forEach(function (fnCodeUnderTest, i) {
    QUnit.test("JIRA: CPOUI5UISERVICESV3-1845 - POST still pending, " + i, function (assert) {
        var oContext, oModel = createSalesOrdersModel({
            autoExpandSelect: true,
            updateGroupId: "update"
        }), fnRespond, oSubmitBatchPromise, sView = "<Table growing=\"true\" growingThreshold=\"2\" id=\"table\" items=\"{/BusinessPartnerList}\">\t<Text id=\"id\" text=\"{BusinessPartnerID}\"/>\t<Text id=\"name\" text=\"{CompanyName}\"/></Table>", that = this;
        this.expectRequest("BusinessPartnerList?$select=BusinessPartnerID,CompanyName" + "&$skip=0&$top=2", {
            value: [{
                    BusinessPartnerID: "4711",
                    CompanyName: "Foo"
                }, {
                    BusinessPartnerID: "4712",
                    CompanyName: "Bar"
                }]
        }).expectChange("id", ["4711", "4712"]).expectChange("name", ["Foo", "Bar"]);
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest({
                method: "POST",
                payload: {},
                url: "BusinessPartnerList"
            }, new Promise(function (resolve) {
                fnRespond = resolve.bind(null, {
                    BusinessPartnerID: "4710",
                    CompanyName: "Baz"
                });
            })).expectChange("id", [""]).expectChange("name", [""]);
            oContext = that.oView.byId("table").getBinding("items").create({}, true);
            oSubmitBatchPromise = that.oModel.submitBatch("update");
            return that.waitForChanges(assert);
        }).then(function () {
            var oPromise;
            that.expectChange("id", ["4710"]).expectChange("name", ["Baz"]);
            oPromise = fnCodeUnderTest.call(that);
            fnRespond();
            return Promise.all([
                oPromise,
                oSubmitBatchPromise,
                oContext.created(),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.skip("JIRA: CPOUI5UISERVICESV3-1825 - GET & POST in same $batch", function (assert) {
    var oBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Text id=\"count\" text=\"{$count}\"/><Table growing=\"true\" growingThreshold=\"2\" id=\"table\"\t\titems=\"{path : '/BusinessPartnerList', parameters : {$count : true}}\">\t<Text id=\"id\" text=\"{BusinessPartnerID}\"/></Table>", that = this;
    this.expectRequest("BusinessPartnerList?$count=true&$select=BusinessPartnerID" + "&$skip=0&$top=2", {
        "@odata.count": "3",
        value: [{
                BusinessPartnerID: "4711"
            }, {
                BusinessPartnerID: "4712"
            }]
    }).expectChange("count").expectChange("id", ["4711", "4712"]);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("table").getBinding("items");
        that.expectChange("count", "3");
        that.oView.byId("count").setBindingContext(oBinding.getHeaderContext());
        return that.waitForChanges(assert);
    }).then(function () {
        var oContext;
        assert.strictEqual(oBinding.getCount(), 3, "count of elements");
        assert.strictEqual(oBinding.getLength(), 2, "length of the table");
        that.expectRequest({
            batchNo: 2,
            changeSetNo: 2,
            url: "BusinessPartnerList?$count=true&$select=BusinessPartnerID" + "&$filter=not (BusinessPartnerID eq '4710')" + "&$skip=2&$top=1"
        }, {
            "@odata.count": "3",
            value: [{ BusinessPartnerID: "4713" }]
        });
        that.oView.byId("table").requestItems();
        that.expectChange("count", "4").expectRequest({
            batchNo: 2,
            changeSetNo: 1,
            method: "POST",
            payload: {},
            url: "BusinessPartnerList"
        }, { BusinessPartnerID: "4710" }).expectChange("id", ["4710", , , "4713"]);
        oContext = oBinding.create({}, true);
        return Promise.all([
            oContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Annotation target with parentheses to specify action overload", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true });
    return this.createView(assert, "", oModel).then(function () {
        return oModel.getMetaModel().requestData();
    }).then(function (oMetaData) {
        assert.deepEqual(oMetaData.$Annotations["special.cases.Create(Collection(special.cases.ArtistsType))/Countryoforigin"], { "@com.sap.vocabularies.Common.v1.Label": "Country of Origin" });
        assert.strictEqual(oModel.getMetaModel().getObject("/Artists/special.cases.Create" + "/Countryoforigin@com.sap.vocabularies.Common.v1.Label"), "Country of Origin", "specific overload wins");
        assert.strictEqual(oModel.getMetaModel().getObject("/Artists/special.cases.Create" + "/Countryoforigin@com.sap.vocabularies.Common.v1.ValueListWithFixedValues"), true, "fallback to annotation for all overloads");
        assert.deepEqual(oModel.getMetaModel().getObject("/Artists/special.cases.Create" + "/Countryoforigin@com.sap.vocabularies.Common.v1.ValueListReferences"), ["../countryoforigin/$metadata"]);
    });
});
QUnit.test("Create on a relative binding with $expand", function (assert) {
    var oCreatedContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, oTableBinding, sView = "<FlexBox binding=\"{/SalesOrderList('1')}\">\t<Text id=\"count\" text=\"{headerContext>$count}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$select : 'Messages'}}\">\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t\t<Input id=\"quantity\" value=\"{Quantity}\"/>\t\t<Input id=\"product\" value=\"{SOITEM_2_PRODUCT/ProductID}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest({
        batchNo: 1,
        url: "SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Messages,Quantity,SalesOrderID;" + "$expand=SOITEM_2_PRODUCT($select=ProductID))"
    }, {
        SalesOrderID: "1",
        SO_2_SOITEM: [{
                ItemPosition: "10",
                Messages: [],
                Quantity: "7",
                SalesOrderID: "1",
                SOITEM_2_PRODUCT: { ProductID: "2" }
            }]
    }).expectChange("count").expectChange("position", ["10"]).expectChange("quantity", ["7.000"]).expectChange("product", ["2"]);
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("items");
        that.expectChange("count", "1");
        that.oView.setModel(that.oView.getModel(), "headerContext");
        that.oView.byId("count").setBindingContext(oTableBinding.getHeaderContext(), "headerContext");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            batchNo: 2,
            method: "POST",
            url: "SalesOrderList('1')/SO_2_SOITEM",
            payload: {}
        }, {
            SalesOrderID: "1",
            ItemPosition: "20"
        }).expectRequest({
            batchNo: 3,
            url: "SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1',ItemPosition='20')" + "?$select=ItemPosition,Messages,Quantity,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=ProductID)"
        }, {
            ItemPosition: "20",
            Messages: [{
                    code: "23",
                    message: "Enter a minimum quantity of 2",
                    numericSeverity: 3,
                    target: "Quantity"
                }],
            Quantity: "0",
            SalesOrderID: "1",
            SOITEM_2_PRODUCT: { ProductID: "3" }
        }).expectChange("count", "2").expectChange("position", ["", "10"]).expectChange("quantity", [null, "7.000"]).expectChange("product", [null, "2"]).expectChange("position", ["20"]).expectChange("quantity", ["0.000"]).expectChange("product", ["3"]).expectMessages([{
                code: "23",
                message: "Enter a minimum quantity of 2",
                target: "/SalesOrderList('1')" + "/SO_2_SOITEM(SalesOrderID='1',ItemPosition='20')/Quantity",
                type: "Warning"
            }]);
        oCreatedContext = oTableBinding.create();
        return Promise.all([
            oCreatedContext.created(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oQuantityField = oTable.getItems()[0].getCells()[1];
        return that.checkValueState(assert, oQuantityField, "Warning", "Enter a minimum quantity of 2");
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1',ItemPosition='20')" + "?$select=ItemPosition,Messages,Quantity,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=ProductID)", {
            ItemPosition: "20",
            Messages: [{
                    code: "0815",
                    message: "Best Product Ever",
                    numericSeverity: 2,
                    target: "SOITEM_2_PRODUCT/ProductID"
                }],
            Quantity: "2",
            SalesOrderID: "1",
            SOITEM_2_PRODUCT: { ProductID: "42" }
        }).expectChange("quantity", ["2.000"]).expectChange("product", ["42"]).expectMessages([{
                code: "0815",
                message: "Best Product Ever",
                target: "/SalesOrderList('1')" + "/SO_2_SOITEM(SalesOrderID='1',ItemPosition='20')" + "/SOITEM_2_PRODUCT/ProductID",
                type: "Information"
            }]);
        return Promise.all([
            oCreatedContext.requestRefresh("$auto", false),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oProductField = oTable.getItems()[0].getCells()[2];
        return that.checkValueState(assert, oProductField, "Information", "Best Product Ever");
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Quantity,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=ProductID)" + "&$filter=SalesOrderID eq '1'", {
            value: [{
                    ItemPosition: "20",
                    Messages: [{
                            code: "0123",
                            message: "Keep on buying!",
                            numericSeverity: 1,
                            target: "SOITEM_2_PRODUCT/ProductID"
                        }],
                    Quantity: "3",
                    SalesOrderID: "1",
                    SOITEM_2_PRODUCT: { ProductID: "42" }
                }]
        }).expectChange("quantity", ["3.000"]).expectMessages([{
                code: "0123",
                message: "Keep on buying!",
                target: "/SalesOrderList('1')" + "/SO_2_SOITEM(SalesOrderID='1',ItemPosition='20')" + "/SOITEM_2_PRODUCT/ProductID",
                type: "Success"
            }]);
        return Promise.all([
            oCreatedContext.requestRefresh("$auto", true),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oProductField = oTable.getItems()[0].getCells()[2];
        return that.checkValueState(assert, oProductField, "Success", "Keep on buying!");
    }).then(function () {
        that.expectRequest("SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,Messages,Quantity,SalesOrderID" + "&$expand=SOITEM_2_PRODUCT($select=ProductID)" + "&$filter=SalesOrderID eq '1'", {
            value: []
        }).expectChange("count", "1").expectChange("position", ["10"]).expectChange("quantity", ["7.000"]).expectChange("product", ["2"]).expectMessages([]);
        return Promise.all([
            oCreatedContext.requestRefresh("$auto", true),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("Context#setProperty: read/write", function (assert) {
    var oPromise, that = this;
    return this.createSetPropertyScenario(assert).then(function (oContext) {
        that.expectChange("name", "Best Team Ever");
        oPromise = oContext.setProperty("Name", "Best Team Ever");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            payload: { Name: "Best Team Ever" },
            url: "TEAMS('TEAM_01')"
        }, {
            Name: "Best Team Ever",
            Team_Id: "TEAM_01",
            __CT__FAKE__Message: {
                __FAKE__Messages: [{
                        code: "CODE",
                        message: "What a stupid name!",
                        numericSeverity: 3,
                        target: "Name",
                        transition: false
                    }]
            }
        }).expectMessages([{
                code: "CODE",
                message: "What a stupid name!",
                target: "/TEAMS('TEAM_01')/Name",
                type: "Warning"
            }]);
        return Promise.all([
            that.oModel.submitBatch("update"),
            oPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, "name", "Warning", "What a stupid name!");
    });
});
QUnit.test("Context#setProperty: rejected", function (assert) {
    var oContext, oPromise, that = this;
    return this.createSetPropertyScenario(assert).then(function (oContext0) {
        that.expectChange("name", "Best Team Ever");
        oContext = oContext0;
        oPromise = oContext.setProperty("Name", "Best Team Ever");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            payload: { Name: "Best Team Ever" },
            url: "TEAMS('TEAM_01')"
        }, createErrorInsideBatch()).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]).expectChange("name", "Team #1");
        that.oLogMock.expects("error").withExactArgs("Failed to update path /TEAMS('TEAM_01')/Name", sinon.match("Request intentionally failed"), "sap.ui.model.odata.v4.Context");
        return Promise.all([
            that.oModel.submitBatch("update"),
            oPromise.then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Request intentionally failed");
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oContext.getProperty("Name"), "Team #1");
        assert.notOk(that.oModel.hasPendingChanges("update"));
    });
});
QUnit.test("Context#setProperty: bRetry", function (assert) {
    var oBinding, oContext, iPatchCompleted = 0, iPatchSent = 0, oPromise, that = this;
    return this.createSetPropertyScenario(assert).then(function (oContext0) {
        oContext = oContext0;
        oBinding = oContext.getBinding();
        that.expectChange("name", "Foo").expectRequest({
            method: "PATCH",
            payload: { Name: "Foo" },
            url: "TEAMS('TEAM_01')"
        }, createErrorInsideBatch()).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withExactArgs("Failed to update path /TEAMS('TEAM_01')/Name", sinon.match("Request intentionally failed"), "sap.ui.model.odata.v4.Context");
        oBinding.attachPatchSent(function () {
            iPatchSent += 1;
        });
        oBinding.attachPatchCompleted(function (oEvent) {
            iPatchCompleted += 1;
            assert.strictEqual(oEvent.getParameter("success"), iPatchCompleted === 2);
        });
        oPromise = oContext.setProperty("Name", "Foo", undefined, true);
        return Promise.all([
            that.oModel.submitBatch("update"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oContext.getProperty("Name"), "Foo");
        assert.ok(that.oModel.hasPendingChanges("update"));
        assert.strictEqual(iPatchSent, 1);
        assert.strictEqual(iPatchCompleted, 1);
        that.expectRequest({
            method: "PATCH",
            payload: { Name: "Foo" },
            url: "TEAMS('TEAM_01')"
        });
        return Promise.all([
            that.oModel.submitBatch("update"),
            oPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.notOk(that.oModel.hasPendingChanges("update"));
        assert.strictEqual(iPatchSent, 2);
        assert.strictEqual(iPatchCompleted, 2);
    });
});
QUnit.test("Context#setProperty: write only", function (assert) {
    var oContext, iNoPatchCompleted = 0, iNoPatchSent = 0, oYetAnotherContext, that = this;
    return this.createView(assert).then(function () {
        var oContextBinding = that.oModel.bindContext("/TEAMS('TEAM_01')");
        oContext = oContextBinding.getBoundContext();
        oYetAnotherContext = that.oModel.bindContext("/TEAMS('TEAM_02')").getBoundContext();
        oContextBinding.attachPatchCompleted(function (oEvent) {
            iNoPatchCompleted += 1;
            assert.strictEqual(oEvent.getParameter("success"), true);
        });
        oContextBinding.attachPatchSent(function () {
            iNoPatchSent += 1;
        });
        that.expectRequest({
            headers: { "If-Match": "*" },
            method: "PATCH",
            payload: { MEMBER_COUNT: 99, Name: "Best Team Ever" },
            url: "TEAMS('TEAM_01')"
        }).expectRequest({
            headers: { "If-Match": "*" },
            method: "PATCH",
            payload: { Name: "Yet another team!" },
            url: "TEAMS('TEAM_02')"
        });
        return Promise.all([
            oContext.setProperty("MEMBER_COUNT", 99),
            oContext.setProperty("Name", "n/a"),
            oContext.setProperty("Name", "Best Team Ever"),
            oYetAnotherContext.setProperty("Name", "Yet another team!"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(iNoPatchCompleted, 1);
        assert.strictEqual(iNoPatchSent, 1);
        assert.strictEqual(oContext.getProperty("MEMBER_COUNT"), 99);
        assert.strictEqual(oContext.getProperty("Name"), "Best Team Ever");
        assert.strictEqual(oYetAnotherContext.getProperty("Name"), "Yet another team!");
        that.oLogMock.expects("error").withExactArgs("Failed to drill-down into MEMBER_COUNT, invalid segment: MEMBER_COUNT", "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/TEAMS('TEAM_02')", "sap.ui.model.odata.v4.lib._Cache");
        assert.strictEqual(oYetAnotherContext.getProperty("MEMBER_COUNT"), undefined);
    });
});
QUnit.test("Declarative event handlers", function (assert) {
    var done = assert.async(), oController = {
        onPress: function (sNetAmount) {
            assert.strictEqual(sNetAmount, "2,000.00");
            done();
        }
    }, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Button id=\"button\" press=\".onPress(${path : 'NetAmount', targetType : 'string'})\"\t\ttext=\"{NetAmount}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=NetAmount,SalesOrderID&$skip=0&$top=100", {
        value: [{
                NetAmount: "2000",
                SalesOrderID: "4711"
            }, {
                NetAmount: "4000",
                SalesOrderID: "4712"
            }]
    }).expectChange("button", ["2,000.00", "4,000.00"]);
    this.createView(assert, sView, oModel, oController).then(function () {
        that.oView.byId("table").getItems()[0].getCells()[0].firePress();
    });
});
QUnit.test("Use list binding programmatically", function (assert) {
    var done = assert.async(), oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    this.createView(assert, "", oModel).then(function () {
        var oBinding = oModel.bindList("/SalesOrderList");
        that.expectRequest("SalesOrderList?$skip=0&$top=10", {
            value: [{
                    SalesOrderID: "4711"
                }, {
                    SalesOrderID: "4712"
                }]
        });
        oBinding.attachChange(function (oEvent) {
            var aContexts = oBinding.getContexts(0, 10);
            if (!oEvent.getParameter("detailedReason")) {
                assert.strictEqual(aContexts.length, 2);
                assert.strictEqual(aContexts[0].getProperty("SalesOrderID"), "4711");
                assert.strictEqual(aContexts[1].getProperty("SalesOrderID"), "4712");
                done();
            }
        });
        oBinding.attachRefresh(function () {
            oBinding.getContexts(0, 10);
        });
        oBinding.initialize();
    });
});
QUnit.test("Reduce path: property in same cache", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('1')}\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t\t<Input id=\"soCurrencyCode\" value=\"{SOITEM_2_SO/CurrencyCode}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=CurrencyCode,SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Note,SalesOrderID)", {
        "@odata.etag": "ETag",
        CurrencyCode: "EUR",
        SalesOrderID: "1",
        SO_2_SOITEM: [{
                ItemPosition: "10",
                Note: "Foo",
                SalesOrderID: "1"
            }]
    }).expectChange("note", ["Foo"]).expectChange("soCurrencyCode", ["EUR"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = that.oView.byId("table").getItems()[0].getCells()[1].getBinding("value");
        that.expectChange("soCurrencyCode", ["USD"]).expectRequest({
            method: "PATCH",
            headers: { "If-Match": "ETag" },
            url: "SalesOrderList('1')",
            payload: { CurrencyCode: "USD" }
        }, {
            CurrencyCode: "USD",
            SalesOrderID: "1"
        });
        oBinding.setValue("USD");
        return that.waitForChanges(assert);
    });
});
QUnit.test("Reduce path: property in parent cache", function (assert) {
    var oCreationRowContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Text id=\"soCurrencyCode\" text=\"{CurrencyCode}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox><FlexBox id=\"creationRow\">\t<Text id=\"creationRow::note\" text=\"{Note}\"/></FlexBox><FlexBox id=\"valueHelp\">\t<Input id=\"valueHelp::currencyCode\" value=\"{SOITEM_2_SO/CurrencyCode}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=CurrencyCode,SalesOrderID", {
        CurrencyCode: "EUR",
        SalesOrderID: "1"
    }).expectRequest("SalesOrderList('1')/SO_2_SOITEM?$select=ItemPosition,Note,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                ItemPosition: "10",
                Note: "Foo",
                SalesOrderID: "1"
            }]
    }).expectChange("note", ["Foo"]).expectChange("soCurrencyCode", "EUR").expectChange("valueHelp::currencyCode");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("table");
        that.expectChange("valueHelp::currencyCode", "EUR");
        that.oView.byId("valueHelp").setBindingContext(oTable.getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("valueHelp::currencyCode", null);
        that.oView.byId("valueHelp").setBindingContext(null);
        return that.waitForChanges(assert);
    }).then(function () {
        var oCreationRowListBinding, oTableBinding;
        that.expectChange("valueHelp::currencyCode", "EUR");
        oTableBinding = oTable.getBinding("items");
        oCreationRowListBinding = that.oModel.bindList(oTableBinding.getPath(), oTableBinding.getContext(), undefined, undefined, { $$updateGroupId: "doNotSubmit" });
        oCreationRowContext = oCreationRowListBinding.create();
        that.oView.byId("creationRow").setBindingContext(oCreationRowContext);
        that.oView.byId("valueHelp").setBindingContext(oCreationRowContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("soCurrencyCode", "USD").expectChange("valueHelp::currencyCode", "USD");
        that.oView.byId("valueHelp::currencyCode").getBinding("value").setValue("USD");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("valueHelp::currencyCode", null);
        checkCanceled(assert, oCreationRowContext.created());
        oCreationRowContext.delete();
    });
});
QUnit.test("Reduce path by removing multiple pairs of partner attributes", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/As(1)}\">\t<FlexBox binding=\"{AtoB}\">\t\t<Table id=\"table\" items=\"{BtoDs}\">\t\t\t<Text id=\"aValue\" text=\"{DtoB/BtoA/AValue}\"/>\t\t</Table>\t</FlexBox></FlexBox>";
    this.expectRequest("As(1)?$select=AID,AValue" + "&$expand=AtoB($select=BID;$expand=BtoDs($select=DID))", {
        AID: 1,
        AValue: 42,
        AtoB: {
            BID: 2,
            BtoDs: [{
                    DID: 3
                }]
        }
    }).expectChange("aValue", ["42"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Reduce path and step up multiple caches", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/As(1)}\">\t<FlexBox binding=\"{path : 'AtoB', parameters : {$$ownRequest : true}}\">\t\t<Text text=\"{BValue}\"/>\t\t<Table id=\"table\" items=\"{path : 'BtoDs', parameters : {$$ownRequest : true}}\">\t\t\t<Text text=\"{DValue}\"/>\t\t\t<Text id=\"aValue\" text=\"{DtoB/BtoA/AValue}\"/>\t\t</Table>\t</FlexBox></FlexBox>";
    this.expectRequest("As(1)?$select=AID,AValue", {
        AID: 1,
        AValue: 42
    }).expectRequest("As(1)/AtoB?$select=BID,BValue", {
        BID: 2,
        BValue: 102
    }).expectRequest("As(1)/AtoB/BtoDs?$select=DID,DValue&$skip=0&$top=100", {
        value: [
            { DID: 3, DValue: 103 },
            { DID: 4, DValue: 104 }
        ]
    }).expectChange("aValue", ["42", "42"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Reduced path must not be shorter than root binding's path", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/As(1)/AtoB}\">\t<Text id=\"aValue\" text=\"{BtoA/AValue}\"/>\t<Table id=\"table\" items=\"{BtoDs}\">\t\t<Text id=\"table::aValue\" text=\"{DtoB/BtoA/AValue}\"/>\t</Table></FlexBox>";
    this.expectRequest("As(1)/AtoB?$select=BID" + "&$expand=BtoA($select=AID,AValue),BtoDs($select=DID)", {
        BID: 2,
        BtoA: {
            AID: 1,
            AValue: 42
        },
        BtoDs: [{
                DID: 3
            }]
    }).expectChange("aValue", "42").expectChange("table::aValue", ["42"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("Operation on reduceable path", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/SalesOrderList('1')}\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox><FlexBox id=\"form\" binding=\"{SOITEM_2_SO/" + sAction + "(...)}\">\t<Text id=\"status\" text=\"{LifecycleStatus}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Note,SalesOrderID)", {
        "@odata.etag": "ETag",
        SalesOrderID: "1",
        SO_2_SOITEM: [{
                ItemPosition: "10",
                Note: "Foo",
                SalesOrderID: "1"
            }]
    }).expectChange("note", ["Foo"]).expectChange("status");
    return this.createView(assert, sView, oModel).then(function () {
        var oForm = that.oView.byId("form");
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/SO_2_SOITEM(SalesOrderID='1',ItemPosition='10')" + "/SOITEM_2_SO/" + sAction,
            headers: { "If-Match": "ETag" },
            payload: {}
        }, {
            LifecycleStatus: "C",
            SalesOrderID: "1"
        }).expectChange("status", null).expectChange("status", "C");
        oForm.setBindingContext(that.oView.byId("table").getItems()[0].getBindingContext());
        oForm.getElementBinding().execute();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Partner attributes in path to collection, CPOUI5ODATAV4-204", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Bs(1)}\">\t<Table id=\"table\" items=\"{BtoA/AtoB/BtoDs}\">\t\t<Text id=\"bValue\" text=\"{DtoB/BValue}\"/>\t\t<Text id=\"dValue\" text=\"{DValue}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("Bs(1)?$select=BID,BValue&$expand=BtoA($select=AID" + ";$expand=AtoB($select=BID;$expand=BtoDs($select=DID,DValue)))", {
        BID: 1,
        BValue: 101,
        BtoA: {
            AtoB: {
                BtoDs: [
                    { DID: 2, DValue: 99 },
                    { DID: 3, DValue: 98 }
                ]
            }
        }
    }).expectChange("bValue", ["101", "101"]).expectChange("dValue", ["99", "98"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oListBinding = that.oView.byId("table").getBinding("items");
        that.expectRequest("Bs(1)/BtoA/AtoB/BtoDs?$select=DID,DValue&$orderby=DValue" + "&$skip=0&$top=100", {
            value: [
                { DID: 3, DValue: 98 },
                { DID: 2, DValue: 99 }
            ],
            "BtoDs@odata.count": "2"
        }).expectChange("dValue", ["98", "99"]);
        oListBinding.sort(new Sorter("DValue"));
        assert.strictEqual(oListBinding.getContext().getProperty("BValue"), 101);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Partner attributes in path to collection, other updateGroupId", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true, updateGroupId: "update" }), sView = "<FlexBox binding=\"{/Bs(1)}\">\t<Text id=\"bValue\" text=\"{BValue}\"/>\t<Table items=\"{BtoDs}\">\t\t<Text id=\"bValue::table1\" text=\"{DtoB/BValue}\"/>\t</Table>\t<Table items=\"{path : 'BtoDs', parameters : {$$updateGroupId : '$auto'}}\">\t\t<Text id=\"bValue::table2\" text=\"{DtoB/BValue}\"/>\t</Table></FlexBox>";
    this.expectRequest("Bs(1)?$select=BID,BValue&$expand=BtoDs($select=DID)", {
        BID: 1,
        BValue: 101,
        BtoDs: [
            { DID: 2 },
            { DID: 3 }
        ]
    }).expectRequest("Bs(1)/BtoDs?$select=DID&$expand=DtoB($select=BID,BValue)" + "&$skip=0&$top=100", {
        value: [{
                DID: 2,
                DtoB: { BID: 1, BValue: 101 }
            }, {
                DID: 3,
                DtoB: { BID: 1, BValue: 101 }
            }]
    }).expectChange("bValue", "101").expectChange("bValue::table1", ["101", "101"]).expectChange("bValue::table2", ["101", "101"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("ODPrB access value async via API", function (assert) {
    var oModel = createSalesOrdersModel(), oPropertyBinding = oModel.bindProperty("/SalesOrderList('1')/NetAmount"), that = this;
    return this.createView(assert, "", oModel).then(function () {
        that.expectRequest("SalesOrderList('1')/NetAmount", { value: 42 });
        return oPropertyBinding.requestValue().then(function (vValue) {
            assert.strictEqual(vValue, 42);
        });
    });
});
QUnit.test("ODCB access value async via API", function (assert) {
    var oModel = createSalesOrdersModel(), oContextBinding = oModel.bindContext("/SalesOrderList('1')"), oSalesOrder = {
        NetAmount: "42",
        SalesOrderID: "1",
        TaxAmount: "117"
    }, oSalesOrderResponse = Object.assign({}, oSalesOrder), that = this;
    return this.createView(assert, "", oModel).then(function () {
        that.expectRequest("SalesOrderList('1')", oSalesOrderResponse);
        return oContextBinding.requestObject().then(function (oResponse) {
            assert.deepEqual(oResponse, oSalesOrder);
            assert.notStrictEqual(oResponse, oSalesOrderResponse);
            return oContextBinding.requestObject("TaxAmount").then(function (vValue) {
                assert.strictEqual(vValue, "117");
            });
        });
    });
});
[false, true].forEach(function (bEmpty) {
    [false, true].forEach(function (bSuccess) {
        var sTitle = "CPOUI5ODATAV4-37: items table is empty = " + bEmpty + "; creation succeeds = " + bSuccess;
        QUnit.test(sTitle, function (assert) {
            var oCreationRowContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oNewContext, oTableBinding, sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Input id=\"soCurrencyCode\" value=\"{CurrencyCode}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox><FlexBox id=\"creationRow\">\t<Input id=\"creationRow::note\" value=\"{Note}\"/></FlexBox>", that = this;
            this.expectRequest("SalesOrderList('1')?$select=CurrencyCode,SalesOrderID", {
                CurrencyCode: "EUR",
                SalesOrderID: "1"
            }).expectRequest("SalesOrderList('1')/SO_2_SOITEM?$select=ItemPosition,Note,SalesOrderID" + "&$skip=0&$top=100", {
                value: bEmpty ? [] : [{
                        ItemPosition: "10",
                        Note: "Foo",
                        SalesOrderID: "1"
                    }]
            }).expectChange("note", bEmpty ? [] : ["Foo"]).expectChange("soCurrencyCode", "EUR").expectChange("creationRow::note");
            return this.createView(assert, sView, oModel).then(function () {
                var oCreationRowListBinding;
                oTableBinding = that.oView.byId("table").getBinding("items");
                oCreationRowListBinding = oModel.bindList(oTableBinding.getPath(), oTableBinding.getContext(), undefined, undefined, { $$updateGroupId: "doNotSubmit" });
                that.expectChange("creationRow::note", "New item note");
                oCreationRowContext = oCreationRowListBinding.create({ Note: "New item note" });
                that.oView.byId("creationRow").setBindingContext(oCreationRowContext);
                return that.waitForChanges(assert);
            }).then(function () {
                that.expectChange("note", "First new row", -1);
                if (!bEmpty) {
                    that.expectChange("note", ["Foo"]);
                }
                that.expectRequest({
                    batchNo: 2,
                    method: "POST",
                    payload: { Note: "First new row" },
                    url: "SalesOrderList('1')/SO_2_SOITEM"
                }, bSuccess ? {
                    ItemPosition: "0",
                    Note: "First new row",
                    SalesOrderID: "1"
                } : createErrorInsideBatch()).expectMessages(bSuccess ? [] : [{
                        code: "CODE",
                        message: "Request intentionally failed",
                        persistent: true,
                        technical: true,
                        type: "Error"
                    }]);
                if (!bSuccess) {
                    that.oLogMock.expects("error").withArgs("POST on 'SalesOrderList('1')/SO_2_SOITEM' failed" + "; will be repeated automatically");
                    that.oLogMock.expects("error").withArgs("Failed to request side effects");
                    that.oLogMock.expects("error").withArgs("Failed to get contexts for " + sSalesOrderService + "SalesOrderList('1')/SO_2_SOITEM with start index 0 and length 100");
                }
                oNewContext = oTableBinding.create({ Note: "First new row" }, true);
                that.expectRequest({
                    batchNo: 2,
                    url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,Note,SalesOrderID&$skip=0&$top=100"
                }, {
                    value: [{
                            ItemPosition: "0",
                            Note: "First new row",
                            SalesOrderID: "1"
                        }, {
                            ItemPosition: "10",
                            Note: "Foo - side effect",
                            SalesOrderID: "1"
                        }]
                });
                if (bSuccess) {
                    that.expectChange("note", [, "Foo - side effect"]);
                }
                return Promise.all([
                    oTableBinding.getContext().requestSideEffects(["SO_2_SOITEM"]).then(bSuccess ? null : mustFail(assert), function (oError0) {
                        assert.notOk(bSuccess);
                        assert.strictEqual(oError0.message, "HTTP request was not processed because the previous request failed");
                        assert.strictEqual(oError0.cause.message, "Request intentionally failed");
                    }),
                    bSuccess && oNewContext.created(),
                    that.waitForChanges(assert)
                ]);
            }).then(function () {
                if (bSuccess) {
                    return;
                }
                assert.strictEqual(oNewContext.getBinding(), oTableBinding);
                assert.strictEqual(oNewContext.getIndex(), 0);
                assert.strictEqual(oNewContext.getProperty("Note"), "First new row");
                that.expectChange("note", ["*First new row*"]);
                return Promise.all([
                    oNewContext.setProperty("Note", "*First new row*", null),
                    that.waitForChanges(assert, "check that new context still works fine")
                ]);
            }).then(function () {
                that.expectChange("creationRow::note", "Changed item note");
                that.oView.byId("creationRow::note").getBinding("value").setValue("Changed item note");
                return that.waitForChanges(assert);
            }).then(function () {
                that.expectChange("creationRow::note", null);
                if (!bSuccess && !bEmpty) {
                    that.expectChange("note", ["Foo"]);
                }
                return Promise.all([
                    oCreationRowContext.delete(),
                    checkCanceled(assert, oCreationRowContext.created()),
                    bSuccess || oNewContext.delete(),
                    bSuccess || checkCanceled(assert, oNewContext.created()),
                    that.waitForChanges(assert)
                ]);
            });
        });
    });
});
QUnit.test("ODataModel#hasPendingChanges: late properties and creation row", function (assert) {
    var oCreationRowContext, oCreationRowListBinding, oFormBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTableBinding, sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Input id=\"soCurrencyCode\" value=\"{CurrencyCode}\"/>\t<Table id=\"table\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox><FlexBox id=\"creationRow\">\t<Input id=\"creationRow::note\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=CurrencyCode,SalesOrderID", {
        CurrencyCode: "EUR",
        SalesOrderID: "1"
    }).expectRequest("SalesOrderList('1')/SO_2_SOITEM?$select=ItemPosition,Note,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                ItemPosition: "10",
                Note: "Foo",
                SalesOrderID: "1"
            }]
    }).expectChange("note", ["Foo"]).expectChange("soCurrencyCode", "EUR").expectChange("creationRow::note");
    return this.createView(assert, sView, oModel).then(function () {
        var oError = createErrorInsideBatch({ message: "Invalid currency code" });
        oFormBinding = that.oView.byId("form").getObjectBinding();
        that.oLogMock.expects("error").withArgs("Failed to update path /SalesOrderList('1')/CurrencyCode");
        that.expectRequest({
            method: "PATCH",
            payload: { CurrencyCode: "invalid" },
            url: "SalesOrderList('1')"
        }, oError).expectChange("soCurrencyCode", "invalid").expectMessages([{
                code: "CODE",
                message: "Invalid currency code",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oView.byId("soCurrencyCode").getBinding("value").setValue("invalid");
        assert.ok(oModel.hasPendingChanges());
        assert.ok(oModel.hasPendingChanges("$auto"));
        assert.ok(oFormBinding.hasPendingChanges(), "form is dirty");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectCanceledError("Failed to update path /SalesOrderList('1')/CurrencyCode", "Request canceled: PATCH SalesOrderList('1'); group: $parked.$auto").expectChange("soCurrencyCode", "EUR");
        oModel.resetChanges("$auto");
        assert.notOk(oModel.hasPendingChanges());
        assert.notOk(oModel.hasPendingChanges("$auto"));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("soCurrencyCode", "USD");
        that.oView.byId("soCurrencyCode").getBinding("value").setValue("USD");
        assert.ok(oModel.hasPendingChanges());
        assert.ok(oModel.hasPendingChanges("$auto"));
        that.expectCanceledError("Failed to update path /SalesOrderList('1')/CurrencyCode", "Request canceled: PATCH SalesOrderList('1'); group: $auto").expectChange("soCurrencyCode", "EUR");
        oModel.resetChanges("$auto");
        assert.notOk(oModel.hasPendingChanges());
        assert.notOk(oModel.hasPendingChanges("$auto"));
        return that.waitForChanges(assert);
    }).then(function () {
        oTableBinding = that.oView.byId("table").getBinding("items");
        oCreationRowListBinding = oModel.bindList(oTableBinding.getPath(), oTableBinding.getContext(), undefined, undefined, { $$updateGroupId: "doNotSubmit" });
        that.expectChange("creationRow::note", "New item note");
        oCreationRowContext = oCreationRowListBinding.create({ Note: "New item note" });
        that.oView.byId("creationRow").setBindingContext(oCreationRowContext);
        assert.ok(oFormBinding.hasPendingChanges());
        assert.ok(oCreationRowListBinding.hasPendingChanges());
        assert.ok(oModel.hasPendingChanges(), "consider all groups");
        assert.notOk(oModel.hasPendingChanges("$auto"));
        assert.ok(oModel.hasPendingChanges("doNotSubmit"), "creation row has changes");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("creationRow::note", null);
        return Promise.all([
            oCreationRowContext.delete(),
            checkCanceled(assert, oCreationRowContext.created()),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.notOk(oFormBinding.hasPendingChanges());
        assert.notOk(oCreationRowListBinding.hasPendingChanges());
        assert.notOk(oModel.hasPendingChanges(), "consider all groups");
        assert.notOk(oModel.hasPendingChanges("$auto"));
        assert.notOk(oModel.hasPendingChanges("doNotSubmit"), "creation row has changes");
    });
});
QUnit.test("create removes a nested property", function (assert) {
    var oCreatedContext, oModel = createSalesOrdersModel({
        autoExpandSelect: true,
        updateGroupId: "update"
    }), sView = "<Table id=\"table\" items=\"{/BusinessPartnerList}\">\t<Text id=\"city\" text=\"{Address/City}\"/>\t<Text id=\"type\" text=\"{Address/AddressType}\"/>\t<Text id=\"company\" text=\"{CompanyName}\"/></Table>", that = this;
    this.expectRequest("BusinessPartnerList?$select=Address/AddressType,Address/City" + ",BusinessPartnerID,CompanyName&$skip=0&$top=100", { value: [] }).expectChange("city", []).expectChange("type", []).expectChange("company", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("city", ["Heidelberg"]).expectChange("type", ["42"]).expectChange("company", ["Nestle"]).expectMessages([{
                "message": "The entity will be created via group 'update'. Cannot patch via" + " group '$direct'",
                "persistent": true,
                "technical": true,
                "type": "Error"
            }]);
        that.oLogMock.expects("error");
        oCreatedContext = that.oView.byId("table").getBinding("items").create({
            Address: { City: "Heidelberg" }
        }, true);
        return Promise.all([
            oCreatedContext.setProperty("Address/City", "St. Ingbert", "$direct").then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "The entity will be created via group" + " 'update'. Cannot patch via group '$direct'");
            }),
            oCreatedContext.setProperty("Address/AddressType", "42", null),
            oCreatedContext.setProperty("CompanyName", "Nestle", null),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "BusinessPartnerList",
            payload: { Address: { City: "Heidelberg" } }
        }, {
            Address: null,
            BusinessPartnerId: "1",
            CompanyName: "SAP"
        }).expectChange("city", [null]).expectChange("type", [null]).expectChange("company", ["SAP"]);
        return Promise.all([
            oModel.submitBatch("update"),
            oCreatedContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
[{
        expectations: function () {
            this.expectRequest({
                batchNo: 3,
                method: "POST",
                payload: { Note: "Created" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }, {
                Note: "Created",
                SalesOrderID: "43"
            }).expectRequest({
                batchNo: 3,
                method: "POST",
                payload: { Note: "Created as well" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }, {
                Note: "Created as well",
                SalesOrderID: "44"
            }).expectRequest({
                batchNo: 3,
                url: "BusinessPartnerList('4711')?$select=BP_2_SO" + "&$expand=BP_2_SO($select=Note,SalesOrderID)"
            }, {
                BusinessPartnerID: "4711",
                BP_2_SO: [{
                        Note: "Unrealistic",
                        SalesOrderID: "44"
                    }, {
                        Note: "Side",
                        SalesOrderID: "43"
                    }, {
                        Note: "Effect",
                        SalesOrderID: "0500000001"
                    }]
            }).expectChange("id", ["44", "43"]).expectChange("note", "Side", -1).expectChange("note", "Unrealistic", -2).expectChange("note", [, , "Effect"]);
        },
        text: "Repeated POST succeeds"
    }, {
        expectations: function () {
            var oCausingError = createError();
            this.oLogMock.expects("error").withArgs("POST on 'BusinessPartnerList('4711')/BP_2_SO'" + " failed; will be repeated automatically").twice();
            this.oLogMock.expects("error").withArgs("$batch failed");
            this.oLogMock.expects("error").withArgs("Failed to request side effects");
            this.expectRequest({
                batchNo: 3,
                method: "POST",
                payload: { Note: "Created" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }, oCausingError).expectRequest({
                batchNo: 3,
                method: "POST",
                payload: { Note: "Created as well" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }).expectRequest({
                batchNo: 3,
                url: "BusinessPartnerList('4711')?$select=BP_2_SO" + "&$expand=BP_2_SO($select=Note,SalesOrderID)"
            }).expectMessages([{
                    message: "Communication error: 500 ",
                    persistent: true,
                    technical: true,
                    technicalDetails: {
                        httpStatus: 500
                    },
                    type: "Error"
                }, {
                    message: "HTTP request was not processed because $batch failed",
                    persistent: true,
                    technical: true,
                    technicalDetails: {
                        httpStatus: 500
                    },
                    type: "Error"
                }]);
            return oCausingError;
        },
        text: "Repeated POST fails"
    }].forEach(function (oFixture) {
    QUnit.test("requestSideEffects repeats failed POST - " + oFixture.text, function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTableBinding, sView = "<FlexBox id=\"form\" binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" items=\"{BP_2_SO}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
        this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
            BusinessPartnerID: "4711",
            BP_2_SO: [{
                    Note: "Test",
                    SalesOrderID: "0500000001"
                }]
        }).expectChange("id", ["0500000001"]).expectChange("note", ["Test"]);
        return this.createView(assert, sView, oModel).then(function () {
            that.oLogMock.expects("error").withArgs("POST on 'BusinessPartnerList('4711')/BP_2_SO'" + " failed; will be repeated automatically").twice();
            that.oLogMock.expects("error").withArgs("$batch failed");
            that.expectChange("id", ["", "", "0500000001"]).expectChange("note", ["Created as well", "Created", "Test"]).expectRequest({
                batchNo: 2,
                method: "POST",
                payload: { Note: "Created" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }, createError()).expectRequest({
                batchNo: 2,
                method: "POST",
                payload: { Note: "Created as well" },
                url: "BusinessPartnerList('4711')/BP_2_SO"
            }).expectMessages([{
                    message: "Communication error: 500 ",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }, {
                    message: "HTTP request was not processed because $batch failed",
                    persistent: true,
                    technical: true,
                    type: "Error"
                }]);
            oTableBinding = that.oView.byId("table").getBinding("items");
            oTableBinding.create({ Note: "Created" }, true);
            oTableBinding.create({ Note: "Created as well" }, true);
            return that.waitForChanges(assert, "2 POSTs fail initially");
        }).then(function () {
            var oCausingError;
            assert.equal(oTableBinding.getLength(), 3);
            sap.ui.getCore().getMessageManager().removeAllMessages();
            that.expectMessages([]);
            oCausingError = oFixture.expectations.call(that);
            return Promise.all([
                that.oView.byId("form").getBindingContext().requestSideEffects([{
                        $NavigationPropertyPath: "BP_2_SO"
                    }]).then(function () {
                    assert.notOk(oCausingError);
                }, function (oError) {
                    if (!(oCausingError && oError.cause === oCausingError)) {
                        throw oError;
                    }
                }),
                that.waitForChanges(assert, "different expectations")
            ]);
        }).then(function () {
            var aContexts = oTableBinding.getCurrentContexts();
            assert.equal(oTableBinding.getLength(), 3);
            assert.strictEqual(aContexts[0].getIndex(), 0);
            assert.strictEqual(aContexts[1].getIndex(), 1);
            assert.strictEqual(aContexts[2].getIndex(), 2);
            if (aContexts[0].isTransient()) {
                assertIndices(assert, aContexts, [-2, -1, 0]);
                that.expectRequest({
                    method: "DELETE",
                    url: "SalesOrderList('0500000001')"
                });
                return Promise.all([
                    aContexts[2].delete(),
                    that.waitForChanges(assert, "BCP: 2170049510")
                ]);
            }
        });
    });
});
QUnit.skip("requestSideEffects keeps invisible transient contexts", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oTable, oTableBinding, sView = "<t:Table id=\"table\" rows=\"{/SalesOrderList}\" threshold=\"0\" visibleRowCount=\"2\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t<Text id=\"note\" text=\"{Note}\"/></t:Table>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=2", {
        value: [
            { Note: "Test 1", SalesOrderID: "0500000001" },
            { Note: "Test 2", SalesOrderID: "0500000002" }
        ]
    }).expectChange("id", ["0500000001", "0500000002"]).expectChange("note", ["Test 1", "Test 2"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error").withArgs("POST on 'SalesOrderList' failed; will be" + " repeated automatically");
        that.oLogMock.expects("error").withArgs("$batch failed");
        that.expectRequest({
            method: "POST",
            payload: { Note: "Created" },
            url: "SalesOrderList"
        }, createError()).expectMessages([{
                message: "Communication error: 500 ",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "HTTP request was not processed because $batch failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]).expectChange("id", ["", "0500000001"]).expectChange("note", ["Created", "Test 1"]);
        oTable = that.oView.byId("table");
        oTableBinding = oTable.getBinding("rows");
        oTableBinding.create({ Note: "Created" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("id", [, "0500000001", "0500000002"]).expectChange("note", [, "Test 1", "Test 2"]);
        oTable.setFirstVisibleRow(1);
        return that.waitForChanges(assert);
    }).then(function () {
        var oCausingError = createError();
        sap.ui.getCore().getMessageManager().removeAllMessages();
        that.oLogMock.expects("error").withArgs("POST on 'SalesOrderList' failed; will be" + " repeated automatically");
        that.oLogMock.expects("error").withArgs("Failed to get contexts for " + sSalesOrderService + "SalesOrderList with start index 1 and length 2");
        that.oLogMock.expects("error").withArgs("$batch failed");
        that.oLogMock.expects("error").withArgs("Failed to request side effects");
        that.expectRequest({
            batchNo: 3,
            method: "POST",
            payload: { Note: "Created" },
            url: "SalesOrderList"
        }, oCausingError).expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=2"
        }).expectMessages([{
                message: "Communication error: 500 ",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "HTTP request was not processed because $batch failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            oTableBinding.getHeaderContext().requestSideEffects([{
                    $NavigationPropertyPath: ""
                }]).then(mustFail(assert), function (oError) {
                if (!(oCausingError && oError.cause === oCausingError)) {
                    throw oError;
                }
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects waits for pending POST", function (assert) {
    var oCreatedRowContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), oRequestSideEffectsPromise, fnRespond, oTableBinding, sView = "<FlexBox id=\"form\" binding=\"{/BusinessPartnerList('4711')}\">\t<Table id=\"table\" items=\"{BP_2_SO}\">\t\t<Text id=\"id\" text=\"{SalesOrderID}\"/>\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID" + "&$expand=BP_2_SO($select=Note,SalesOrderID)", {
        BusinessPartnerID: "4711",
        BP_2_SO: [{
                Note: "Test",
                SalesOrderID: "0500000001"
            }]
    }).expectChange("id", ["0500000001"]).expectChange("note", ["Test"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error").withExactArgs("POST on 'BusinessPartnerList('4711')/BP_2_SO' failed; " + "will be repeated automatically", sinon.match.string, "sap.ui.model.odata.v4.ODataListBinding");
        that.oLogMock.expects("error").withExactArgs("$batch failed", sinon.match.string, "sap.ui.model.odata.v4.ODataModel");
        that.expectRequest({
            method: "POST",
            payload: { Note: "Created" },
            url: "BusinessPartnerList('4711')/BP_2_SO"
        }, new Promise(function (_resolve, reject) {
            fnRespond = reject.bind(null, createError());
        })).expectChange("id", ["", "0500000001"]).expectChange("note", ["Created", "Test"]);
        oTableBinding = that.oView.byId("table").getBinding("items");
        oCreatedRowContext = oTableBinding.create({ Note: "Created" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        var oFormContext = that.oView.byId("form").getBindingContext();
        oRequestSideEffectsPromise = oFormContext.requestSideEffects(["BP_2_SO"]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectMessages([{
                message: "Communication error: 500 ",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "HTTP request was not processed because $batch failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]).expectRequest({
            batchNo: 3,
            method: "POST",
            payload: { Note: "Created" },
            url: "BusinessPartnerList('4711')/BP_2_SO"
        }, {
            Note: "Created",
            SalesOrderID: "43"
        }).expectRequest({
            batchNo: 3,
            url: "BusinessPartnerList('4711')?$select=BP_2_SO" + "&$expand=BP_2_SO($select=Note,SalesOrderID)"
        }, {
            BusinessPartnerID: "4711",
            BP_2_SO: [{
                    Note: "Created",
                    SalesOrderID: "43"
                }, {
                    Note: "Test",
                    SalesOrderID: "0500000001"
                }]
        }).expectChange("id", ["43"]);
        fnRespond();
        return Promise.all([
            oRequestSideEffectsPromise,
            oCreatedRowContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects waits for pending PATCH", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oName, oRequestSideEffectsPromise, fnRespond, sView = "<FlexBox id=\"form\" binding=\"{/BusinessPartnerList('4711')}\">\t<Input id=\"name\" value=\"{CompanyName}\"/></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('4711')?$select=BusinessPartnerID,CompanyName", {
        BusinessPartnerID: "4711",
        CompanyName: "SAP AG"
    }).expectChange("name", "SAP AG");
    return this.createView(assert, sView, oModel).then(function () {
        that.oLogMock.expects("error").withArgs("Failed to update path " + "/BusinessPartnerList('4711')/CompanyName");
        that.oLogMock.expects("error").withArgs("$batch failed");
        that.expectRequest({
            method: "PATCH",
            payload: { CompanyName: "SAP SE" },
            url: "BusinessPartnerList('4711')"
        }, new Promise(function (_resolve, reject) {
            fnRespond = reject.bind(null, createError());
        })).expectChange("name", "SAP SE");
        oName = that.oView.byId("name");
        oName.getBinding("value").setValue("SAP SE");
        return that.waitForChanges(assert);
    }).then(function () {
        var oFormContext = that.oView.byId("form").getBindingContext();
        oRequestSideEffectsPromise = oFormContext.requestSideEffects([""]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectMessages([{
                message: "Communication error: 500 ",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "HTTP request was not processed because $batch failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]).expectRequest({
            batchNo: 3,
            method: "PATCH",
            payload: { CompanyName: "SAP SE" },
            url: "BusinessPartnerList('4711')"
        }, {}).expectRequest({
            batchNo: 3,
            url: "BusinessPartnerList('4711')?$select=BusinessPartnerID,CompanyName"
        }, {
            BusinessPartnerID: "4711",
            CompanyName: "SAP SE"
        });
        fnRespond();
        return Promise.all([
            oRequestSideEffectsPromise,
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: path reduction", function (assert) {
    var oContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{path : '/SalesOrderList(\\'42\\')', parameters : {$select : 'Messages'}}\">\t<FlexBox binding=\"{}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t\t<Table id=\"items\" items=\"{path : 'SO_2_SOITEM', parameters : {$$ownRequest : true}}\">\t\t\t<Text id=\"position\" text=\"{ItemPosition}\"/>\t\t\t<Text id=\"amount\" text=\"{GrossAmount}\"/>\t\t</Table>\t\t<Table id=\"schedules\" items=\"{path : 'SO_2_SCHDL', parameters : {$$ownRequest : true}}\">\t\t\t<Text id=\"key\" text=\"{ScheduleKey}\"/>\t\t</Table>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=Messages,Note,SalesOrderID", {
        Note: "Note",
        SalesOrderID: "42"
    }).expectChange("note", "Note").expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=GrossAmount,ItemPosition" + ",SalesOrderID&$skip=0&$top=100", {
        value: [
            { GrossAmount: "3.14", ItemPosition: "0010", SalesOrderID: "42" },
            { GrossAmount: "2.72", ItemPosition: "0020", SalesOrderID: "42" }
        ]
    }).expectChange("position", ["0010", "0020"]).expectChange("amount", ["3.14", "2.72"]).expectRequest("SalesOrderList('42')/SO_2_SCHDL?$select=ScheduleKey&$skip=0&$top=100", { value: [{ ScheduleKey: "A" }] }).expectChange("key", ["A"]);
    return this.createView(assert, sView, oModel).then(function () {
        oContext = that.oView.byId("items").getItems()[0].getBindingContext();
        that.expectRequest("SalesOrderList('42')?$select=Messages,Note", { Note: "refreshed Note" }).expectRequest("SalesOrderList('42')/SO_2_SOITEM" + "?$select=GrossAmount,ItemPosition,SalesOrderID" + "&$filter=SalesOrderID eq '42' and ItemPosition eq '0010'", {
            value: [
                { GrossAmount: "1.41", ItemPosition: "0010", SalesOrderID: "42" }
            ]
        }).expectRequest("SalesOrderList('42')/SO_2_SCHDL?$select=ScheduleKey" + "&$skip=0&$top=100", { value: [{ ScheduleKey: "B" }] }).expectChange("note", "refreshed Note").expectChange("amount", ["1.41"]).expectChange("key", ["B"]);
        return Promise.all([
            oContext.requestSideEffects([
                { $PropertyPath: "GrossAmount" },
                { $PropertyPath: "SOITEM_2_SO/Messages" },
                { $PropertyPath: "SOITEM_2_SO/Note" },
                { $NavigationPropertyPath: "SOITEM_2_SO/SO_2_SCHDL" }
            ]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=GrossAmount,ItemPosition" + ",SalesOrderID&$skip=0&$top=100", {
            value: [
                { GrossAmount: "10.42", ItemPosition: "0010", SalesOrderID: "42" },
                { GrossAmount: "30.42", ItemPosition: "0030", SalesOrderID: "42" }
            ]
        }).expectChange("position", [, "0030"]).expectChange("amount", ["10.42", "30.42"]);
        return Promise.all([
            oContext.requestSideEffects([
                { $PropertyPath: "*" },
                { $NavigationPropertyPath: "SOITEM_2_SO/SO_2_SOITEM" }
            ]),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('42')/SO_2_SOITEM?$select=GrossAmount,ItemPosition" + ",SalesOrderID&$skip=0&$top=100", {
            value: [
                { GrossAmount: "110.42", ItemPosition: "0010", SalesOrderID: "42" },
                { GrossAmount: "130.42", ItemPosition: "0030", SalesOrderID: "42" },
                { GrossAmount: "140.42", ItemPosition: "0040", SalesOrderID: "42" }
            ]
        }).expectChange("position", [, , "0040"]).expectChange("amount", ["110.42", "130.42", "140.42"]);
        return Promise.all([
            oContext.requestSideEffects([
                { $NavigationPropertyPath: "" },
                { $NavigationPropertyPath: "SOITEM_2_SO/SO_2_SOITEM" }
            ]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: parent cache of a list binding", function (assert) {
    var oModel = createSpecialCasesModel({
        autoExpandSelect: true,
        updateGroupId: "update1"
    }), sView = "<FlexBox binding=\"{/As(1)}\">\t<Text id=\"avalue::form\" text=\"{AValue}\"/>\t<Table id=\"table\" items=\"{path : 'AtoCs', parameters : {$$updateGroupId : 'update2'}}\">\t\t<Text id=\"cid\" text=\"{CID}\"/>\t\t<Text id=\"avalue::table\" text=\"{CtoA/AValue}\"/>\t</Table></FlexBox><FlexBox id=\"form\" binding=\"{CtoD}\">\t<Text text=\"{DID}\"/>\t<Text id=\"dvalue\" text=\"{DValue}\"/></FlexBox>", that = this;
    this.expectRequest("As(1)?$select=AID,AValue", {
        AID: 1,
        AValue: 11
    }).expectChange("avalue::form", "11").expectRequest("As(1)/AtoCs?$select=CID&$expand=CtoA($select=AID,AValue)" + "&$skip=0&$top=100", {
        value: [{
                CID: 2,
                CtoA: {
                    AID: 1,
                    AValue: 11
                },
                CValue: 21
            }]
    }).expectChange("avalue::table", "11").expectChange("cid", ["2"]).expectChange("dvalue");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("As(1)/AtoCs(2)?$select=CtoD&$expand=CtoD($select=DID,DValue)", {
            CtoD: {
                DID: 3,
                DValue: 103
            }
        }).expectChange("dvalue", "103");
        that.oView.byId("form").setBindingContext(that.oView.byId("table").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("As(1)?$select=AValue", { AValue: 121 }).expectChange("avalue::form", "121").expectRequest("As(1)/AtoCs?$select=CID&$expand=CtoA($select=AID,AValue)" + "&$filter=CID eq 2", {
            value: [{
                    CID: 2,
                    CtoA: {
                        AID: 1,
                        AValue: 122
                    }
                }]
        }).expectChange("avalue::table", "122");
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestSideEffects([{ $PropertyPath: "DtoC/CtoA/AValue" }], "$auto"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("requestSideEffects: path reduction and bubble up", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/As(1)}\">\t<Text id=\"aValue\" text=\"{AValue}\"/>\t<FlexBox id=\"bInstance\" binding=\"{AtoB}\">\t\t<Text id=\"bValue\" text=\"{BValue}\"/>\t</FlexBox></FlexBox>", that = this;
    this.expectRequest("As(1)?$select=AID,AValue&$expand=AtoB($select=BID,BValue)", {
        AID: 1,
        AValue: 11,
        AtoB: {
            BID: 2,
            BValue: 12
        }
    }).expectChange("aValue", "11").expectChange("bValue", "12");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("bInstance").getElementBinding().getBoundContext();
        that.expectRequest("As(1)?$select=AValue&$expand=AtoB($select=BID,BValue)", {
            AValue: 111,
            AtoB: {
                BID: 2,
                BValue: 112
            }
        }).expectChange("aValue", "111").expectChange("bValue", "112");
        return Promise.all([
            oContext.requestSideEffects(["BtoA/AValue", "BValue"]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODCB: requestRefresh w/o own request", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/BusinessPartnerList('42')}\">\t<Table id=\"table\" items=\"{path : 'BP_2_SO', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"note\" text=\"{Note}\" />\t</Table></FlexBox>", that = this;
    this.expectRequest("BusinessPartnerList('42')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                Note: "Test",
                SalesOrderID: "0500000001"
            }]
    }).expectChange("note", ["Test"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("BusinessPartnerList('42')/BP_2_SO?$select=Note,SalesOrderID" + "&$skip=0&$top=100", {
            value: [{
                    Note: "Test - updated",
                    SalesOrderID: "0500000001"
                }]
        }).expectChange("note", ["Test - updated"]);
        return Promise.all([
            that.oView.byId("form").getBindingContext().requestRefresh(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("hasPendingChanges + resetChanges work for late child bindings", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"orders\" items=\"{path : '/SalesOrderList', parameters : {\t\t$expand : {\t\t\tSO_2_SOITEM : {\t\t\t\t$select : ['ItemPosition','Note','SalesOrderID']\t\t\t}\t\t},\t\t$select : 'Note'\t}}\">\t<Input id=\"note\" value=\"{Note}\"/></Table><Table id=\"items\" items=\"{SO_2_SOITEM}\">\t<Text id=\"itemNote\" text=\"{Note}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList" + "?$expand=SO_2_SOITEM($select=ItemPosition,Note,SalesOrderID)" + "&$select=Note,SalesOrderID" + "&$skip=0&$top=100", {
        value: [{
                Note: "SO_1",
                SalesOrderID: "1",
                SO_2_SOITEM: [{
                        ItemPosition: "10",
                        Note: "Item_10",
                        SalesOrderID: "1"
                    }]
            }]
    }).expectChange("note", ["SO_1"]).expectChange("itemNote", []);
    return this.createView(assert, sView, oModel).then(function () {
        var oOrdersTable = that.oView.byId("orders"), oOrdersBinding = oOrdersTable.getBinding("items");
        that.expectChange("note", ["SO_1 changed"]).expectChange("note", ["SO_1"]);
        oOrdersTable.getItems()[0].getCells()[0].getBinding("value").setValue("SO_1 changed");
        assert.ok(oOrdersBinding.hasPendingChanges());
        that.expectChange("itemNote", ["Item_10"]);
        that.oView.byId("items").setBindingContext(oOrdersBinding.getCurrentContexts()[0]);
        assert.ok(oOrdersBinding.hasPendingChanges());
        that.expectCanceledError("Failed to update path /SalesOrderList('1')/Note", "Request canceled: PATCH SalesOrderList('1'); group: $auto");
        return Promise.all([
            oOrdersBinding.resetChanges().then(function () {
                assert.notOk(oOrdersBinding.hasPendingChanges());
            }),
            that.waitForChanges(assert)
        ]);
    });
});
[
    function (assert, oModel, oBinding, oCreatedContext) {
        this.expectChange("note", "New");
        this.oView.byId("form").setBindingContext(oCreatedContext);
        assert.notOk(oModel.hasPendingChanges());
        assert.notOk(oBinding.hasPendingChanges());
        return this.waitForChanges(assert);
    },
    function (assert, oModel, oBinding, oCreatedContext) {
        var oPropertyBinding = oModel.bindProperty("Note", oCreatedContext);
        this.expectChange("note", "Modified");
        oPropertyBinding.initialize();
        oPropertyBinding.setValue("Modified");
        this.oView.byId("form").setBindingContext(oCreatedContext);
        assert.ok(oModel.hasPendingChanges());
        assert.ok(oBinding.hasPendingChanges());
        this.expectCanceledError("Failed to update path /SalesOrderList('43')/Note", "Request canceled: PATCH SalesOrderList('43'); group: $auto").expectChange("note", "New");
        return Promise.all([
            oBinding.resetChanges().then(function () {
                assert.notOk(oModel.hasPendingChanges());
                assert.notOk(oBinding.hasPendingChanges());
            }),
            this.waitForChanges(assert)
        ]);
    }
].forEach(function (fnTest, i) {
    var sTitle = "hasPendingChanges/resetChanges: late properties for a list binding without a UI" + " and with a persisted created entity, #" + i;
    QUnit.test(sTitle, function (assert) {
        var oCreatedContext, oListBindingWithoutUI, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\">\t<Text id=\"note\" text=\"{Note}\"/>\t<Table id=\"items\" items=\"{SO_2_SOITEM}\">\t\t<Text text=\"{ItemPosition}\"/>\t</Table></FlexBox>", that = this;
        oListBindingWithoutUI = oModel.bindList("/SalesOrderList", null, [], [], { $expand: { SO_2_SOITEM: null } });
        this.expectChange("note");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest({
                method: "POST",
                url: "SalesOrderList",
                payload: {}
            }, {
                Note: "New",
                SalesOrderID: "43"
            }).expectRequest("SalesOrderList('43')?$expand=SO_2_SOITEM", {
                Note: "New",
                SalesOrderID: "43",
                SO_2_SOITEM: []
            });
            oCreatedContext = oListBindingWithoutUI.create();
            assert.ok(oModel.hasPendingChanges());
            assert.ok(oListBindingWithoutUI.hasPendingChanges());
            return Promise.all([
                oCreatedContext.created(),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            assert.notOk(oModel.hasPendingChanges());
            assert.notOk(oListBindingWithoutUI.hasPendingChanges());
            return fnTest.call(that, assert, oModel, oListBindingWithoutUI, oCreatedContext);
        });
    });
});
QUnit.test("create an entity and immediately reset changes (no UI)", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oListBindingWithoutUI = oModel.bindList("/SalesOrderList"), oCreatedPromise = oListBindingWithoutUI.create({}, true).created();
        assert.ok(oModel.hasPendingChanges());
        assert.ok(oListBindingWithoutUI.hasPendingChanges());
        assert.strictEqual(oListBindingWithoutUI.getLength(), 1 + 10);
        return oListBindingWithoutUI.resetChanges().then(function () {
            assert.notOk(oModel.hasPendingChanges());
            assert.notOk(oListBindingWithoutUI.hasPendingChanges());
            assert.strictEqual(oListBindingWithoutUI.getLength(), 0);
            return Promise.all([
                checkCanceled(assert, oCreatedPromise),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("Create relative via controller + resetChanges on parent", function (assert) {
    var oFormBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Table id=\"table\" items=\"{SO_2_SOITEM}\">\t\t<Text id=\"note\" text=\"{Note}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=SalesOrderID" + "&$expand=SO_2_SOITEM($select=ItemPosition,Note,SalesOrderID)", {
        SalesOrderID: "1",
        SO_2_SOITEM: [{
                ItemPosition: "10",
                Note: "Foo",
                SalesOrderID: "1"
            }]
    }).expectChange("note", ["Foo"]);
    return this.createView(assert, sView, oModel).then(function () {
        var oCreatedPromise;
        oFormBinding = that.oView.byId("form").getObjectBinding();
        oCreatedPromise = oModel.bindList("SO_2_SOITEM", oFormBinding.getBoundContext(), undefined, undefined, { $$updateGroupId: "doNotSubmit" }).create({}, true).created();
        return Promise.all([
            oFormBinding.resetChanges(),
            oCreatedPromise.then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Request canceled: POST SalesOrderList('1')/SO_2_SOITEM; group: doNotSubmit");
                assert.ok(oError.canceled);
            })
        ]);
    }).then(function () {
        assert.notOk(oFormBinding.hasPendingChanges());
    });
});
QUnit.test("unpark keeps response processing order", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('4711')}\">\t<Input id=\"note\" value=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('4711')?$select=Note,SalesOrderID", {
        Note: "original",
        SalesOrderID: "4711"
    }).expectChange("note", "original");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("note", "modified").expectRequest({
            method: "PATCH",
            url: "SalesOrderList('4711')",
            payload: { Note: "modified" }
        }, createErrorInsideBatch({ target: "Note" })).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                target: "/SalesOrderList('4711')/Note",
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error");
        that.oView.byId("note").getBinding("value").setValue("modified");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "PATCH",
            url: "SalesOrderList('4711')",
            payload: { Note: "modified" }
        }, {
            Note: "modified",
            SalesOrderID: "4711"
        }).expectRequest("SalesOrderList('4711')?$select=Note", {
            Note: "side effect"
        }).expectChange("note", "side effect");
        return Promise.all([
            that.oView.byId("form").getObjectBinding().getBoundContext().requestSideEffects([{ $PropertyPath: "Note" }]),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODataModel#changeHttpHeaders", function (assert) {
    var mHeaders = { Authorization: "Bearer xyz" }, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Text id=\"name\" text=\"{/EMPLOYEES(0)/Name}\"/>", that = this;
    this.expectRequest("EMPLOYEES(0)/Name", { value: "Frederic Fall" }).expectChange("name", "Frederic Fall");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            headers: mHeaders,
            url: "EMPLOYEES(0)/Name"
        }, { value: "Frederic Fall" });
        oModel.changeHttpHeaders(mHeaders);
        that.oView.byId("name").getBinding("text").refresh();
        return that.waitForChanges(assert);
    });
});
[false, true].forEach(function (bEarlyRequests) {
    QUnit.test("securityTokenHandlers: earlyRequests: " + bEarlyRequests, function (assert) {
        var oModel, mExpectedHeaders = {
            SomeSecurityTokenHeader: "foo",
            SomeOtherSecurityTokenHeader: "bar",
            "X-CSRF-Token": undefined
        }, sView = "<Text id=\"name\" text=\"{/EMPLOYEES(0)/Name}\"/>", that = this;
        function securityTokenHandler0(sServiceUrl) {
            assert.strictEqual(sServiceUrl, "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/");
            return undefined;
        }
        function securityTokenHandler1(sServiceUrl) {
            assert.strictEqual(sServiceUrl, "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/");
            return Promise.resolve({
                SomeSecurityTokenHeader: "foo",
                SomeOtherSecurityTokenHeader: "bar"
            });
        }
        function securityTokenHandler2() {
            return Promise.resolve({
                SomeSecurityTokenHeader: "only first matching handler wins"
            });
        }
        sap.ui.getCore().getConfiguration().setSecurityTokenHandlers([
            securityTokenHandler0,
            securityTokenHandler1,
            securityTokenHandler2
        ]);
        oModel = createTeaBusiModel({ autoExpandSelect: true, earlyRequests: bEarlyRequests });
        this.expectRequest({
            headers: mExpectedHeaders,
            url: "EMPLOYEES(0)/Name"
        }, { value: "Frederic Fall" }).expectChange("name", "Frederic Fall");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest({
                headers: mExpectedHeaders,
                url: "EMPLOYEES(0)/Name"
            }, { value: "Frederic Fall" });
            that.oView.byId("name").getBinding("text").refresh();
            return that.waitForChanges(assert);
        }).finally(function () {
            sap.ui.getCore().getConfiguration().setSecurityTokenHandlers([]);
        });
    });
});
QUnit.test("Server-driven paging with sap.m.Table", function (assert) {
    var sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\" growing=\"true\" growingThreshold=\"10\">\t<Text id=\"text\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$skip=0&$top=10", {
        value: [
            { ID: "1", Name: "Peter Burke" },
            { ID: "2", Name: "Frederic Fall" }
        ],
        "@odata.nextLink": "~nextLink"
    }).expectChange("text", ["Peter Burke", "Frederic Fall"]);
    return this.createView(assert, sView).then(function () {
        that.expectRequest("EMPLOYEES?$skip=2&$top=18", {
            value: [
                { ID: "3", Name: "John Field" },
                { ID: "4", Name: "Susan Bay" }
            ],
            "@odata.nextLink": "~nextLink1"
        }).expectChange("text", [, , "John Field", "Susan Bay"]);
        that.oView.byId("table").requestItems();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Server-driven paging with t:Table: no remove behind gap", function (assert) {
    var oTable, sView = "<t:Table id=\"table\" rows=\"{/EMPLOYEES}\" threshold=\"0\" visibleRowCount=\"3\">\t<Text id=\"text\" text=\"{Name}\"/></t:Table>", that = this;
    this.expectRequest("EMPLOYEES?$skip=0&$top=3", {
        value: [
            { ID: "1", Name: "Peter Burke" },
            { ID: "2", Name: "Frederic Fall" }
        ],
        "@odata.nextLink": "~nextLink"
    }).expectRequest("EMPLOYEES?$skip=2&$top=1", {
        value: [
            { ID: "3", Name: "Carla Blue" }
        ]
    }).expectChange("text", ["Peter Burke", "Frederic Fall", "Carla Blue"]);
    return this.createView(assert, sView).then(function () {
        oTable = that.oView.byId("table");
        that.expectRequest("EMPLOYEES?$skip=7&$top=3", {
            value: [
                { ID: "8", Name: "John Field" },
                { ID: "9", Name: "Susan Bay" }
            ],
            "@odata.nextLink": "~nextLink1"
        }).expectRequest("EMPLOYEES?$skip=9&$top=1", {
            value: [
                { ID: "10", Name: "Daniel Red" }
            ]
        }).expectChange("text", null, null).expectChange("text", null, null).expectChange("text", null, null).expectChange("text", [, , , , , , , "John Field", "Susan Bay", "Daniel Red"]);
        oTable.setFirstVisibleRow(7);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("EMPLOYEES?$skip=3&$top=3", {
            value: [
                { ID: "4", Name: "Alice Grey" },
                { ID: "5", Name: "Bob Green" }
            ],
            "@odata.nextLink": "~nextLink2"
        }).expectRequest("EMPLOYEES?$skip=5&$top=1", {
            value: [
                { ID: "6", Name: "Erica Brown" }
            ]
        }).expectChange("text", null, null).expectChange("text", null, null).expectChange("text", null, null).expectChange("text", [, , , "Alice Grey", "Bob Green", "Erica Brown"]);
        oTable.setFirstVisibleRow(3);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("text", [, , , , , , , "John Field", "Susan Bay", "Daniel Red"]);
        oTable.setFirstVisibleRow(7);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Server-driven paging with t:Table: do not read prefetch", function (assert) {
    var sView = "<t:Table id=\"table\" rows=\"{/EMPLOYEES}\" visibleRowCount=\"3\">\t<Text id=\"text\" text=\"{Name}\"/></t:Table>";
    this.expectRequest("EMPLOYEES?$skip=0&$top=103", {
        value: [
            { ID: "1", Name: "Peter Burke" },
            { ID: "2", Name: "Frederic Fall" }
        ],
        "@odata.nextLink": "~nextLink"
    }).expectRequest("EMPLOYEES?$skip=2&$top=1", {
        value: [
            { ID: "3", Name: "John Field" }
        ]
    }).expectChange("text", ["Peter Burke", "Frederic Fall", "John Field"]);
    return this.createView(assert, sView);
});
QUnit.skip("Server-driven paging with OLDB#requestContexts", function (assert) {
    var that = this;
    return this.createView(assert).then(function () {
        var oBinding = that.oModel.bindList("/EMPLOYEES"), oPromise;
        that.expectRequest("EMPLOYEES?$skip=0&$top=3", {
            value: [
                { ID: "1", Name: "Peter Burke" },
                { ID: "2", Name: "Frederic Fall" }
            ],
            "@odata.nextLink": "~nextLink"
        }).expectRequest("~nextLink", {
            value: [
                { ID: "3", Name: "John Field" }
            ]
        });
        oPromise = oBinding.requestContexts(0, 3).then(function (aContexts) {
            assert.deepEqual(aContexts.map(getPath), [
                "/EMPLOYEES('1')",
                "/EMPLOYEES('2')",
                "/EMPLOYEES('3')"
            ]);
        });
        return Promise.all([
            oPromise,
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 1970517588 - invalid property path", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"teamId\" text=\"{Team_Id}\"/>\t<Text id=\"name\" text=\"{TEAM_2_EMPLOYEES/Name}\"/></FlexBox>";
    this.oLogMock.expects("error").withArgs("Failed to drill-down into TEAM_2_EMPLOYEES/Name, invalid segment: Name");
    this.expectRequest("TEAMS('TEAM_01')?$select=Team_Id" + "&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
        Team_Id: "TEAM_01",
        TEAM_2_EMPLOYEES: []
    }).expectChange("teamId", "TEAM_01").expectChange("name", null);
    return this.createView(assert, sView, oModel);
});
QUnit.test("CPOUI5UISERVICESV3-2025, CPOUI5ODATAV4-204", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/TEAMS}\">\t<Text id=\"teamId\" text=\"{Team_Id}\"/></Table><FlexBox id=\"detail\">\t<Table id=\"employees\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t</Table>\t<Text id=\"managerId\" text=\"{MANAGER_ID}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS?$select=Team_Id&$skip=0&$top=100", {
        value: [{
                Team_Id: "TEAM_01"
            }]
    }).expectChange("teamId", ["TEAM_01"]).expectChange("name", []).expectChange("managerId");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("table").getItems()[0].getBindingContext();
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name&$skip=0&$top=100", { value: [{ ID: "2", Name: "Frederic Fall" }] }).expectChange("name", ["Frederic Fall"]).expectRequest("TEAMS('TEAM_01')?$select=MANAGER_ID", { MANAGER_ID: "5" }).expectChange("managerId", "5");
        that.oView.byId("detail").setBindingContext(oContext);
        assert.deepEqual(oContext.getObject(), { Team_Id: "TEAM_01" });
        return that.waitForChanges(assert);
    });
});
QUnit.test("CPOUI5UISERVICESV3-2033", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{TEAMS}\">\t<Text id=\"teamId\" text=\"{Team_Id}\"/></Table>", that = this;
    this.expectChange("teamId", []);
    return this.createView(assert, sView, oModel).then(function () {
        var oRootContext = that.oModel.createBindingContext("/"), oTable = that.oView.byId("table"), oListBinding = oTable.getBinding("items");
        that.expectCanceledError("Failed to create cache for binding " + sODLB + ": /|TEAMS", "Cache discarded as a new cache has been created").expectCanceledError(sODLB + ": /|TEAMS: Failed to enhance query options for" + " auto-$expand/$select for child Team_Id", "Cache discarded as a new cache has been created").expectRequest("TEAMS?$select=Team_Id&$orderby=Team_Id&$filter=Budget gt 42" + "&$skip=0&$top=100", {
            value: [{
                    Team_Id: "TEAM_01"
                }]
        }).expectChange("teamId", ["TEAM_01"]);
        oTable.setBindingContext(oRootContext);
        oListBinding.suspend();
        oListBinding.filter(new Filter("Budget", FilterOperator.GT, 42));
        oListBinding.sort(new Sorter("Team_Id"));
        oListBinding.resume();
        return that.waitForChanges(assert);
    });
});
QUnit.test("CPOUI5ODATAV4-14", function (assert) {
    var oBinding, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/TEAMS('42')}\" id=\"form\">\t<Input id=\"name\" value=\"{Name}\"/>\t<Input id=\"budget\" value=\"{path : 'Budget', parameters : {$$noPatch : true}}\"/>\t<Input id=\"teamId\"\t\tvalue=\"{path : 'TEAM_2_MANAGER/TEAM_ID', parameters : {$$noPatch : true}}\"/></FlexBox>", that = this;
    this.expectRequest("TEAMS('42')?$select=Budget,Name,Team_Id" + "&$expand=TEAM_2_MANAGER($select=ID,TEAM_ID)", {
        Budget: 1234,
        Name: "Team #1",
        Team_Id: "42",
        TEAM_2_MANAGER: null
    }).expectChange("budget", "1,234").expectChange("name", "Team #1").expectChange("teamId", null);
    return this.createView(assert, sView, oModel).then(function () {
        oBinding = that.oView.byId("form").getObjectBinding();
        that.expectChange("name", "changed");
        return Promise.all([
            oBinding.getBoundContext().setProperty("Name", "changed", null),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("TEAMS('42')?$select=Budget,Name,Team_Id" + "&$expand=TEAM_2_MANAGER($select=ID,TEAM_ID)", {
            Budget: 1234,
            Name: "Team #1",
            Team_Id: "42",
            TEAM_2_MANAGER: null
        }).expectChange("name", "Team #1");
        oBinding.refresh();
        return that.waitForChanges(assert);
    }).then(function () {
        var oContextBinding = oModel.bindContext("/TEAMS('42')");
        that.oLogMock.expects("error").withExactArgs("Failed to update path /TEAMS('42')/Name", sinon.match("Unexpected request: GET TEAMS('42')"), "sap.ui.model.odata.v4.Context");
        that.expectMessages([{
                "message": "Unexpected request: GET TEAMS('42')",
                "persistent": true,
                "technical": true,
                "type": "Error"
            }]);
        return Promise.all([
            oContextBinding.getBoundContext().setProperty("Name", "changed", null).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Unexpected request: GET TEAMS('42')");
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("budget", "54,321").expectChange("teamId", "42");
        return Promise.all([
            that.oView.byId("budget").getBinding("value").setValue(54321),
            that.oView.byId("teamId").getBinding("value").setValue("42"),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("TEAMS('42')?$select=Budget,Name,Team_Id" + "&$expand=TEAM_2_MANAGER($select=ID,TEAM_ID)", {
            Budget: 1234,
            Name: "Team #1",
            Team_Id: "42",
            TEAM_2_MANAGER: null
        }).expectChange("budget", "1,234").expectChange("teamId", null);
        oBinding.refresh();
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2070199671", function () {
    var oModel = createTeaBusiModel({ updateGroupId: "doNotSubmit" }), oListBinding = oModel.bindList("/TEAMS"), oTransientContext = oListBinding.create({ TEAM_2_MANAGER: {} });
    return oTransientContext.setProperty("TEAM_2_MANAGER/TEAM_ID", "42", null);
});
QUnit.test("CPOUI5ODATAV4-108 what if context has changed in the meantime", function (assert) {
    var oModel = createTeaBusiModel({ groupId: "$direct" }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oModel = that.oModel, oContextBinding = oModel.bindContext("Manager_to_Team"), fnRespond;
        oContextBinding.setContext(oModel.bindContext("/MANAGERS('1')", null, { $expand: "Manager_to_Team" }).getBoundContext());
        that.expectRequest("MANAGERS('1')?$expand=Manager_to_Team", new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                ID: "1",
                Manager_to_Team: {
                    Name: "Team #1",
                    Team_Id: "Team_01"
                }
            });
        }));
        return Promise.all([
            oContextBinding.getBoundContext().setProperty("Name", "Darth Vader").then(mustFail(assert), function () {
                assert.ok(true);
            }),
            resolveLater(function () {
                oContextBinding.setContext(oModel.bindContext("/MANAGERS('2')", null, { $expand: "Manager_to_Team" }).getBoundContext());
                fnRespond();
            }, 10),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 1970600374 (CPOUI5ODATAV4-34)", function (assert) {
    var oInput, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{path : '', parameters : {$$ownRequest : true}}\">\t<Input id=\"name\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("name");
    return this.createView(assert, sView, oModel).then(function () {
        oInput = that.oView.byId("name");
        that.expectRequest("TEAMS('TEAM_01')?$select=Name,Team_Id", {
            Name: "Team #1",
            Team_Id: "TEAM_01"
        }).expectChange("name", "Team #1");
        that.oView.setBindingContext(oModel.bindContext("/TEAMS('TEAM_01')").getBoundContext());
        return that.waitForChanges(assert);
    }).then(function () {
        var sErrorMessage = sODCB + ": /TEAMS('TEAM_02')|" + " is ignoring response from inactive cache: " + sTeaBusi + "TEAMS('TEAM_01')?$select=Name,Team_Id", oPromise, fnRespond;
        that.expectRequest("TEAMS('TEAM_01')?$select=Name,Team_Id", new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                Name: "n/a",
                Team_Id: "TEAM_01"
            });
        }));
        oPromise = oInput.getBindingContext().requestSideEffects([""]);
        that.expectRequest("TEAMS('TEAM_02')?$select=Name,Team_Id", {
            Name: "Team #2",
            Team_Id: "TEAM_02"
        }).expectCanceledError("Failed to read path /TEAMS('TEAM_01')", sErrorMessage).expectCanceledError("Failed to read path /TEAMS('TEAM_01')/Name", sErrorMessage).expectChange("name", "Team #2");
        setTimeout(function () {
            that.oView.setBindingContext(oModel.bindContext("/TEAMS('TEAM_02')").getBoundContext());
            setTimeout(fnRespond, 0);
        }, 0);
        return Promise.all([
            oPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectChange("name", "Palpatine").expectRequest({
            method: "PATCH",
            payload: { Name: "Palpatine" },
            url: "TEAMS('TEAM_02')"
        }, {});
        oInput.getBinding("value").setValue("Palpatine");
        return that.waitForChanges(assert);
    });
});
QUnit.test("CPOUI5ODATAV4-34: ODLB instead of ODCB", function (assert) {
    var oContext, oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table id=\"table\" items=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true}}\">\t<Input id=\"name\" value=\"{Name}\"/></Table>", that = this;
    this.expectChange("name", []);
    return this.createView(assert, sView, oModel).then(function () {
        oContext = oModel.bindContext("/TEAMS('TEAM_01')").getBoundContext();
        oTable = that.oView.byId("table");
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name" + "&$skip=0&$top=100", {
            value: [{ ID: "1", Name: "Jonathan Smith" }]
        }).expectChange("name", ["Jonathan Smith"]);
        oTable.setBindingContext(oContext);
        return that.waitForChanges(assert);
    }).then(function () {
        var oBinding, oPromise, fnRespond;
        that.expectRequest("TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name" + "&$skip=0&$top=100", new Promise(function (resolve) {
            fnRespond = resolve.bind(null, {
                value: [{ ID: "1", Name: "Darth Vader" }]
            });
        }));
        oBinding = oTable.getBinding("items");
        oPromise = oBinding.getHeaderContext().requestSideEffects([""]);
        that.expectRequest("TEAMS('TEAM_02')/TEAM_2_EMPLOYEES?$select=ID,Name" + "&$skip=0&$top=100", {
            value: [{ ID: "2", Name: "Frederic Fall" }]
        }).expectCanceledError("Failed to get contexts for " + sTeaBusi + "TEAMS('TEAM_01')/TEAM_2_EMPLOYEES with start index 0 and length 100", sODLB + ": /TEAMS('TEAM_02')|TEAM_2_EMPLOYEES" + " is ignoring response from inactive cache: " + sTeaBusi + "TEAMS('TEAM_01')/TEAM_2_EMPLOYEES?$select=ID,Name").expectChange("name", ["Frederic Fall"]);
        setTimeout(function () {
            oTable.setBindingContext(oModel.bindContext("/TEAMS('TEAM_02')").getBoundContext());
            setTimeout(fnRespond, 0);
        }, 0);
        return Promise.all([
            oPromise,
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        var oInput = oTable.getItems()[0].getCells()[0];
        that.expectChange("name", ["Palpatine"]).expectRequest({
            method: "PATCH",
            payload: { Name: "Palpatine" },
            url: "EMPLOYEES('2')"
        }, {});
        oInput.getBinding("value").setValue("Palpatine");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("name", ["Darth Vader"]);
        oTable.setBindingContext(oContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("CPOUI5ODATAV4-34: bKeepCacheOnError & transient rows", function (assert) {
    var oListBinding, oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), oNewContext, sView = "<Table id=\"table\" items=\"{/TEAMS}\">\t<Input id=\"name\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", {
        value: [
            { Name: "Team 01", Team_Id: "Team_01" },
            { Name: "Team 02", Team_Id: "Team_02" }
        ]
    }).expectChange("name", ["Team 01", "Team 02"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("name", ["Team 00", "Team 01", "Team 02"]);
        oListBinding = that.oView.byId("table").getBinding("items");
        oNewContext = oListBinding.create({ Name: "Team 00", Team_Id: "Team_00" }, true);
        assert.strictEqual(oNewContext.getIndex(), 0);
        assertIndices(assert, oListBinding.getCurrentContexts(), [-1, 0, 1]);
        return that.waitForChanges(assert);
    }).then(function () {
        var oError = new Error("418 I'm a teapot"), oSideEffectsPromise;
        that.expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", oError).expectMessages([{
                message: oError.message,
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withExactArgs("Failed to get contexts for " + sTeaBusi + "TEAMS with start index 0 and length 100", sinon.match.string, "sap.ui.model.odata.v4.ODataListBinding");
        oSideEffectsPromise = oListBinding.getHeaderContext().requestSideEffects([{ $NavigationPropertyPath: "" }], "$direct");
        return Promise.all([
            oSideEffectsPromise.then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0, oError);
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        assert.strictEqual(oNewContext.getIndex(), 0);
        assertIndices(assert, oListBinding.getCurrentContexts(), [-1, 0, 1]);
        that.expectRequest({
            method: "POST",
            url: "TEAMS",
            payload: { Name: "Team 00", Team_Id: "Team_00" }
        }, { Name: "Team 00", Team_Id: "Team_00" });
        return Promise.all([
            oModel.submitBatch("update"),
            oNewContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2080439734: concurrent requestSideEffects", function (assert) {
    var oHeaderContext, oModel = createTeaBusiModel({ autoExpandSelect: true }), oPromise1, oPromise2, fnResolve, sView = "<Table id=\"table\" items=\"{/TEAMS}\">\t<Input id=\"name\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", {
        value: [
            { Name: "Team 01", Team_Id: "01" }
        ]
    }).expectChange("name", ["Team 01"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", new Promise(function (resolve) { fnResolve = resolve; }));
        oHeaderContext = that.oView.byId("table").getBinding("items").getHeaderContext();
        oPromise1 = oHeaderContext.requestSideEffects([""]);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectCanceledError("Failed to get contexts for " + sTeaBusi + "TEAMS with start index 0 and length 100", sODLB + ": /TEAMS is ignoring response from inactive cache: " + sTeaBusi + "TEAMS?$select=Name,Team_Id").expectRequest("TEAMS?$select=Name,Team_Id&$skip=0&$top=100", {
            value: [
                { Name: "Team 01*", Team_Id: "01" }
            ]
        }).expectChange("name", ["Team 01*"]);
        oPromise2 = oHeaderContext.requestSideEffects([""]);
        fnResolve({ value: [] });
        return Promise.all([
            oPromise1,
            oPromise2,
            that.waitForChanges(assert)
        ]);
    });
});
testXMLTemplating("BCP: 2080062941", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\">\t<template:repeat \t\tlist=\"{meta>/special.cases.EntityWithUnsupportedEdmTypes/@com.sap.vocabularies.UI.v1.SelectionFields}\" \t\tvar=\"field\">\t\t\t<Input value=\"{field>@@format}\"/>\t</template:repeat></template:alias>", "<Input value=\"{Binary}\"/><Input value=\"{Duration}\"/>");
QUnit.test("requestSideEffects: {$PropertyPath : '*'}", function (assert) {
    var oContext, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/Artists(ArtistID='42',IsActiveEntity=true)}\" id=\"form\">\t<Text id=\"city\" text=\"{Address/City}\"/>\t<Text id=\"name\" text=\"{Name}\"/>\t<Text binding=\"{BestPublication}\" id=\"price0\" text=\"{Price}\"/>\t<FlexBox binding=\"{BestFriend/BestFriend}\">\t\t<Text id=\"friend\" text=\"{Name}\"/>\t\t<Text binding=\"{BestPublication}\" id=\"price1\" text=\"{Price}\"/>\t</FlexBox>\t<FlexBox binding=\"{}\" id=\"section\">\t\t<Text binding=\"{path : 'DraftAdministrativeData', parameters : {$$ownRequest : true}}\"\t\t\tid=\"inProcessByUser\" text=\"{InProcessByUser}\"/>\t</FlexBox>\t<Table id=\"table\" items=\"{path : '_Publication', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"price2\" text=\"{Price}\"/>\t</Table></FlexBox>", that = this;
    this.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/DraftAdministrativeData" + "?$select=DraftID,InProcessByUser", {
        DraftID: "1",
        InProcessByUser: "foo"
    }).expectChange("inProcessByUser", "foo").expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$skip=0&$top=100", {
        value: [{
                Price: "9.99",
                PublicationID: "42-0"
            }]
    }).expectChange("price2", ["9.99"]).expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=Address/City,ArtistID,IsActiveEntity,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=BestFriend($select=ArtistID,IsActiveEntity,Name" + ";$expand=BestPublication($select=Price,PublicationID)))" + ",BestPublication($select=Price,PublicationID)", {
        Address: {
            City: "Heidelberg"
        },
        ArtistID: "42",
        BestFriend: {
            ArtistID: "23",
            BestFriend: {
                ArtistID: "24",
                BestPublication: {
                    Price: "8.88"
                },
                Name: "Best Friend",
                IsActiveEntity: true
            },
            IsActiveEntity: true
        },
        BestPublication: {
            Price: "9.99"
        },
        IsActiveEntity: true,
        Name: "Hour Frustrated"
    }).expectChange("city", "Heidelberg").expectChange("name", "Hour Frustrated").expectChange("price0", "9.99").expectChange("friend", "Best Friend").expectChange("price1", "8.88");
    return this.createView(assert, sView, oModel).then(function () {
        oContext = that.oView.byId("form").getBindingContext();
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)" + "?$select=Address/City,ArtistID,IsActiveEntity,Name", {
            Address: {
                City: "Walldorf"
            },
            ArtistID: "42",
            IsActiveEntity: true,
            Name: "Minute Frustrated"
        }).expectChange("city", "Walldorf").expectChange("name", "Minute Frustrated");
        return Promise.all([
            oContext.requestSideEffects([{ $PropertyPath: "*" }]),
            that.waitForChanges(assert, "*")
        ]);
    }).then(function () {
        var sError = "Key predicate of 'BestFriend' changed" + " from (ArtistID='23',IsActiveEntity=true)" + " to (ArtistID='s.o.else',IsActiveEntity=true)";
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity)", {
            BestFriend: {
                ArtistID: "s.o.else",
                IsActiveEntity: true
            }
        }).expectMessages([{
                message: sError,
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withArgs("Failed to request side effects");
        return Promise.all([
            oContext.requestSideEffects(["BestFriend/*"]).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, sError);
            }),
            that.waitForChanges(assert, "BestFriend/*")
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=BestFriend($select=ArtistID,IsActiveEntity,Name))", {
            BestFriend: {
                ArtistID: "23",
                BestFriend: {
                    ArtistID: "24",
                    IsActiveEntity: true,
                    Name: "TAFKAP"
                },
                IsActiveEntity: true
            }
        }).expectChange("friend", "TAFKAP");
        return Promise.all([
            oContext.requestSideEffects([{ $PropertyPath: "BestFriend/BestFriend/*" }]),
            that.waitForChanges(assert, "BestFriend/BestFriend/*")
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)?$select=BestFriend" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=BestFriend($select=ArtistID,IsActiveEntity" + ";$expand=BestPublication($select=Price,PublicationID)))", {});
        return Promise.all([
            oContext.requestSideEffects(["BestFriend/BestFriend/BestPublication/*"]),
            that.waitForChanges(assert, "BestFriend/BestFriend/BestPublication/*")
        ]);
    }).then(function () {
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$filter=PublicationID eq '42-0'", {
            value: [{
                    Price: "9.09",
                    PublicationID: "42-0"
                }]
        }).expectChange("price2", ["9.09"]);
        return Promise.all([
            oContext.requestSideEffects([{ $PropertyPath: "_Publication/*" }]),
            that.waitForChanges(assert, "_Publication/*")
        ]);
    }).then(function () {
        var oHeaderContext = that.oView.byId("table").getBinding("items").getHeaderContext();
        that.expectRequest("Artists(ArtistID='42',IsActiveEntity=true)/_Publication" + "?$select=Price,PublicationID&$filter=PublicationID eq '42-0'", {
            value: [{
                    Price: "9.01",
                    PublicationID: "42-0"
                }]
        }).expectChange("price2", ["9.01"]);
        return Promise.all([
            oHeaderContext.requestSideEffects([{ $PropertyPath: "*" }]),
            that.waitForChanges(assert, "* (@ _Publication)")
        ]);
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    var oSalesOrder = bAutoExpandSelect ? { SalesOrderID: "01", Note: "Note 1" } : { Note: "Note 1" }, sSelect = bAutoExpandSelect ? "$select=Note,SalesOrderID&" : "", sTitle = "Context#getProperty while table is reading, autoExpandSelect = " + bAutoExpandSelect, sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"1\"\t\titems=\"{path : '/SalesOrderList', parameters : {$count : true}}\">\t<Text id=\"note\" text=\"{Note}\"/></Table>";
    QUnit.test(sTitle, function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: bAutoExpandSelect }), that = this;
        this.expectRequest("SalesOrderList?$count=true&" + sSelect + "$skip=0&$top=1", {
            "@odata.count": "42",
            value: [oSalesOrder]
        }).expectChange("note", ["Note 1"]);
        return this.createView(assert, sView, oModel).then(function () {
            var oTable = that.oView.byId("table"), oHeaderContext = oTable.getBinding("items").getHeaderContext();
            ["$byPredicate", "$created", "length"].forEach(function (sProperty) {
                that.oLogMock.expects("error").withArgs("Failed to drill-down into " + sProperty + ", invalid segment: " + sProperty);
                assert.strictEqual(oHeaderContext.getObject(sProperty), undefined);
            });
            that.expectRequest("SalesOrderList?$count=true&" + sSelect + "$skip=1&$top=1", {
                "@odata.count": "23",
                value: [{ Note: "Note 2" }]
            }).expectChange("note", [, "Note 2"]);
            oTable.requestItems();
            assert.strictEqual(oTable.getItems()[0].getBindingContext().getProperty("Note"), "Note 1");
            assert.strictEqual(oHeaderContext.getProperty("$count"), 42);
            return Promise.all([
                oHeaderContext.requestProperty("1/Note"),
                oHeaderContext.requestProperty("$count"),
                that.waitForChanges(assert)
            ]);
        }).then(function (aResults) {
            assert.strictEqual(aResults[0], "Note 2");
            assert.strictEqual(aResults[1], 23);
        });
    });
});
QUnit.test("CPOUI5ODATAV4-231: ODLB#create failed due to failed $metadata", function (assert) {
    var that = this;
    this.useFakeServer({
        "/invalid/model/$metadata": { code: 500 }
    });
    return this.createView(assert, "", createModel(sInvalidModel)).then(function () {
        var oListBinding = that.oModel.bindList("/People");
        that.oLogMock.expects("error").withExactArgs("GET /invalid/model/$metadata", "Could not load metadata: 500 Internal Server Error", "sap.ui.model.odata.v4.lib._MetadataRequestor");
        that.oLogMock.expects("error").withExactArgs("POST on 'People' failed; will be repeated automatically", sinon.match("Could not load metadata: 500 Internal Server Error"), "sap.ui.model.odata.v4.ODataListBinding");
        that.expectRequest({
            method: "POST",
            url: "People",
            payload: {}
        }).expectMessages([{
                message: "Could not load metadata: 500 Internal Server Error",
                persistent: true,
                technical: true,
                technicalDetails: {
                    httpStatus: 500
                },
                type: "Error"
            }]);
        return Promise.all([
            oListBinding.create().created().then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Could not load metadata: 500 Internal Server Error");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2070200175, CPOUI5ODATAV4-288: POST > GET", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Text id=\"status\" text=\"{LifecycleStatus}\"/>\t<FlexBox id=\"action\" binding=\"{" + sAction + "(...)}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('1')?$select=LifecycleStatus,SalesOrderID", {
        LifecycleStatus: "N",
        SalesOrderID: "1"
    }).expectChange("status", "N");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('1')/" + sAction,
            payload: {}
        }, {
            LifecycleStatus: "N",
            SalesOrderID: "1"
        }).expectRequest("SalesOrderList('1')?$select=LifecycleStatus", {
            LifecycleStatus: "C"
        }).expectChange("status", "C");
        return Promise.all([
            that.oView.byId("action").getObjectBinding().execute(),
            that.oView.byId("form").getBindingContext().requestSideEffects(["LifecycleStatus"]),
            that.waitForChanges(assert)
        ]);
    });
});
[true, false].forEach(function (bConfirm) {
    QUnit.test("CPOUI5ODATAV4-943: handling=strict, confirm=" + bConfirm, function (assert) {
        var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oActionPromise, oError = createErrorInsideBatch({
            code: "STRICT",
            details: [{
                    "@Common.numericSeverity": 3,
                    code: "CODE1",
                    message: "Note is empty",
                    target: "SalesOrder/Note"
                }, {
                    "@Common.numericSeverity": 2,
                    code: "CODE2",
                    message: "Some unbound info"
                }],
            message: "Strict Handling"
        }, 412), oModel = createSalesOrdersModel({ autoExpandSelect: true }), fnResolve, sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('1')}\">\t<Text id=\"status\" text=\"{LifecycleStatus}\"/>\t<FlexBox id=\"action\" binding=\"{" + sAction + "(...)}\"/></FlexBox>", that = this;
        function onStrictHandlingFailed(aMessages) {
            assert.strictEqual(aMessages.length, 2);
            assert.strictEqual(aMessages[0].getMessage(), "Note is empty");
            assert.strictEqual(aMessages[0].getCode(), "CODE1");
            assert.strictEqual(aMessages[0].getTarget(), "/SalesOrderList('1')/Note");
            assert.strictEqual(aMessages[0].getType(), "Warning");
            assert.strictEqual(aMessages[1].getMessage(), "Some unbound info");
            assert.strictEqual(aMessages[1].getCode(), "CODE2");
            assert.strictEqual(aMessages[1].getTarget(), "");
            assert.strictEqual(aMessages[1].getType(), "Information");
            return new Promise(function (resolve) {
                fnResolve = resolve;
            });
        }
        this.expectRequest("SalesOrderList('1')?$select=LifecycleStatus,SalesOrderID", {
            LifecycleStatus: "N",
            SalesOrderID: "1"
        }).expectChange("status", "N");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest({
                headers: {
                    "Prefer": "handling=strict"
                },
                method: "POST",
                url: "SalesOrderList('1')/" + sAction,
                payload: {}
            }, oError, {
                "Preference-Applied": "handling=strict"
            });
            oActionPromise = that.oView.byId("action").getObjectBinding().execute("$auto", false, onStrictHandlingFailed);
            return that.waitForChanges(assert);
        }).then(function () {
            if (bConfirm) {
                that.expectRequest({
                    method: "POST",
                    url: "SalesOrderList('1')/" + sAction,
                    payload: {}
                }, {
                    LifecycleStatus: "C",
                    SalesOrderID: "1"
                }).expectChange("status", "C");
            }
            else {
                that.expectCanceledError("Failed to execute /SalesOrderList('1')/" + sAction + "(...)", "Action canceled due to strict handling");
            }
            fnResolve(bConfirm);
            return Promise.all([
                oActionPromise.then(function () {
                    assert.ok(bConfirm);
                }, function (oError) {
                    assert.notOk(bConfirm);
                    assert.strictEqual(oError.message, "Action canceled due to strict handling");
                    assert.strictEqual(oError.canceled, true);
                }),
                that.waitForChanges(assert)
            ]);
        });
    });
});
QUnit.test("CPOUI5ODATAV4-943: handling=strict, multiple strict executions", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oContext, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('0')}\">\t<Text id=\"status\" text=\"{LifecycleStatus}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('0')?$select=LifecycleStatus,SalesOrderID", {
        LifecycleStatus: "N",
        SalesOrderID: "0"
    }).expectChange("status", "N");
    return this.createView(assert, sView, oModel).then(function () {
        oContext = that.oView.byId("form").getBindingContext();
        that.oLogMock.expects("error").withExactArgs("Failed to execute /SalesOrderList('0')/" + "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm(...)", sinon.match("All requests with strict handling must belong to the same change set"), "sap.ui.model.odata.v4.ODataContextBinding");
        that.oLogMock.expects("error").withExactArgs("Failed to execute /GetProductStock(...)", sinon.match("Not an action: /GetProductStock(...)"), "sap.ui.model.odata.v4.ODataContextBinding");
        that.expectRequest({
            headers: {
                "Prefer": "handling=strict"
            },
            method: "POST",
            url: "SalesOrderList('0')/" + sAction,
            payload: {}
        }, {
            LifecycleStatus: "C",
            SalesOrderID: "0"
        }).expectRequest({
            headers: {
                "Prefer": "handling=strict"
            },
            method: "POST",
            url: "RegenerateEPMData",
            payload: {}
        }, {}).expectRequest("GetProductStock()", {}).expectChange("status", "C").expectMessages([{
                message: "All requests with strict handling must belong to the same change" + " set",
                persistent: true,
                technical: true,
                type: "Error"
            }, {
                message: "Not an action: /GetProductStock(...)",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            oModel.bindContext("/GetProductStock(...)").execute("confirm"),
            oModel.bindContext(sAction + "(...)", oContext).execute("confirm", false, function () { }),
            oModel.bindContext("/RegenerateEPMData(...)").execute("confirm", false, function () { }),
            oModel.submitBatch("confirm"),
            oModel.bindContext(sAction + "(...)", oContext).execute("confirm", false, function () { }).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "All requests with strict handling must belong to the same change set");
            }),
            oModel.bindContext("/GetProductStock(...)").execute("confirm", false, function () { }).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Not an action: /GetProductStock(...)");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-1034: handling=strict, simulate draft save", function (assert) {
    var sConfirmAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", sGoodsAction = "com.sap.gateway.default.zui5_epm_sample.v0002." + "SalesOrder_GoodsIssueCreated", oModel = createSalesOrdersModel({ autoExpandSelect: true, updateGroupId: "confirm" }), sView = "<FlexBox id=\"form\" binding=\"{/SalesOrderList('42')}\">\t<Text id=\"status\" text=\"{LifecycleStatus}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList('42')?$select=LifecycleStatus,SalesOrderID", {
        LifecycleStatus: "N",
        SalesOrderID: "42"
    }).expectChange("status", "N");
    return this.createView(assert, sView, oModel).then(function () {
        var oContext = that.oView.byId("form").getBindingContext(), oConfirmBinding = oModel.bindContext(sConfirmAction + "(...)", oContext), oError = createErrorInsideBatch({
            code: "STRICT",
            message: "Strict Handling"
        }, 412), oGoodsBinding = oModel.bindContext(sGoodsAction + "(...)", oContext);
        function fnStrictHandlingFailed(aMessages) {
            assert.deepEqual(aMessages, [], "no details in strict error response");
            aMessages = oContext.getMessages();
            assert.strictEqual(aMessages.length, 1);
            assert.strictEqual(aMessages[0].message, "Incorrect LifecycleStatus");
            return Promise.resolve(false);
        }
        that.expectRequest({
            method: "POST",
            headers: {},
            url: "SalesOrderList('42')/" + sConfirmAction,
            payload: {}
        }, {
            LifecycleStatus: "C",
            SalesOrderID: "42",
            Messages: [{
                    code: "CODE",
                    message: "Incorrect LifecycleStatus",
                    numericSeverity: 3,
                    target: "LifecycleStatus",
                    transition: false
                }]
        }).expectChange("status", "C").expectRequest({
            headers: {
                "Prefer": "handling=strict"
            },
            method: "POST",
            url: "SalesOrderList('42')/" + sGoodsAction,
            payload: {}
        }, oError, {
            "Preference-Applied": "handling=strict"
        }).expectCanceledError("Failed to execute /SalesOrderList('42')/" + sGoodsAction + "(...)", "Action canceled due to strict handling").expectMessages([{
                code: "CODE",
                message: "Incorrect LifecycleStatus",
                targets: [
                    "/SalesOrderList('42')/LifecycleStatus"
                ],
                type: "Warning"
            }]);
        return Promise.all([
            oConfirmBinding.execute("confirm"),
            oModel.submitBatch("confirm"),
            checkCanceled(assert, oGoodsBinding.execute("confirm", false, fnStrictHandlingFailed)),
            oModel.submitBatch("confirm"),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-269: Nested lists and $$sharedRequest", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<List growing=\"true\" growingThreshold=\"3\" \t\t\titems=\"{parameters : {$$sharedRequest : true}, path : '/MANAGERS',\t\t\ttemplateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"id\" text=\"{ID}\"/>\t\t</CustomListItem>\t</List></Table>";
    this.rIgnoredCanceledErrors = /^Cache discarded as a new cache has been created$/;
    this.expectRequest("EMPLOYEES?$select=ID,Name&$skip=0&$top=100", {
        value: [
            { ID: "2", Name: "Frederic Fall" }
        ]
    }).expectChange("name", ["Frederic Fall"]).expectRequest("MANAGERS?$select=ID&$skip=0&$top=3", {
        value: [{ ID: "M1" }, { ID: "M2" }, { ID: "M3" }]
    }).expectChange("id", ["M1", "M2", "M3"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("CPOUI5ODATAV4-269: Avoid redundant value help requests", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox binding=\"{/EMPLOYEES('1')}\">\t<Text id=\"name1\" text=\"{Name}\"/>\t<List id=\"list1\" growing=\"true\" growingThreshold=\"3\" \t\t\titems=\"{parameters : {$$sharedRequest : true}, path : '/MANAGERS',\t\t\ttemplateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"id1\" text=\"{ID}\"/>\t\t</CustomListItem>\t</List></FlexBox><FlexBox binding=\"{/EMPLOYEES('2')}\">\t<Text id=\"name2\" text=\"{Name}\"/>\t<List id=\"list2\" growing=\"true\" growingThreshold=\"3\" \t\t\titems=\"{parameters : {$$sharedRequest : true}, path : '/MANAGERS',\t\t\ttemplateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"id2\" text=\"{ID}\"/>\t\t</CustomListItem>\t</List></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')?$select=ID,Name", { ID: "1", Name: "Frederic Fall" }).expectChange("name1", "Frederic Fall").expectRequest("EMPLOYEES('2')?$select=ID,Name", { ID: "2", Name: "Jonathan Smith" }).expectChange("name2", "Jonathan Smith").expectRequest("MANAGERS?$select=ID&$skip=0&$top=3", {
        value: [{ ID: "M1" }, { ID: "M2" }, { ID: "M3" }]
    }).expectChange("id1", ["M1", "M2", "M3"]).expectChange("id2", ["M1", "M2", "M3"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("MANAGERS?$select=ID&$orderby=ID desc&$skip=0&$top=3", {
            value: [{ ID: "M9" }, { ID: "M8" }, { ID: "M7" }]
        }).expectChange("id1", ["M9", "M8", "M7"]);
        that.oView.byId("list1").getBinding("items").sort(new Sorter("ID", true));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("MANAGERS?$select=ID&$skip=3&$top=3", {
            value: [{ ID: "M4" }, { ID: "M5" }, { ID: "M6" }]
        }).expectChange("id2", [, , , "M4", "M5", "M6"]);
        that.oView.byId("list2").requestItems();
        return that.waitForChanges(assert);
    });
});
[false, true].forEach(function (bSharedRequest) {
    var sTitle = "CPOUI5ODATAV4-269: obsoleted response, $$sharedRequest=" + bSharedRequest;
    QUnit.test(sTitle, function (assert) {
        var sParameters = bSharedRequest ? "$$sharedRequest : true" : "", fnRespond, sView = "<Table id=\"table\" items=\"{path : '/EMPLOYEES', parameters : {" + sParameters + "}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
        this.expectRequest("EMPLOYEES?$skip=0&$top=100", {
            value: [
                { Name: "Frederic Fall" },
                { Name: "Jonathan Smith" },
                { Name: "Peter Burke" }
            ]
        }).expectChange("name", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]);
        return this.createView(assert, sView).then(function () {
            var oBinding = that.oView.byId("table").getBinding("items");
            that.expectRequest("EMPLOYEES?$orderby=Name&$skip=0&$top=100", {
                value: []
            }).expectRequest("EMPLOYEES?$orderby=Name&$filter=AGE gt 42&$skip=0&$top=100", new Promise(function (resolve) {
                fnRespond = resolve;
            }));
            oBinding.sort(new Sorter("Name"));
            oBinding.filter(new Filter("AGE", FilterOperator.GT, 42));
            return that.waitForChanges(assert);
        }).then(function () {
            that.expectCanceledError("Failed to get contexts for " + sTeaBusi + "EMPLOYEES with start index 0 and length 100", sODLB + ": /EMPLOYEES is ignoring response from inactive cache: " + sTeaBusi + "EMPLOYEES?$orderby=Name").expectChange("name", ["Jonathan Smith"]);
            fnRespond({ value: [{ Name: "Jonathan Smith" }] });
            return that.waitForChanges(assert);
        });
    });
});
testXMLTemplating("AnnotationHelper#value on properties", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"value\" value=\"sap.ui.model.odata.v4.AnnotationHelper.value\">\t\t\t<Input value=\"{meta>/Artists/Name@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/BestFriend/IsActiveEntity@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/Address/ZIP@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/special.cases.SendAutograph/$Parameter/Address/ZIP@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/special.cases.SendAutograph/$Parameter/_it/Name@@value}\"/>\t\t</template:alias>", "<Input value=\"{Name}\"/>\t\t<Input value=\"{IsActiveEntity}\"/>\t\t<Input value=\"{ZIP}\"/>\t\t<Input value=\"{ZIP}\"/>\t\t<Input value=\"{Name}\"/>");
testXMLTemplating("AnnotationHelper#value inside path object", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"value\" value=\"sap.ui.model.odata.v4.AnnotationHelper.value\">\t\t\t<Input value=\"{meta>/Artists/@com.sap.vocabularies.UI.v1.SelectionFields/0/$PropertyPath@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/@com.sap.vocabularies.UI.v1.SelectionFields/1/$PropertyPath@@value}\"/>\t\t\t<Input value=\"{meta>/Artists/ArtistID@com.sap.vocabularies.Common.v1.Text/$Path@@value}\"/>\t\t</template:alias>", "<Input value=\"{Name}\"/>\t\t<Input value=\"{BestFriend/Name}\"/>\t\t<Input value=\"{Name}\"/>");
testXMLTemplating("AnnotationHelper#format on properties", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\">\t\t\t<Input value=\"{meta>/Artists/Name@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/BestFriend/IsActiveEntity@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/Address/ZIP@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/special.cases.SendAutograph/$Parameter/Address/ZIP@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/special.cases.SendAutograph/$Parameter/_it/Name@@format}\"/>\t\t</template:alias>", "<Input value=\"{path:'Name',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':255},formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input value=\"{path:'IsActiveEntity',type:'sap.ui.model.odata.type.Boolean',\t\t\tconstraints:{'nullable':false}}\"/>\t\t<Input value=\"{path:'ZIP',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':5},formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input value=\"{path:'ZIP',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':5},formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input value=\"{path:'Name',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':255},formatOptions:{'parseKeepsEmptyString':true}}\"/>");
testXMLTemplating("AnnotationHelper#format inside path object", { models: { meta: createSpecialCasesModel().getMetaModel() } }, "<template:alias name=\"format\" value=\"sap.ui.model.odata.v4.AnnotationHelper.format\">\t\t\t<Input value=\"{meta>/Artists/@com.sap.vocabularies.UI.v1.SelectionFields/0/$PropertyPath@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/@com.sap.vocabularies.UI.v1.SelectionFields/1/$PropertyPath@@format}\"/>\t\t\t<Input value=\"{meta>/Artists/ArtistID@com.sap.vocabularies.Common.v1.Text/$Path@@format}\"/>\t\t</template:alias>", "<Input value=\"{path:'Name',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':255},formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input value=\"{path:'BestFriend/Name',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':255},formatOptions:{'parseKeepsEmptyString':true}}\"/>\t\t<Input value=\"{path:'Name',type:'sap.ui.model.odata.type.String',\t\t\tconstraints:{'maxLength':255},formatOptions:{'parseKeepsEmptyString':true}}\"/>");
QUnit.test("BCP: 2080140429", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<t:Table rows=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<List items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', templateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"category\" text=\"{Category}\"/>\t\t</CustomListItem>\t</List></t:Table>";
    this.expectRequest("EMPLOYEES?$select=ID,Name" + "&$expand=EMPLOYEE_2_EQUIPMENTS($select=Category,ID)&$skip=0&$top=110", {
        value: [{
                EMPLOYEE_2_EQUIPMENTS: [
                    { Category: "F1", ID: 21 },
                    { Category: "F2", ID: 22 },
                    { Category: "F3", ID: 23 }
                ],
                ID: "2",
                Name: "Frederic Fall"
            }, {
                EMPLOYEE_2_EQUIPMENTS: [
                    { Category: "J1", ID: 31 },
                    { Category: "J2", ID: 32 },
                    { Category: "J3", ID: 33 }
                ],
                ID: "3",
                Name: "Jonathan Smith"
            }]
    }).expectChange("name", ["Frederic Fall", "Jonathan Smith"]).expectChange("category", ["J1", "J2", "J3"]).expectChange("category", ["F1", "F2", "F3"]);
    return this.createView(assert, sView, oModel);
});
QUnit.test("BCP: 2070272170", function (assert) {
    var oCreatedContext, oInput, oTable, sView = "<Table id=\"employees\" items=\"{path : '/EMPLOYEES',\t\tparameters : {$expand : {'EMPLOYEE_2_EQUIPMENTS' : null}}}\">\t<Text id=\"id\" text=\"{ID}\"/></Table><Table id=\"equipments\" items=\"{EMPLOYEE_2_EQUIPMENTS}\">\t<Input id=\"category\" value=\"{Category}\"/>\t<Input id=\"equipmentID\" value=\"{ID}\"/>\t<Input id=\"equipmentName\" value=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$expand=EMPLOYEE_2_EQUIPMENTS&$skip=0&$top=100", {
        value: [{
                ID: "1",
                EMPLOYEE_2_EQUIPMENTS: [{ Category: "F1", ID: 11, Name: "F1-11" }]
            }]
    }).expectChange("id", ["1"]).expectChange("category", []).expectChange("equipmentID", []).expectChange("equipmentName", []);
    return this.createView(assert, sView).then(function () {
        that.expectChange("category", ["F1"]).expectChange("equipmentID", ["11"]).expectChange("equipmentName", ["F1-11"]);
        oTable = that.oView.byId("equipments");
        oTable.setBindingContext(that.oView.byId("employees").getItems()[0].getBindingContext());
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("category", ["F2", "F1"]).expectChange("equipmentID", [null, "11"]).expectChange("equipmentName", ["", "F1-11"]).expectRequest({
            method: "POST",
            payload: { Category: "F2" },
            url: "EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS"
        }, createErrorInsideBatch({
            message: "Invalid category",
            target: "Category",
            "@Common.additionalTargets": ["ID", "Name"]
        })).expectMessages([{
                code: "CODE",
                message: "Invalid category",
                persistent: true,
                targets: [
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS($uid=...)/Category",
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS($uid=...)/ID",
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS($uid=...)/Name"
                ],
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withArgs("POST on 'EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS' failed;" + " will be repeated automatically");
        oCreatedContext = oTable.getBinding("items").create({ Category: "F2" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        oInput = oTable.getItems()[0].getCells()[0];
        return that.checkValueState(assert, oInput, "Error", "Invalid category");
    }).then(function () {
        that.expectChange("category", ["F3"]).expectChange("equipmentID", ["33"]).expectChange("equipmentName", ["F3-33"]).expectRequest({
            method: "POST",
            payload: { Category: "F3" },
            url: "EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS"
        }, {
            Category: "F3",
            ID: 33,
            Name: "F3-33",
            __FAKE__Messages: [{
                    code: "CODE",
                    message: "Correct category",
                    numericSeverity: 1,
                    target: "Category",
                    additionalTargets: ["ID", "Name"]
                }]
        }).expectMessages([{
                code: "CODE",
                message: "Correct category",
                targets: [
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS(Category='F3',ID=33)/Category",
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS(Category='F3',ID=33)/ID",
                    "/EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS(Category='F3',ID=33)/Name"
                ],
                type: "Success"
            }]);
        sap.ui.getCore().getMessageManager().removeAllMessages();
        oInput.getBinding("value").setValue("F3");
        return Promise.all([
            oCreatedContext.created(),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        return that.checkValueState(assert, oInput, "Success", "Correct category");
    });
});
QUnit.test("requestSideEffects: key predicate changed beneath ODLB", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/Artists}\">\t<Text id=\"friend\" text=\"{BestFriend/Name}\"/>\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("Artists?$select=ArtistID,IsActiveEntity,Name" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)&$skip=0&$top=100", {
        value: [{
                ArtistID: "XYZ",
                BestFriend: {
                    ArtistID: "23",
                    IsActiveEntity: true,
                    Name: "Best Friend"
                },
                IsActiveEntity: true,
                Name: "Missy Eliot"
            }]
    }).expectChange("friend", "Best Friend").expectChange("name", "Missy Eliot");
    return this.createView(assert, sView, oModel).then(function () {
        var oHeaderContext = that.oView.byId("table").getBinding("items").getHeaderContext();
        that.expectRequest("Artists?$select=ArtistID,IsActiveEntity" + "&$expand=BestFriend($select=ArtistID,IsActiveEntity,Name)" + "&$filter=ArtistID eq 'XYZ' and IsActiveEntity eq true", {
            value: [{
                    ArtistID: "XYZ",
                    BestFriend: {
                        ArtistID: "s.o.else",
                        IsActiveEntity: true,
                        Name: "Yet Another Best Friend"
                    },
                    IsActiveEntity: true
                }]
        }).expectChange("friend", "Yet Another Best Friend");
        that.oLogMock.expects("error").withArgs("Failed to request side effects");
        return Promise.all([
            oHeaderContext.requestSideEffects([
                { $NavigationPropertyPath: "Best" },
                { $PropertyPath: "BestFriend/*" }
            ]).then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Key predicate of" + " '(ArtistID='XYZ',IsActiveEntity=true)/BestFriend'" + " changed from (ArtistID='23',IsActiveEntity=true)" + " to (ArtistID='s.o.else',IsActiveEntity=true)");
            }),
            that.waitForChanges(assert, "*")
        ]);
    });
});
[
    undefined,
    "AGE",
    function (oContext) {
        return oContext.getProperty("AGE");
    }
].forEach(function (vKey, i) {
    QUnit.test("BCP: 2080132822 - grouping, #" + i, function (assert) {
        var that = this, oController = {
            getGroupHeader: function (oGroupInfo) {
                that.checkValue(assert, oGroupInfo.key, "groupHeader");
            }
        }, oModel = createTeaBusiModel({ autoExpandSelect: true }), oTable, sView = "<Table growing=\"true\" id=\"table\" items=\"{\t\tgroupHeaderFactory : '.getGroupHeader',\t\tpath : '/EMPLOYEES',\t\tsorter : {group : true, path : 'AGE'}\t}\">\t<ColumnListItem>\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<List growing=\"true\" items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', templateShareable : false}\">\t\t\t<CustomListItem>\t\t\t\t<Text id=\"category\" text=\"{Category}\"/>\t\t\t</CustomListItem>\t\t</List>\t\t<Text id=\"name\" text=\"{Name}\"/>\t</ColumnListItem></Table>";
        function checkItems(aItems, aExpectedMetadataNames, aExpectedContent) {
            assert.deepEqual(aItems.map(function (oItem) {
                return oItem.getMetadata().getName();
            }), aExpectedMetadataNames);
            assert.deepEqual(aItems.map(function (oItem) {
                return oItem.getTitle ? oItem.getTitle() : oItem.getCells().map(function (oCell) {
                    return oCell.getText ? oCell.getText() : oCell.getItems().map(function (oCustomListItem) {
                        return oCustomListItem.getContent()[0].getText();
                    }).join();
                }).join();
            }), aExpectedContent);
        }
        this.expectRequest("EMPLOYEES?$orderby=AGE&$select=AGE,ID,Name" + "&$expand=EMPLOYEE_2_EQUIPMENTS($select=Category,ID)&$skip=0&$top=20", {
            value: [{
                    AGE: 23,
                    EMPLOYEE_2_EQUIPMENTS: [{ Category: "F1", ID: 21 }],
                    ID: "2",
                    Name: "Frederic Fall"
                }, {
                    AGE: 42,
                    EMPLOYEE_2_EQUIPMENTS: [{ Category: "J1", ID: 31 }],
                    ID: "3",
                    Name: "Jonathan Smith"
                }, {
                    AGE: 42,
                    EMPLOYEE_2_EQUIPMENTS: [{ Category: "P1", ID: 41 }],
                    ID: "4",
                    Name: "Peter Burke"
                }]
        }).expectChange("age", ["23", "42", "42"]).expectChange("groupHeader", 23).expectChange("groupHeader", 42).expectChange("category", ["P1"]).expectChange("category", ["J1"]).expectChange("category", ["F1"]).expectChange("name", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]);
        return this.createView(assert, sView, oModel, oController).then(function () {
            var oItemsBinding;
            oTable = that.oView.byId("table");
            oItemsBinding = oTable.getBinding("items");
            checkItems(oTable.getItems(), [
                "sap.m.GroupHeaderListItem",
                "sap.m.ColumnListItem",
                "sap.m.GroupHeaderListItem",
                "sap.m.ColumnListItem",
                "sap.m.ColumnListItem"
            ], ["23", "23,F1,Frederic Fall", "42", "42,J1,Jonathan Smith", "42,P1,Peter Burke"]);
            oItemsBinding.enableExtendedChangeDetection(false, vKey);
            that.expectRequest("EMPLOYEES?$orderby=AGE&$select=AGE,ID,Name" + "&$expand=EMPLOYEE_2_EQUIPMENTS($select=Category,ID)&$skip=0&$top=20", {
                value: [{
                        AGE: 42,
                        EMPLOYEE_2_EQUIPMENTS: [{ Category: "F1*", ID: 21 }],
                        ID: "2",
                        Name: "Frederic Fall"
                    }, {
                        AGE: 42,
                        EMPLOYEE_2_EQUIPMENTS: [],
                        ID: "3",
                        Name: "Jonathan Smith"
                    }, {
                        AGE: 42,
                        EMPLOYEE_2_EQUIPMENTS: [
                            { Category: "P1", ID: 41 },
                            { Category: "P2", ID: 42 }
                        ],
                        ID: "4",
                        Name: "Peter Burke"
                    }]
            }).expectCanceledError("Failed to get contexts for " + sTeaBusi + "EMPLOYEES('2')/EMPLOYEE_2_EQUIPMENTS with start index 0 and length 20", "Binding already destroyed").expectCanceledError("Failed to get contexts for " + sTeaBusi + "EMPLOYEES('3')/EMPLOYEE_2_EQUIPMENTS with start index 0 and length 20", "Binding already destroyed").expectCanceledError("Failed to get contexts for " + sTeaBusi + "EMPLOYEES('4')/EMPLOYEE_2_EQUIPMENTS with start index 0 and length 20", "Binding already destroyed").expectChange("age", ["42", "42", "42"]).expectChange("groupHeader", 42).expectChange("category", ["P1", "P2"]).expectChange("category", []).expectChange("category", ["F1*"]).expectChange("name", ["Frederic Fall", "Jonathan Smith", "Peter Burke"]);
            oItemsBinding.refresh();
            return that.waitForChanges(assert);
        }).then(function () {
            checkItems(oTable.getItems(), [
                "sap.m.GroupHeaderListItem",
                "sap.m.ColumnListItem",
                "sap.m.ColumnListItem",
                "sap.m.ColumnListItem"
            ], ["42", "42,F1*,Frederic Fall", "42,,Jonathan Smith", "42,P1,P2,Peter Burke"]);
        });
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    QUnit.test("BCP: 2180095696, bAutoExpandSelect = " + bAutoExpandSelect, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: bAutoExpandSelect }), sView = "<FlexBox id=\"flexBox\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/></FlexBox>", that = this;
        FlexBox.prototype.bUseExtendedChangeDetection = true;
        this.expectRequest("EMPLOYEES?" + (bAutoExpandSelect ? "$select=ID,Name&" : "") + "$skip=0&$top=100", {
            value: [
                { ID: "2", Name: "Frederic Fall" },
                { ID: "3", Name: "Jonathan Smith" }
            ]
        }).expectChange("name", ["Frederic Fall", "Jonathan Smith"]);
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest("EMPLOYEES?" + (bAutoExpandSelect ? "$select=ID,Name&" : "") + "$orderby=Name desc&$skip=0&$top=100", {
                value: [
                    { ID: "3", Name: "Jonathan Smith" },
                    { ID: "2", Name: "Frederic Fall" }
                ]
            }).expectChange("name", null).expectChange("name", null).expectChange("name", ["Jonathan Smith", "Frederic Fall"]);
            that.oView.byId("flexBox").getBinding("items").sort(new Sorter("Name", true));
            return that.waitForChanges(assert);
        }).finally(function () {
            delete FlexBox.prototype.bUseExtendedChangeDetection;
        });
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    var sTitle = "$$sharedRequest and ODMM#getOrCreateSharedModel, bAutoExpandSelect = " + bAutoExpandSelect;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSalesOrdersModel(), sView = "<FlexBox binding=\"{/ProductList('1')}\">\t<Text id=\"typeCode1\" text=\"{TypeCode}\"/>\t<List id=\"list1\"\t\titems=\"{path : '/D_PR_TYPE_FV_SET', suspended : true, templateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"description1\" text=\"{DESCRIPTION}\"/>\t\t</CustomListItem>\t</List></FlexBox><FlexBox binding=\"{/ProductList('2')}\">\t<Text id=\"typeCode2\" text=\"{TypeCode}\"/>\t<List id=\"list2\"\t\titems=\"{path : '/D_PR_TYPE_FV_SET', suspended : true, templateShareable : false}\">\t\t<CustomListItem>\t\t\t<Text id=\"description2\" text=\"{DESCRIPTION}\"/>\t\t</CustomListItem>\t</List></FlexBox>", that = this;
        this.expectRequest("ProductList('1')", { ProductID: "1", TypeCode: "AD" }).expectChange("description1", []).expectChange("typeCode1", "AD").expectRequest("ProductList('2')", { ProductID: "2", TypeCode: "PR" }).expectChange("description2", []).expectChange("typeCode2", "PR");
        return this.createView(assert, sView, oModel).then(function () {
            return that.oView.byId("typeCode1").getBinding("text").requestValueListInfo(bAutoExpandSelect);
        }).then(function (mValueListInfo) {
            var oValueListModel = mValueListInfo[""].$model;
            that.expectRequest("D_PR_TYPE_FV_SET?" + (bAutoExpandSelect ? "$select=DESCRIPTION,FIELD_VALUE&" : "") + "$skip=0&$top=100", {
                value: [{
                        DESCRIPTION: "Anno Domini",
                        FIELD_VALUE: "AD"
                    }, {
                        DESCRIPTION: "Public Relations",
                        FIELD_VALUE: "PR"
                    }]
            }).expectChange("description1", ["Anno Domini", "Public Relations"]).expectChange("description2", ["Anno Domini", "Public Relations"]);
            that.oView.byId("list1").setModel(oValueListModel).getBinding("items").resume();
            that.oView.byId("list2").setModel(oValueListModel).getBinding("items").resume();
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("BCP: 2080320093: sharedRequests and sort", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true, sharedRequests: true }), sView = "<Table id=\"table\" growing=\"true\" growingThreshold=\"2\" items=\"{path : '/ProductList'}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("ProductList?$select=Name,ProductID&$skip=0&$top=2", {
        value: [{
                Name: "Notebook 15",
                ProductID: "HT-1015"
            }, {
                Name: "Notebook 16",
                ProductID: "HT-1016"
            }]
    }).expectChange("name", ["Notebook 15", "Notebook 16"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("ProductList?$select=Name,ProductID&$orderby=Name desc" + "&$skip=0&$top=2", {
            value: [{
                    Name: "Notebook 24",
                    ProductID: "HT-1024"
                }, {
                    Name: "Notebook 23",
                    ProductID: "HT-1023"
                }]
        }).expectChange("name", ["Notebook 24", "Notebook 23"]);
        that.oView.byId("table").getBinding("items").sort(new Sorter("Name", true));
        return that.waitForChanges(assert);
    });
});
QUnit.test("sharedRequests forbids action execute", function (assert) {
    var oModel = createTeaBusiModel({ sharedRequests: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var oAction = oModel.bindContext("/ChangeTeamBudgetByID(...)"), sMessage = sTeaBusi + "ChangeTeamBudgetByID is read-only";
        that.oLogMock.expects("error").withExactArgs("Failed to execute /ChangeTeamBudgetByID(...)", sinon.match(sMessage), "sap.ui.model.odata.v4.ODataContextBinding");
        oAction.execute().then(mustFail(assert), function (oError) {
            assert.strictEqual(oError.message, sMessage);
        });
    });
});
QUnit.test("BCP: 002075129500002532232020", function (assert) {
    var oMetaModel = createSpecialCasesModel().getMetaModel(), sTemplate = "<template:repeat list=\"{meta>/As/$Type/$Key}\">\t<Text text=\"{meta>}\"/></template:repeat>", that = this;
    return oMetaModel.requestObject("/As/$Type/$Key").then(function (aKeys) {
        var i, sView = "";
        aKeys.length = 0;
        for (i = 0; i < 200; i += 1) {
            aKeys.push("" + i);
            sView += "<Text text=\"" + i + "\"/>";
        }
        return doTestXMLTemplating.call(that, assert, { models: { meta: oMetaModel } }, sTemplate, sView);
    });
});
QUnit.test("ODLB: create at end w/o $count", function (assert) {
    var sView = "<Table id=\"table\" items=\"{/EMPLOYEES}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectRequest("EMPLOYEES?$skip=0&$top=100", {
        value: [{ Name: "Frederic Fall" }]
    }).expectChange("name", ["Frederic Fall"]);
    return this.createView(assert, sView).then(function () {
        var oBinding = that.oView.byId("table").getBinding("items");
        that.expectChange("name", [, "John Doe"]).expectRequest({
            method: "POST",
            url: "EMPLOYEES",
            payload: { Name: "John Doe" }
        }, {});
        return Promise.all([
            oBinding.create({ Name: "John Doe" }, true, true),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("ODLB: create at end w/ $count before read", function (assert) {
    var sView = "<Table id=\"table\" items=\"{path : 'EMPLOYEES', parameters : {$count : true}}\">\t<Text id=\"name\" text=\"{Name}\"/></Table>", that = this;
    this.expectChange("name", []);
    return this.createView(assert, sView).then(function () {
        var oBinding = that.oView.byId("table").getBinding("items");
        that.expectChange("name", ["John Doe"]).expectRequest("EMPLOYEES?$count=true&$skip=0&$top=100", {
            "@odata.count": "1",
            value: [{ Name: "Frederic Fall" }]
        }).expectRequest({
            method: "POST",
            url: "EMPLOYEES",
            payload: { Name: "John Doe" }
        }).expectChange("name", ["Frederic Fall", "John Doe"]);
        oBinding.setContext(that.oModel.createBindingContext("/"));
        return Promise.all([
            oBinding.create({ Name: "John Doe" }, true, true),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-279", function (assert) {
    var oModel;
    this.useFakeServer({
        "HEAD /sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/?sap-client=279": {},
        "/sap/opu/odata4/IWBEP/TEA/default/IWBEP/TEA_BUSI/0001/$metadata?sap-client=279&sap-context-token=20200716120000&sap-language=en": { source: "odata/v4/data/metadata.xml" },
        "/sap/opu/odata4/IWBEP/TEA/default/iwbep/tea_busi_product/0001/$metadata?sap-client=279&sap-language=en": { source: "odata/v4/data/metadata_tea_busi_product.xml" }
    });
    oModel = createModel(sTeaBusi + "?sap-client=279", {
        earlyRequests: true,
        metadataUrlParams: {
            "sap-context-token": "20200716120000",
            "sap-language": "en"
        }
    });
    return oModel.getMetaModel().requestObject("/Equipments/EQUIPMENT_2_PRODUCT/PRODUCT_2_CATEGORY/$Type").then(function (sName) {
        assert.strictEqual(sName, "com.sap.gateway.default.iwbep.tea_busi_product.v0001.Category");
    });
});
QUnit.test("CPOUI5ODATAV4-340: Context#setKeepAlive", function (assert) {
    var oKeptContext, oModel = createSalesOrdersModel({ autoExpandSelect: true, updateGroupId: "update" }), oTable, oTableBinding, sView = "<Table id=\"listReport\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table><FlexBox id=\"objectPage\">\t<Input id=\"buyerId\" value=\"{BuyerID}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
        value: [{ "@odata.etag": "etag1", SalesOrderID: "1" }]
    }).expectChange("id", ["1"]).expectChange("buyerId");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("listReport");
        oTableBinding = oTable.getBinding("items");
        oKeptContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest("SalesOrderList('1')?$select=BuyerID", { "@odata.etag": "etag1", BuyerID: "42" }).expectChange("buyerId", "42");
        oKeptContext.setKeepAlive(true);
        that.oView.byId("objectPage").setBindingContext(oKeptContext);
        return that.waitForChanges(assert, "(2)");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$filter=SalesOrderID ne '1'" + "&$skip=0&$top=100", { value: [] });
        oTableBinding.filter(new Filter("SalesOrderID", FilterOperator.NE, "1"));
        return that.waitForChanges(assert, "(3)");
    }).then(function () {
        assert.strictEqual(oKeptContext.isKeepAlive(), true);
        assert.strictEqual(oKeptContext.getIndex(), undefined);
        assert.strictEqual(oKeptContext.getProperty("BuyerID"), "42");
        that.expectChange("buyerId", "42a");
        that.oView.byId("buyerId").getBinding("value").setValue("42a");
        assert.ok(oTableBinding.hasPendingChanges());
        return that.waitForChanges(assert, "(4)");
    }).then(function () {
        that.expectCanceledError("Failed to update path /SalesOrderList('1')/BuyerID", "Request canceled: PATCH SalesOrderList('1'); group: update").expectChange("buyerId", "42");
        oTableBinding.resetChanges();
        assert.notOk(oTableBinding.hasPendingChanges());
        return Promise.all([
            oModel.submitBatch("update"),
            that.waitForChanges(assert, "(5)")
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=100", {
            value: [{ "@odata.etag": "etag1", SalesOrderID: "1" }]
        }).expectChange("id", ["1"]);
        oTableBinding.filter();
        return that.waitForChanges(assert, "(6)");
    }).then(function () {
        assert.strictEqual(oKeptContext.getIndex(), 0);
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$filter=SalesOrderID eq '1'" + "&$skip=0&$top=100", {
            value: [{ "@odata.etag": "etag2", SalesOrderID: "1" }]
        }).expectRequest("SalesOrderList('1')?$select=BuyerID", { "@odata.etag": "etag2", BuyerID: "42*" }).expectChange("buyerId", "42*");
        oTableBinding.filter(new Filter("SalesOrderID", FilterOperator.EQ, "1"));
        return that.waitForChanges(assert, "(7)");
    });
});
QUnit.test("CPOUI5ODATAV4-340: Context#setKeepAlive, update conflict", function (assert) {
    var oKeptContext, oModel = createSalesOrdersModel({ autoExpandSelect: true, updateGroupId: "update" }), oTable, oTableBinding, sView = "<Table id=\"listReport\" growing=\"true\" growingThreshold=\"1\" items=\"{/SalesOrderList}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table><FlexBox id=\"objectPage\">\t<Input id=\"buyerId\" value=\"{BuyerID}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=SalesOrderID&$skip=0&$top=1", {
        value: [{ "@odata.etag": "etag1", SalesOrderID: "1" }]
    }).expectChange("id", ["1"]).expectChange("buyerId");
    return this.createView(assert, sView, oModel).then(function () {
        oTable = that.oView.byId("listReport");
        oTableBinding = oTable.getBinding("items");
        oKeptContext = oTable.getItems()[0].getBindingContext();
        that.expectRequest("SalesOrderList('1')?$select=BuyerID", { "@odata.etag": "etag1", BuyerID: "42" }).expectChange("buyerId", "42");
        oKeptContext.setKeepAlive(true);
        that.oView.byId("objectPage").setBindingContext(oKeptContext);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$orderby=SalesOrderID desc" + "&$skip=0&$top=1", {
            value: [{ "@odata.etag": "etag2", SalesOrderID: "2" }]
        }).expectChange("id", ["2"]);
        oTableBinding.sort(new Sorter("SalesOrderID", true));
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectChange("buyerId", "42a");
        that.oView.byId("buyerId").getBinding("value").setValue("42a");
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=SalesOrderID&$orderby=SalesOrderID desc" + "&$skip=1&$top=1", {
            value: [{ "@odata.etag": "etag1*", SalesOrderID: "1" }]
        }).expectMessages([{
                message: "Modified on client and on server: SalesOrderList('1')",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withArgs("Failed to get contexts for " + sSalesOrderService + "SalesOrderList with start index 0 and length 2", sinon.match("Modified on client and on server: SalesOrderList('1')"));
        oTable.requestItems();
        return that.waitForChanges(assert);
    });
});
QUnit.test("Context#requestProperty (JIRA: CPOUI5ODATAV4-339)", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), oContext = oModel.bindContext("/SalesOrderList('1')").getBoundContext(), that = this;
    return this.createView(assert, "", oModel).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Note,SalesOrderID", {
            "@odata.etag": "etag",
            Note: "Test",
            SalesOrderID: "1"
        });
        return Promise.all([
            oContext.requestProperty("Note").then(function (sNote) {
                assert.strictEqual(sNote, "Test");
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=SO_2_BP" + "&$expand=SO_2_BP($select=BusinessPartnerID,CompanyName)", {
            "@odata.etag": "etag",
            SO_2_BP: {
                BusinessPartnerID: "42",
                CompanyName: "SAP"
            }
        });
        return Promise.all([
            oContext.requestProperty("SO_2_BP/CompanyName").then(function (sCompanyName) {
                assert.strictEqual(sCompanyName, "SAP");
            }),
            that.waitForChanges(assert)
        ]);
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=BillingStatus,NetAmount", {
            "@odata.etag": "etag",
            BillingStatus: "S",
            NetAmount: "1234"
        });
        return Promise.all([
            oContext.requestProperty([
                "BillingStatus",
                "NetAmount",
                "Note"
            ]).then(function (aValues) {
                assert.deepEqual(aValues, ["S", "1234", "Test"]);
            }),
            that.waitForChanges(assert)
        ]);
    });
});
["$direct", "$auto"].forEach(function (sGroupId) {
    QUnit.test("BCP: 2080293614, " + sGroupId, function (assert) {
        var oModel = createSpecialCasesModel({ autoExpandSelect: true, groupId: sGroupId }), sView = "<FlexBox binding=\"{/Artists(ArtistUUID=xyz,IsActiveEntity=false)/BestPublication}\">\t<Text id=\"price\" text=\"{Price}\"/></FlexBox><Text id=\"currency\" \ttext=\"{/Artists(ArtistUUID=xyz,IsActiveEntity=false)/BestPublication/CurrencyCode}\"/>";
        this.expectRequest("Artists(ArtistUUID=xyz,IsActiveEntity=false)/BestPublication" + "?$select=Price,PublicationID").expectRequest("Artists(ArtistUUID=xyz,IsActiveEntity=false)/BestPublication" + "/CurrencyCode").expectChange("price", null).expectChange("currency", "");
        return this.createView(assert, sView, oModel);
    });
});
[
    { bCountHasChanged: true, bFilter: false },
    { bCountHasChanged: false, bFilter: true },
    { bCountHasChanged: true, bFilter: true }
].forEach(function (oFixture) {
    var sTitle = "CPOUI5ODATAV4-365: Delete kept-alive context, bFilter = " + oFixture.bFilter;
    if (oFixture.bFilter) {
        sTitle += " , bCountHasChanged = " + oFixture.bCountHasChanged;
    }
    QUnit.test(sTitle, function (assert) {
        var oKeptContext, oListBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), fnOnBeforeDestroy = sinon.stub(), oTable, sView = "<Text id=\"count\" text=\"{$count}\"/><Table id=\"listReport\" growing=\"true\" growingThreshold=\"2\"\t\titems=\"{path : '/SalesOrderList', parameters : {$count : true}}\">\t<Text id=\"id\" text=\"{SalesOrderID}\"/></Table>", that = this;
        this.expectRequest("SalesOrderList?$count=true&$select=SalesOrderID&$skip=0&$top=2", {
            "@odata.count": "102",
            value: [{ SalesOrderID: "1" }, { SalesOrderID: "2" }]
        }).expectChange("count").expectChange("id", ["1", "2"]);
        return this.createView(assert, sView, oModel).then(function () {
            oTable = that.oView.byId("listReport");
            oListBinding = that.oView.byId("listReport").getBinding("items");
            that.expectChange("count", "102");
            that.oView.byId("count").setBindingContext(oListBinding.getHeaderContext());
            return that.waitForChanges(assert);
        }).then(function () {
            oKeptContext = oTable.getItems()[0].getBindingContext();
            oKeptContext.setKeepAlive(true, fnOnBeforeDestroy);
            assert.ok(oKeptContext.isKeepAlive(), "(2)");
            if (oFixture.bFilter) {
                that.expectRequest("SalesOrderList?$count=true&$select=SalesOrderID" + "&$filter=GrossAmount gt 1000&$skip=0&$top=2", {
                    "@odata.count": "42",
                    value: [{ SalesOrderID: "3" }, { SalesOrderID: "4" }]
                }).expectChange("id", ["3", "4"]).expectChange("count", "42");
                oListBinding.filter(new Filter("GrossAmount", FilterOperator.GT, 1000));
            }
            return that.waitForChanges(assert, "(3)");
        }).then(function () {
            that.checkMoreButton(assert, oFixture.bFilter ? "[2/42]" : "[2/102]");
            that.expectChange("id", [""]).expectRequest({
                method: "POST",
                url: "SalesOrderList",
                payload: {}
            }, { SalesOrderID: "new" }).expectChange("count", oFixture.bFilter ? "43" : "103").expectChange("id", ["new"]);
            oListBinding.create({}, true);
            return that.waitForChanges(assert, "(4)");
        }).then(function () {
            var iBatch = oFixture.bFilter ? 4 : 3;
            that.checkMoreButton(assert, oFixture.bFilter ? "[2/43]" : "[2/103]");
            that.expectRequest({
                batchNo: iBatch,
                method: "DELETE",
                url: "SalesOrderList('1')"
            });
            if (oFixture.bFilter) {
                that.expectRequest({
                    batchNo: iBatch,
                    url: "SalesOrderList?$count=true" + "&$filter=(GrossAmount gt 1000) and not (SalesOrderID eq 'new')" + "&$top=0"
                }, {
                    "@odata.count": oFixture.bCountHasChanged ? "41" : "42",
                    value: []
                });
            }
            else {
                that.expectChange("id", [, "2"]);
            }
            if (oFixture.bCountHasChanged) {
                that.expectChange("count", oFixture.bFilter ? "42" : "102");
            }
            return Promise.all([
                oKeptContext.delete(),
                that.waitForChanges(assert, "(5)")
            ]);
        }).then(function () {
            if (oFixture.bFilter) {
                that.checkMoreButton(assert, oFixture.bCountHasChanged ? "[2/42]" : "[2/43]");
            }
            else {
                that.checkMoreButton(assert, "[2/102]");
            }
            if (oFixture.bCountHasChanged) {
                return that.waitForChanges(assert, "await rendering").then(function () {
                    sinon.assert.called(fnOnBeforeDestroy);
                });
            }
            else {
                sinon.assert.called(fnOnBeforeDestroy);
            }
        });
    });
});
QUnit.test("CPOUI5ODATAV4-480", function (assert) {
    var that = this;
    return this.createKeepAliveScenario(assert, true).then(function (oKeptContext) {
        that.checkMoreButton(assert, "[2/27]");
        that.expectRequest({
            batchNo: 4,
            headers: {
                "If-Match": "etag1"
            },
            method: "DELETE",
            url: "SalesOrderList('1')"
        }, createErrorInsideBatch(null, 404)).expectRequest({
            batchNo: 4,
            url: "SalesOrderList?$count=true&$filter=GrossAmount gt 123&$top=0"
        }).expectChange("objectPageGrossAmount", null).expectChange("objectPageNote", null).expectRequest({
            batchNo: 5,
            url: "SalesOrderList?$count=true&$filter=GrossAmount gt 123&$top=0"
        }, {
            "@odata.count": "38",
            value: []
        });
        oKeptContext.delete();
        return that.waitForChanges(assert);
    }).then(function () {
        that.checkMoreButton(assert, "[2/38]");
    });
});
QUnit.skip("ODataPropertyBinding#initialize while not resolved", function (assert) {
    var sView = "<Text id=\"text\" text=\"fixed value\"/>", that = this;
    return this.createView(assert, sView).then(function () {
        var fnResolve, oPromise = new Promise(function (resolve) {
            fnResolve = resolve;
        }), oText = that.oView.byId("text");
        assert.strictEqual(oText.getText(), "fixed value");
        oText.bindText("Name");
        oText.getBinding("text").attachEventOnce("change", function () {
            assert.strictEqual(oText.getText(), undefined);
            fnResolve();
        });
        return oPromise;
    });
});
QUnit.test("CPOUI5ODATAV4-408: $If comparing a number", function (assert) {
    var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/As(1)}\">\t<Text id=\"avalue\" text=\"{AValue}\"/></FlexBox>", that = this;
    this.expectRequest("As(1)?$select=AID,AValue", {
        AID: 1,
        AValue: 1000
    }).expectChange("avalue", "1,000");
    return this.createView(assert, sView, oModel).then(function () {
        var oMetaModel = oModel.getMetaModel(), oContext = oMetaModel.createBindingContext("/As/AID@com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"), vRawValue = oContext.getObject(), sBinding = AnnotationHelper.value(vRawValue, { context: oContext }), oText = new Text({ text: sBinding, models: oModel });
        oText.setBindingContext(that.oView.byId("form").getBindingContext());
        return Promise.all(oText.getBinding("text").getBindings().map(function (oBinding) {
            return oBinding.requestValue();
        })).then(function () {
            assert.strictEqual(oText.getText(), "in,maybe");
        });
    });
});
[1, 11].forEach(function (iValue) {
    var sTitle = "CPOUI5ODATAV4-408: ValueListRelevantQualifiers, value=" + iValue;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/As(1)}\">\t<Text id=\"aid\" text=\"{AID}\"/></FlexBox>", that = this;
        this.expectRequest("As(1)?$select=AID", { AID: 1 }).expectChange("aid", "1");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest("As(1)?$select=AValue", {
                AValue: iValue
            });
            return that.oView.byId("aid").getBinding("text").requestValueListInfo();
        }).then(function (mQualifier2ValueListType) {
            assert.deepEqual(Object.keys(mQualifier2ValueListType), iValue > 10 ? ["in", "maybe"] : ["in"]);
        });
    });
});
[0, 1].forEach(function (iValue) {
    var sTitle = "CPOUI5ODATAV4-1251: ValueListRelevantQualifiers and ValueListWithFixedValues" + ", value=" + iValue;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"form\" binding=\"{/Bs(1)}\">\t<Text id=\"bid\" text=\"{BID}\"/>\t<Text id=\"bvalue\" text=\"{BValue}\"/></FlexBox>", that = this;
        this.expectRequest("Bs(1)?$select=BID,BValue", { BID: 1, BValue: iValue }).expectChange("bid", "1").expectChange("bvalue", "" + iValue);
        return this.createView(assert, sView, oModel).then(function () {
            return that.oView.byId("bid").getBinding("text").requestValueListInfo();
        }).then(function (mQualifier2ValueListType) {
            delete mQualifier2ValueListType[""].$model;
            assert.deepEqual(mQualifier2ValueListType, {
                "": {
                    Label: iValue ? "Second label" : "First label",
                    $qualifier: iValue ? "one" : "zero"
                }
            });
        });
    });
});
QUnit.test("ODataPropertyBindings and CompositeBindings: $$ignoreMessages", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<FlexBox id=\"objectPage\" binding=\"{path : '/EMPLOYEES(\\'1\\')', \tparameters : {$select : '__CT__FAKE__Message/__FAKE__Messages'}}\">\t\t<Input id=\"Name0\" value=\"{Name}\"/>\t\t<Input id=\"Name1\" value=\"{path : 'Name', parameters : {$$ignoreMessages : false}}\"/>\t\t<Input id=\"Name2\" value=\"{path : 'Name', parameters : {$$ignoreMessages : true}}\"/>\t\t<Input id=\"Composite0\" value=\"{= ${ID} + ${value : ' - '} + ${path : 'Name'}}\"/>\t\t<Input id=\"Composite1\" value=\"{= ${ID} + ${value : ' - '} + ${\t\t\tpath : 'Name',\t\t\tparameters : {$$ignoreMessages : false}\t\t}}\"/>\t\t<Input id=\"Composite2\" value=\"{= ${ID} + ${value : ' - '} + ${\t\t\tpath : 'Name',\t\t\tparameters : {$$ignoreMessages : true}\t\t}}\"/>\t\t<Input id=\"Composite3\" value=\"{parts : ['ID', {value : '-'}, {\t\t\tpath : 'Name',\t\t\tparameters : {$$ignoreMessages : false}\t\t}]}\"/>\t\t<Input id=\"Composite4\" value=\"{parts : ['ID', {value : '-'}, {\t\t\tpath : 'Name',\t\t\tparameters : {$$ignoreMessages : true}\t\t}]}\"/></FlexBox>", that = this;
    this.expectRequest("EMPLOYEES('1')" + "?$select=ID,Name,__CT__FAKE__Message/__FAKE__Messages", {
        ID: "1",
        Name: "Name",
        __CT__FAKE__Message: {
            __FAKE__Messages: [{
                    code: "1",
                    message: "Foo",
                    numericSeverity: 3,
                    target: "Name",
                    transition: false
                }]
        }
    }).expectChange("Name0", "Name").expectChange("Name1", "Name").expectChange("Name2", "Name").expectMessages([{
            code: "1",
            message: "Foo",
            target: "/EMPLOYEES('1')/Name",
            type: "Warning"
        }]);
    return this.createView(assert, sView, oModel).then(function () {
        assert.strictEqual(that.oView.byId("Composite0").getValue(), "1 - Name");
        assert.strictEqual(that.oView.byId("Composite1").getValue(), "1 - Name");
        assert.strictEqual(that.oView.byId("Composite2").getValue(), "1 - Name");
        assert.strictEqual(that.oView.byId("Composite3").getValue(), "1 - Name");
        assert.strictEqual(that.oView.byId("Composite4").getValue(), "1 - Name");
        return Promise.all([
            that.checkValueState(assert, "Name0", "Warning", "Foo"),
            that.checkValueState(assert, "Name1", "Warning", "Foo"),
            that.checkValueState(assert, "Name2", "None", ""),
            that.checkValueState(assert, "Composite0", "Warning", "Foo"),
            that.checkValueState(assert, "Composite1", "Warning", "Foo"),
            that.checkValueState(assert, "Composite2", "None", ""),
            that.checkValueState(assert, "Composite3", "Warning", "Foo"),
            that.checkValueState(assert, "Composite4", "None", ""),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-366: Context#refresh on a context that is not in the collection" + "; after refresh that context is not in the collection", function (assert) {
    var that = this;
    return this.createKeepAliveScenario(assert, true).then(function (oKeptContext) {
        that.expectRequest("SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID", {
            value: [{ GrossAmount: "199", Note: "After refresh", SalesOrderID: "1" }]
        }).expectChange("objectPageGrossAmount", "199.00").expectChange("objectPageNote", "After refresh").expectRequest("SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100", {
            value: []
        });
        oKeptContext.refresh(undefined, true);
        return that.waitForChanges(assert, "(3)");
    });
});
QUnit.test("CPOUI5ODATAV4-366: Context#refresh on a context that is not in the collection" + "; after refresh the entity is deleted", function (assert) {
    var fnOnBeforeDestroy = sinon.stub(), that = this;
    return this.createKeepAliveScenario(assert, true, fnOnBeforeDestroy).then(function (oKeptContext) {
        that.expectRequest("SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID", {
            value: []
        }).expectChange("objectPageGrossAmount", null).expectChange("objectPageNote", null);
        oKeptContext.refresh(undefined, true);
        return that.waitForChanges(assert, "(3)");
    }).then(function () {
        sinon.assert.called(fnOnBeforeDestroy);
    });
});
QUnit.test("CPOUI5ODATAV4-366: Context#refresh on a context that is in the collection" + "; after refresh that context is not in the collection", function (assert) {
    var that = this;
    return this.createKeepAliveScenario(assert, false).then(function (oKeptContext) {
        that.expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID"
        }, {
            value: [{ GrossAmount: "199", Note: "After refresh", SalesOrderID: "1" }]
        }).expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=(GrossAmount le 150) and SalesOrderID eq '1'" + "&$count=true&$top=0"
        }, {
            "@odata.count": "0",
            value: []
        }).expectChange("objectPageGrossAmount", "199.00").expectChange("objectPageNote", "After refresh").expectChange("grossAmount", ["199.00"]).expectRequest({
            batchNo: 4,
            url: "SalesOrderList?$count=true&$filter=GrossAmount le 150" + "&$select=GrossAmount,SalesOrderID&$skip=1&$top=1"
        }, {
            "@odata.count": "41",
            value: [{ GrossAmount: "120", SalesOrderID: "4" }]
        }).expectChange("id", [, "4"]).expectChange("grossAmount", [, "120.00"]).expectRequest({
            batchNo: 4,
            url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100"
        }, {
            value: []
        });
        oKeptContext.refresh(undefined, true);
        return that.waitForChanges(assert, "(2)");
    }).then(function () {
        assert.equal(that.oView.byId("listReport").getItems()[0].getBindingContext().getPath(), "/SalesOrderList('2')");
    });
});
QUnit.test("CPOUI5ODATAV4-366: Context#refresh on a context that is in the collection" + "; after refresh that context is in the collection", function (assert) {
    var that = this;
    return this.createKeepAliveScenario(assert, false).then(function (oKeptContext) {
        that.expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID"
        }, {
            value: [{ GrossAmount: "140", Note: "After refresh", SalesOrderID: "1" }]
        }).expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=(GrossAmount le 150) and SalesOrderID eq '1'" + "&$count=true&$top=0"
        }, {
            "@odata.count": "1",
            value: []
        }).expectChange("objectPageGrossAmount", "140.00").expectChange("objectPageNote", "After refresh").expectChange("grossAmount", ["140.00"]).expectRequest({
            batchNo: 4,
            url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100"
        }, {
            value: []
        });
        oKeptContext.refresh(undefined, true);
        return that.waitForChanges(assert, "(2)");
    });
});
QUnit.test("CPOUI5ODATAV4-366: Context#refresh on a context that is in the collection" + ", after refresh the entity is deleted", function (assert) {
    var fnOnBeforeDestroy = sinon.stub(), that = this;
    return this.createKeepAliveScenario(assert, false, fnOnBeforeDestroy).then(function (oKeptContext) {
        that.expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID"
        }, {
            value: []
        }).expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=(GrossAmount le 150) and SalesOrderID eq '1'" + "&$count=true&$top=0"
        }, {
            "@odata.count": "0",
            value: []
        }).expectChange("objectPageGrossAmount", null).expectChange("objectPageNote", null).expectChange("id", null).expectChange("grossAmount", null).expectRequest({
            batchNo: 4,
            url: "SalesOrderList?$count=true&$filter=GrossAmount le 150" + "&$select=GrossAmount,SalesOrderID&$skip=1&$top=1"
        }, {
            "@odata.count": "41",
            value: [{ GrossAmount: "120", SalesOrderID: "4" }]
        }).expectChange("id", [, "4"]).expectChange("grossAmount", [, "120.00"]);
        oKeptContext.refresh(undefined, true);
        return that.waitForChanges(assert, "(2)");
    }).then(function () {
        sinon.assert.called(fnOnBeforeDestroy);
        assert.equal(that.oView.byId("listReport").getItems()[0].getBindingContext().getPath(), "/SalesOrderList('2')");
    });
});
[false, true].forEach(function (bKeepAlive) {
    var sTitle = "CPOUI5ODATAV4-366: Context#refresh w/o $count & paging does not reload data" + ", bKeepAlive = " + bKeepAlive;
    QUnit.test(sTitle, function (assert) {
        var oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{path : '/SalesOrderList',\t\tfilters : {path : 'GrossAmount', operator : 'LE', value1 : 150}}\">\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/></Table>", that = this;
        this.expectRequest("SalesOrderList?$filter=GrossAmount le 150" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=100", {
            value: [
                { GrossAmount: "123", SalesOrderID: "1" },
                { GrossAmount: "99", SalesOrderID: "2" },
                { GrossAmount: "101", SalesOrderID: "3" }
            ]
        });
        return this.createView(assert, sView, oModel).then(function () {
            var oContext = that.oView.byId("table").getItems()[0].getBindingContext();
            if (bKeepAlive) {
                oContext.setKeepAlive(true);
                that.expectRequest("SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,SalesOrderID", {
                    value: [{ GrossAmount: "190", SalesOrderID: "1" }]
                }).expectRequest("SalesOrderList" + "?$filter=(GrossAmount le 150) and SalesOrderID eq '1'" + "&$count=true&$top=0", {
                    "@odata.count": "0",
                    value: []
                });
            }
            else {
                that.expectRequest("SalesOrderList" + "?$filter=(GrossAmount le 150) and SalesOrderID eq '1'" + "&$select=GrossAmount,SalesOrderID", {
                    value: []
                });
            }
            oContext.refresh(undefined, true);
            return that.waitForChanges(assert);
        });
    });
});
QUnit.test("$byPredicate for empty collections", function (assert) {
    var oModel = createSpecialCasesModel(), sView = "<FlexBox binding=\"{path : '/Artists(ArtistID=\\'ABC\\',IsActiveEntity=false)',\tparameters : {$expand : {_Friend : null, _Publication : null}}}\">\t<Text id=\"id\" text=\"{ArtistID}\"/>\t<Text text=\"{_Friend(ArtistID='bar',IsActiveEntity=false)/ArtistID}\"/>\t<Text text=\"{_Publication('foo')/PublicationID}\"/></FlexBox>";
    this.oLogMock.expects("error").withArgs("Failed to drill-down into" + " _Friend(ArtistID='bar',IsActiveEntity=false)/ArtistID" + ", invalid segment: _Friend(ArtistID='bar',IsActiveEntity=false)");
    this.oLogMock.expects("error").withArgs("Failed to drill-down into" + " _Publication('foo')/PublicationID, invalid segment: _Publication('foo')");
    this.expectRequest("Artists(ArtistID='ABC',IsActiveEntity=false)" + "?$expand=_Friend,_Publication", {
        ArtistID: "ABC",
        IsActiveEntity: false,
        _Friend: [{
                ArtistID: "n/a",
                IsActiveEntity: true
            }],
        _Publication: []
    }).expectChange("id", "ABC");
    return this.createView(assert, sView, oModel);
});
QUnit.test("CPOUI5ODATAV4-366: kept-context in collection only one request", function (assert) {
    var oContext, oInput, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Input id=\"grossAmount\" value=\"{GrossAmount}\"/></Table>", that = this;
    this.expectRequest("SalesOrderList?$select=GrossAmount,SalesOrderID&$skip=0&$top=100", {
        value: [
            { GrossAmount: "123", SalesOrderID: "1" },
            { GrossAmount: "99", SalesOrderID: "2" }
        ]
    }).expectChange("grossAmount", ["123.00", "99.00"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=Messages", {
            Messages: [{
                    message: "Just a message",
                    numericSeverity: 2,
                    target: "GrossAmount"
                }]
        }).expectMessages([{
                message: "Just a message",
                type: "Information",
                target: "/SalesOrderList('1')/GrossAmount"
            }]);
        oContext = that.oView.byId("table").getItems()[0].getBindingContext();
        oContext.setKeepAlive(true, null, true);
        return that.waitForChanges(assert);
    }).then(function () {
        oInput = that.oView.byId("table").getItems()[0].getCells()[0];
        return that.checkValueState(assert, oInput, "Information", "Just a message");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=GrossAmount,Messages,SalesOrderID" + "&$filter=SalesOrderID eq '1'", {
            value: [{ GrossAmount: "190", Messages: [], SalesOrderID: "1" }]
        }).expectChange("grossAmount", ["190.00"]).expectMessages([]);
        oContext.refresh(undefined, true);
        return that.waitForChanges(assert);
    }).then(function () {
        return that.checkValueState(assert, oInput, "None", "");
    }).then(function () {
        that.expectRequest("SalesOrderList('1')?$select=GrossAmount,Messages,SalesOrderID", createErrorInsideBatch()).expectMessages([{
                code: "CODE",
                message: "Request intentionally failed",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        that.oLogMock.expects("error").withArgs("Failed to refresh entity: /SalesOrderList('1')[0]");
        return Promise.all([
            oContext.requestRefresh().then(mustFail(assert), function (oError) {
                assert.strictEqual(oError.message, "Request intentionally failed");
            }),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2070459149: transient context + nested ODLB w/ own cache", function (assert) {
    var oContext, oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), sView = "<FlexBox binding=\"{/TEAMS('1')}\">\t<Table id=\"employees\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t<List items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', parameters : {$$ownRequest : true}, \t\t\ttemplateShareable : false}\">\t\t\t<CustomListItem>\t\t\t\t<Text id=\"category\" text=\"{Category}\"/>\t\t\t</CustomListItem>\t\t</List>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('1')?$select=Team_Id&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
        Team_Id: "1",
        TEAM_2_EMPLOYEES: []
    }).expectChange("name", []).expectChange("category", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("name", ["John Doe"]);
        oContext = that.oView.byId("employees").getBinding("items").create({ Name: "John Doe" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "TEAMS('1')/TEAM_2_EMPLOYEES",
            payload: { Name: "John Doe" }
        }, { ID: "2", Name: "John Doe" }).expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES('2')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID&$skip=0&$top=100", {
            value: [{ Category: "Electronics", ID: "1" }]
        }).expectChange("category", ["Electronics"]);
        return Promise.all([
            that.oModel.submitBatch("update"),
            oContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("BCP: 2070459149: transient context + nested ODCB w/ own cache", function (assert) {
    var oContext, oModel = createTeaBusiModel({ autoExpandSelect: true, updateGroupId: "update" }), sView = "<FlexBox binding=\"{/TEAMS('1')}\">\t<Table id=\"employees\" items=\"{TEAM_2_EMPLOYEES}\">\t\t<Text id=\"name\" text=\"{Name}\"/>\t\t<FlexBox binding=\"{path : 'EMPLOYEE_2_MANAGER', parameters : {$$ownRequest : true}}\">\t\t\t<Text id=\"teamId\" text=\"{TEAM_ID}\"/>\t\t</FlexBox>\t</Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('1')?$select=Team_Id&$expand=TEAM_2_EMPLOYEES($select=ID,Name)", {
        Team_Id: "1",
        TEAM_2_EMPLOYEES: []
    }).expectChange("name", []).expectChange("teamId");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectChange("name", ["John Doe"]).expectChange("teamId", null);
        oContext = that.oView.byId("employees").getBinding("items").create({ Name: "John Doe" }, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            url: "TEAMS('1')/TEAM_2_EMPLOYEES",
            payload: { Name: "John Doe" }
        }, { ID: "2", Name: "John Doe" }).expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES('2')/EMPLOYEE_2_MANAGER" + "?$select=ID,TEAM_ID", { ID: "23", TEAM_ID: "1" }).expectChange("teamId", "1");
        return Promise.all([
            that.oModel.submitBatch("update"),
            oContext.created(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-488: Refresh w/ kept-alive context", function (assert) {
    var oKeptContext, oListBinding, fnOnBeforeDestroy = sinon.stub(), oTable, that = this;
    return this.createKeepAliveScenario(assert, true).then(function (oKeptContext0) {
        oKeptContext = oKeptContext0;
        oTable = that.oView.byId("listReport");
        oListBinding = oKeptContext.getBinding();
        oTable.getItems()[0].getBindingContext().setKeepAlive(true);
        that.expectRequest({
            batchNo: 4,
            url: "SalesOrderList" + "?$filter=SalesOrderID eq '1' or SalesOrderID eq '2'" + "&$select=GrossAmount,Note,SalesOrderID&$top=2"
        }, {
            value: [{
                    GrossAmount: "50",
                    Note: "After refresh",
                    SalesOrderID: "1"
                }, {
                    GrossAmount: "149.1",
                    Note: "Note 2",
                    SalesOrderID: "2"
                }]
        }).expectChange("objectPageGrossAmount", "50.00").expectChange("objectPageNote", "After refresh").expectRequest({
            batchNo: 4,
            url: "SalesOrderList?$count=true&$filter=GrossAmount gt 123" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=2"
        }, {
            "@odata.count": "27",
            value: [{
                    GrossAmount: "149.1",
                    SalesOrderID: "2"
                }, {
                    GrossAmount: "789.1",
                    SalesOrderID: "3"
                }]
        }).expectChange("grossAmount", ["149.10", "789.10"]).expectRequest({
            batchNo: 4,
            url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100"
        }, {
            value: [{
                    ItemPosition: "0020",
                    SalesOrderID: "1"
                }]
        }).expectChange("itemPosition", ["0020"]);
        oListBinding.refresh();
        return that.waitForChanges(assert, "Step 1: Refresh the list (w/ two kept contexts)");
    }).then(function () {
        oTable.getItems()[1].getBindingContext().setKeepAlive(true, fnOnBeforeDestroy);
        that.expectRequest({
            batchNo: 5,
            url: "SalesOrderList?$filter=SalesOrderID eq '1' or SalesOrderID eq '2'" + " or SalesOrderID eq '3'&$select=GrossAmount,Note,SalesOrderID&$top=3"
        }, {
            value: [{
                    GrossAmount: "50.2",
                    Note: "After refresh 2",
                    SalesOrderID: "1"
                }, {
                    GrossAmount: "149.2",
                    Note: "Note 2",
                    SalesOrderID: "2"
                }]
        }).expectChange("objectPageGrossAmount", "50.20").expectChange("objectPageNote", "After refresh 2").expectRequest({
            batchNo: 5,
            url: "SalesOrderList?$count=true&$filter=GrossAmount gt 123" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=2"
        }, {
            "@odata.count": "26",
            value: [{
                    GrossAmount: "149.2",
                    SalesOrderID: "2"
                }, {
                    GrossAmount: "789.2",
                    SalesOrderID: "4"
                }]
        }).expectChange("id", [, "4"]).expectChange("grossAmount", ["149.20", "789.20"]).expectRequest({
            batchNo: 5,
            url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100"
        }, {
            value: [{
                    ItemPosition: "0030",
                    SalesOrderID: "1"
                }]
        }).expectChange("itemPosition", ["0030"]);
        oListBinding.refresh();
        return that.waitForChanges(assert, "Step 2: Refresh the list (w/ three kept contexts)");
    }).then(function () {
        sinon.assert.called(fnOnBeforeDestroy);
        that.expectRequest("SalesOrderList?$filter=SalesOrderID eq '2' or SalesOrderID eq '4'" + " or SalesOrderID eq '1'&$select=GrossAmount,SalesOrderID&$top=3", {
            value: [{
                    GrossAmount: "149.3",
                    SalesOrderID: "2"
                }, {
                    GrossAmount: "789.3",
                    SalesOrderID: "4"
                }, {
                    GrossAmount: "50.3",
                    SalesOrderID: "1"
                }]
        }).expectChange("grossAmount", ["149.30", "789.30"]).expectChange("objectPageGrossAmount", "50.30");
        return Promise.all([
            oListBinding.getHeaderContext().requestSideEffects(["GrossAmount"]),
            that.waitForChanges(assert, "Step 3: request side effects with kept contexts")
        ]);
    }).then(function () {
        sinon.assert.called(fnOnBeforeDestroy);
        that.expectRequest("SalesOrderList?$filter=SalesOrderID eq '2' or SalesOrderID eq '4'" + "&$select=GrossAmount,SalesOrderID&$top=2", {
            value: [{
                    GrossAmount: "149.4",
                    SalesOrderID: "2"
                }, {
                    GrossAmount: "789.4",
                    SalesOrderID: "4"
                }]
        }).expectChange("grossAmount", ["149.40", "789.40"]).expectChange("objectPageGrossAmount", null).expectChange("objectPageNote", null);
        that.oView.byId("objectPage").setBindingContext(null);
        oKeptContext.setKeepAlive(false);
        return Promise.all([
            oListBinding.getHeaderContext().requestSideEffects(["GrossAmount"]),
            that.waitForChanges(assert, "Step 4: request side effects with kept contexts not yet destroyed")
        ]);
    });
});
[function (oModel) {
        var oHiddenBinding = oModel.bindContext("/TEAMS('42')");
        return oHiddenBinding.getBoundContext();
    }].forEach(function (fnCreateContext, i) {
    QUnit.test("CPOUI5ODATAV4-766: re-read dependent if parent is new, #" + i, function (assert) {
        var oModel = createTeaBusiModel({ autoExpandSelect: true }), oObjectPage, oOldRoot, oSubObjectPage, sView = "<FlexBox id=\"objectPage\" binding=\"{}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Table id=\"employees\"\t\t\titems=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t</Table></FlexBox><FlexBox id=\"subObjectPage\" binding=\"{}\">\t<Table id=\"equipments\"\t\t\titems=\"{path : 'EMPLOYEE_2_EQUIPMENTS', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"category\" text=\"{Category}\"/>\t</Table></FlexBox>", that = this;
        this.expectChange("name").expectChange("age", []).expectChange("category", []);
        return this.createView(assert, sView, oModel).then(function () {
            oObjectPage = that.oView.byId("objectPage");
            oOldRoot = fnCreateContext(oModel);
            that.expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES?$select=AGE,ID&$skip=0&$top=100", {
                value: [{
                        AGE: 31,
                        ID: "1"
                    }, {
                        AGE: 32,
                        ID: "2"
                    }]
            }).expectRequest("TEAMS('42')?$select=Name,Team_Id", {
                Name: "Team 42",
                Team_Id: "42"
            }).expectChange("name", "Team 42").expectChange("age", ["31", "32"]);
            oObjectPage.setBindingContext(oOldRoot);
            return that.waitForChanges(assert, "Show team");
        }).then(function () {
            var oEmployeesBinding = that.oView.byId("employees").getBinding("items");
            oSubObjectPage = that.oView.byId("subObjectPage");
            that.expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES('1')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID&$skip=0&$top=100", {
                value: [{
                        Category: "C1.1",
                        ID: "1.1"
                    }, {
                        Category: "C1.2",
                        ID: "1.2"
                    }]
            }).expectChange("category", ["C1.1", "C1.2"]);
            oSubObjectPage.setBindingContext(oEmployeesBinding.getCurrentContexts()[0]);
            return that.waitForChanges(assert, "Show employee");
        }).then(function () {
            var oNewRoot = fnCreateContext(oModel);
            that.expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES?$select=AGE,ID&$skip=0&$top=100", {
                value: [{
                        AGE: 33,
                        ID: "3"
                    }, {
                        AGE: 34,
                        ID: "4"
                    }]
            }).expectRequest("TEAMS('42')?$select=Name,Team_Id", {
                Name: "New Team 42",
                Team_Id: "42"
            }).expectChange("name", "New Team 42").expectChange("age", ["33", "34"]);
            oSubObjectPage.setBindingContext(null);
            oObjectPage.setBindingContext(oNewRoot);
            return that.waitForChanges(assert, "Show team anew");
        }).then(function () {
            var oEmployeesBinding = that.oView.byId("employees").getBinding("items");
            that.expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES('3')/EMPLOYEE_2_EQUIPMENTS" + "?$select=Category,ID&$skip=0&$top=100", {
                value: [{
                        Category: "C3.1",
                        ID: "3.1"
                    }, {
                        Category: "C3.2",
                        ID: "3.2"
                    }]
            }).expectChange("category", ["C3.1", "C3.2"]);
            oSubObjectPage.setBindingContext(oEmployeesBinding.getCurrentContexts()[0]);
            return that.waitForChanges(assert, "Show employee anew");
        }).then(function () {
            that.expectChange("name", "Team 42").expectChange("age", ["33", "34"]);
            oSubObjectPage.setBindingContext(null);
            oObjectPage.setBindingContext(oOldRoot);
            return that.waitForChanges(assert, "Show old team again");
        }).then(function () {
            var oEmployeesBinding = that.oView.byId("employees").getBinding("items");
            that.expectChange("category", ["C3.1", "C3.2"]);
            oSubObjectPage.setBindingContext(oEmployeesBinding.getCurrentContexts()[0]);
            return that.waitForChanges(assert, "Show employee again");
        });
    });
});
QUnit.test("CPOUI5ODATAV4-766: re-read dependent if parent list is new", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), oObjectPage, oOldRoot, sView = "<FlexBox id=\"objectPage\" binding=\"{}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Table id=\"employees\"\t\t\titems=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t</Table></FlexBox>", that = this;
    this.expectChange("name").expectChange("age", []);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("TEAMS?$skip=0&$top=1", {
            value: [{
                    Name: "Team 42",
                    Team_Id: "42"
                }]
        });
        return oModel.bindList("/TEAMS").requestContexts(0, 1);
    }).then(function (aContexts) {
        oObjectPage = that.oView.byId("objectPage");
        oOldRoot = aContexts[0];
        that.expectChange("name", "Team 42").expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES?$select=AGE,ID&$skip=0&$top=100", {
            value: [{
                    AGE: 31,
                    ID: "1"
                }, {
                    AGE: 32,
                    ID: "2"
                }]
        }).expectChange("age", ["31", "32"]);
        oObjectPage.setBindingContext(oOldRoot);
        return that.waitForChanges(assert, "Show team");
    }).then(function () {
        that.expectRequest("TEAMS?$skip=0&$top=1", {
            value: [{
                    Name: "New Team 42",
                    Team_Id: "42"
                }]
        });
        return oModel.bindList("/TEAMS").requestContexts(0, 1);
    }).then(function (aContexts) {
        that.expectChange("name", "New Team 42").expectRequest("TEAMS('42')/TEAM_2_EMPLOYEES?$select=AGE,ID&$skip=0&$top=100", {
            value: [{
                    AGE: 33,
                    ID: "3"
                }, {
                    AGE: 34,
                    ID: "4"
                }]
        }).expectChange("age", ["33", "34"]);
        oObjectPage.setBindingContext(aContexts[0]);
        return that.waitForChanges(assert, "Show team anew");
    }).then(function () {
        that.expectChange("name", "Team 42").expectChange("age", ["33", "34"]);
        oObjectPage.setBindingContext(oOldRoot);
        return that.waitForChanges(assert, "Show old team again");
    });
});
QUnit.test("CPOUI5ODATAV4-578: kept-alive entity of object page deleted", function (assert) {
    var oError = createErrorInsideBatch({ message: "Not found" }), fnOnBeforeDestroy = sinon.stub(), that = this;
    return this.createKeepAliveScenario(assert, false, fnOnBeforeDestroy).then(function (oKeptContext) {
        that.oLogMock.expects("error").withExactArgs("Failed to get contexts for " + sSalesOrderService + "SalesOrderList('1')/SO_2_SOITEM" + " with start index 0 and length 100", sinon.match("Not found"), "sap.ui.model.odata.v4.ODataListBinding");
        that.expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$filter=SalesOrderID eq '1'" + "&$select=GrossAmount,Note,SalesOrderID"
        }, {
            value: []
        }).expectChange("objectPageGrossAmount", null).expectChange("objectPageNote", null).expectRequest({
            batchNo: 3,
            url: "SalesOrderList?$count=true&$filter=GrossAmount le 150" + "&$select=GrossAmount,SalesOrderID&$skip=0&$top=2"
        }, {
            "@odata.count": "41",
            value: [{
                    GrossAmount: 149.1,
                    SalesOrderID: "2"
                }, {
                    GrossAmount: 99,
                    SalesOrderID: "3"
                }]
        }).expectChange("id", [, "3"]).expectChange("grossAmount", ["149.10", "99.00"]).expectRequest({
            batchNo: 3,
            url: "SalesOrderList('1')/SO_2_SOITEM" + "?$select=ItemPosition,SalesOrderID&$skip=0&$top=100"
        }, oError).expectMessages([{
                code: "CODE",
                message: "Not found",
                persistent: true,
                technical: true,
                type: "Error"
            }]);
        return Promise.all([
            oKeptContext.getBinding().requestRefresh().then(mustFail(assert), function (oError0) {
                assert.strictEqual(oError0.message, "Not found");
            }),
            that.waitForChanges(assert, "(3) refresh the list")
        ]);
    }).then(function () {
        sinon.assert.called(fnOnBeforeDestroy);
    });
});
[{
        description: "(1) first list, then object page",
        setup: function (assert, oListBinding) {
            var that = this;
            this.expectRequest("Artists" + "?$select=ArtistID,IsActiveEntity,Name,defaultChannel,sendsAutographs" + "&$skip=0&$top=100", {
                value: [{
                        "@odata.etag": "etag.active1",
                        ArtistID: "A1",
                        IsActiveEntity: true,
                        Name: "Artist 1",
                        defaultChannel: "Channel 1",
                        sendsAutographs: true
                    }]
            }).expectChange("listName", ["Artist 1"]).expectChange("listChannel", ["Channel 1"]).expectChange("sendsAutographs", ["Yes"]);
            oListBinding.resume();
            return this.waitForChanges(assert, "initialize list").then(function () {
                var oRowContext = oListBinding.getCurrentContexts()[0];
                that.expectRequest("Artists(ArtistID='A1',IsActiveEntity=true)" + "?$select=Messages,lastUsedChannel", {
                    "@odata.etag": "etag.active1",
                    Messages: [{
                            message: "Active message",
                            numericSeverity: 2,
                            target: "defaultChannel"
                        }],
                    lastUsedChannel: "Channel 2"
                }).expectRequest("Artists(ArtistID='A1',IsActiveEntity=true)/_Publication" + "?$select=PublicationID&$skip=0&$top=100", { value: [{ PublicationID: "P1" }] }).expectChange("name", "Artist 1").expectChange("channel", "Channel 1").expectChange("lastUsedChannel", "Channel 2").expectChange("publication", ["P1"]).expectMessages([{
                        message: "Active message",
                        type: "Information",
                        target: "/Artists(ArtistID='A1',IsActiveEntity=true)/defaultChannel"
                    }]);
                oRowContext.setKeepAlive(true, null, true);
                that.oView.byId("objectPage").setBindingContext(oRowContext);
                return that.waitForChanges(assert, "initialize object page");
            });
        }
    }, {
        description: "(2) first object page, then list",
        setup: function (assert, oListBinding) {
            var oHiddenBinding = this.oModel.bindContext("/Artists(ArtistID='A1',IsActiveEntity=true)", null, { $select: ["Messages"] }), that = this;
            this.expectRequest("Artists(ArtistID='A1',IsActiveEntity=true)" + "?$select=ArtistID,IsActiveEntity,Messages,Name,defaultChannel,lastUsedChannel", {
                "@odata.etag": "etag.active1",
                ArtistID: "A1",
                IsActiveEntity: true,
                Messages: [{
                        message: "Active message",
                        numericSeverity: 2,
                        target: "defaultChannel"
                    }],
                Name: "Artist 1",
                defaultChannel: "Channel 1",
                lastUsedChannel: "Channel 2"
            }).expectRequest("Artists(ArtistID='A1',IsActiveEntity=true)/_Publication" + "?$select=PublicationID&$skip=0&$top=100", { value: [{ PublicationID: "P1" }] }).expectChange("name", "Artist 1").expectChange("channel", "Channel 1").expectChange("lastUsedChannel", "Channel 2").expectChange("publication", ["P1"]).expectMessages([{
                    message: "Active message",
                    type: "Information",
                    target: "/Artists(ArtistID='A1',IsActiveEntity=true)/defaultChannel"
                }]);
            this.oView.byId("objectPage").setBindingContext(oHiddenBinding.getBoundContext());
            return this.waitForChanges(assert, "initialize object page").then(function () {
                that.expectRequest("Artists" + "?$select=ArtistID,IsActiveEntity,Name,defaultChannel,sendsAutographs" + "&$skip=0&$top=100", {
                    value: [{
                            "@odata.etag": "etag.active1",
                            ArtistID: "A1",
                            IsActiveEntity: true,
                            Name: "Artist 1",
                            defaultChannel: "Channel 1",
                            sendsAutographs: true
                        }]
                }).expectChange("listName", ["Artist 1"]).expectChange("listChannel", ["Channel 1"]).expectChange("sendsAutographs", ["Yes"]);
                oHiddenBinding.getBoundContext().requestObject().then(function () {
                    oHiddenBinding.moveEntityTo(oListBinding);
                });
                return that.waitForChanges(assert, "initialize & moveEntityTo");
            });
        }
    }].forEach(function (oFixture) {
    QUnit.test("FCL Safeguard: " + oFixture.description, function (assert) {
        var oListBinding, oModel = createSpecialCasesModel({ autoExpandSelect: true }), oObjectPage, sView = "<Table id=\"listReport\" items=\"{path : '/Artists', \t\tparameters : {$$patchWithoutSideEffects : true}, suspended : true}\">\t<Text id=\"listName\" text=\"{Name}\"/>\t<Text id=\"listChannel\" text=\"{defaultChannel}\"/>\t<Text id=\"sendsAutographs\" text=\"{sendsAutographs}\"/></Table><FlexBox id=\"objectPage\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Input id=\"channel\" value=\"{defaultChannel}\"/>\t<Text id=\"lastUsedChannel\" text=\"{lastUsedChannel}\"/>\t<Table items=\"{path : '_Publication', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"publication\" text=\"{PublicationID}\"/>\t</Table></FlexBox>", that = this;
        this.expectChange("listName", []).expectChange("listChannel", []).expectChange("sendsAutographs", []).expectChange("name").expectChange("channel").expectChange("lastUsedChannel").expectChange("publication", []);
        return this.createView(assert, sView, oModel).then(function () {
            oListBinding = that.oView.byId("listReport").getBinding("items");
            oObjectPage = that.oView.byId("objectPage");
            return oFixture.setup.call(that, assert, oListBinding);
        }).then(function () {
            return that.checkValueState(assert, "channel", "Information", "Active message");
        }).then(function () {
            var oActionBinding = that.oModel.bindContext("special.cases.EditAction(...)", oObjectPage.getBindingContext(), { $$inheritExpandSelect: true });
            that.expectRequest({
                method: "POST",
                url: "Artists(ArtistID='A1',IsActiveEntity=true)/special.cases.EditAction" + "?$select=ArtistID,IsActiveEntity,Messages,Name,defaultChannel," + "lastUsedChannel,sendsAutographs",
                headers: { "If-Match": "etag.active1" },
                payload: {}
            }, {
                "@odata.etag": "etag.draft1",
                ArtistID: "A1",
                IsActiveEntity: false,
                Messages: [{
                        message: "Draft message",
                        numericSeverity: 2,
                        target: "defaultChannel"
                    }],
                Name: "Artist 1",
                defaultChannel: "Channel 1",
                lastUsedChannel: "Channel 2",
                sendsAutographs: true
            }).expectMessages([{
                    message: "Active message",
                    type: "Information",
                    target: "/Artists(ArtistID='A1',IsActiveEntity=true)/defaultChannel"
                }, {
                    message: "Draft message",
                    type: "Information",
                    target: "/Artists(ArtistID='A1',IsActiveEntity=false)/defaultChannel"
                }]);
            return Promise.all([
                oActionBinding.execute(),
                that.waitForChanges(assert)
            ]);
        }).then(function (aResults) {
            var oReturnValueContext = aResults[0];
            that.expectRequest("Artists(ArtistID='A1',IsActiveEntity=false)/_Publication" + "?$select=PublicationID&$skip=0&$top=100", { value: [{ PublicationID: "P1" }] }).expectChange("publication", ["P1"]);
            oObjectPage.setBindingContext(oReturnValueContext);
            return that.waitForChanges(assert);
        }).then(function () {
            return that.checkValueState(assert, "channel", "Information", "Draft message");
        }).then(function () {
            that.expectChange("channel", "Channel 3").expectRequest({
                batchNo: 5,
                headers: {
                    "If-Match": "etag.draft1",
                    "Prefer": "return=minimal"
                },
                method: "PATCH",
                payload: {
                    defaultChannel: "Channel 3"
                },
                url: "Artists(ArtistID='A1',IsActiveEntity=false)"
            }).expectRequest({
                batchNo: 5,
                url: "Artists(ArtistID='A1',IsActiveEntity=false)" + "?$select=Messages,defaultChannel"
            }, {
                "@odata.etag": "etag.draft2",
                Messages: [{
                        message: "Updated message",
                        numericSeverity: 2,
                        target: "defaultChannel"
                    }],
                defaultChannel: "Channel 3*"
            }).expectChange("channel", "Channel 3*").expectMessages([{
                    message: "Active message",
                    type: "Information",
                    target: "/Artists(ArtistID='A1',IsActiveEntity=true)/defaultChannel"
                }, {
                    message: "Updated message",
                    type: "Information",
                    target: "/Artists(ArtistID='A1',IsActiveEntity=false)/defaultChannel"
                }]);
            that.oView.byId("channel").getBinding("value").setValue("Channel 3");
            return Promise.all([
                oObjectPage.getBindingContext().requestSideEffects(["defaultChannel", "Messages"]),
                that.waitForChanges(assert)
            ]);
        }).then(function () {
            return that.checkValueState(assert, "channel", "Information", "Updated message");
        });
    });
});
QUnit.test("moveEntity into kept-alive context outside collection", function (assert) {
    var oHiddenBinding, oModel = createSpecialCasesModel({ autoExpandSelect: true }), sView = "<Table id=\"listReport\" growing=\"true\" growingThreshold=\"2\" \t\titems=\"{path : '/Artists', suspended : true}\">\t<Text id=\"listName\" text=\"{Name}\"/></Table><FlexBox id=\"objectPage\">\t<Input id=\"name\" value=\"{Name}\"/></FlexBox><FlexBox id=\"anotherObjectPage\">\t<Input id=\"anotherName\" value=\"{Name}\"/></FlexBox>", that = this;
    this.expectChange("listName", []).expectChange("name").expectChange("anotherName");
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("Artists(ArtistID='A3',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Name", {
            ArtistID: "A3",
            IsActiveEntity: false,
            Name: "Artist 3"
        }).expectChange("name", "Artist 3");
        oHiddenBinding = that.oModel.bindContext("/Artists(ArtistID='A3',IsActiveEntity=false)");
        that.oView.byId("objectPage").setBindingContext(oHiddenBinding.getBoundContext());
        return that.waitForChanges(assert, "initialize object page");
    }).then(function () {
        that.expectRequest("Artists?$select=ArtistID,IsActiveEntity,Name&$skip=0&$top=2", {
            value: [{
                    ArtistID: "A1",
                    IsActiveEntity: true,
                    Name: "Artist 1"
                }, {
                    ArtistID: "A2",
                    IsActiveEntity: true,
                    Name: "Artist 2"
                }]
        }).expectChange("listName", ["Artist 1", "Artist 2"]);
        oHiddenBinding.getBoundContext().requestObject().then(function () {
            oHiddenBinding.moveEntityTo(that.oView.byId("listReport").getBinding("items"));
        });
        return that.waitForChanges(assert, "initialize & moveEntityTo");
    }).then(function () {
        that.expectChange("name", "Artist 3*").expectRequest({
            headers: {},
            method: "PATCH",
            payload: {
                Name: "Artist 3*"
            },
            url: "Artists(ArtistID='A3',IsActiveEntity=false)"
        });
        that.oView.byId("name").getBinding("value").setValue("Artist 3*");
        return that.waitForChanges(assert, "initialize & moveEntityTo");
    }).then(function () {
        that.expectRequest("Artists(ArtistID='A3',IsActiveEntity=false)" + "?$select=ArtistID,IsActiveEntity,Name", {
            ArtistID: "A3",
            IsActiveEntity: false,
            Name: "Artist 3"
        }).expectChange("anotherName", "Artist 3");
        oHiddenBinding.refresh();
        that.oView.byId("anotherObjectPage").setBindingContext(oHiddenBinding.getBoundContext());
        return that.waitForChanges(assert, "refresh & rebind");
    });
});
QUnit.test("Absolute ODLB: sort/filter/changeParameters/resume & late properties", function (assert) {
    var oListBinding, oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"list\" items=\"{/SalesOrderList}\">\t<Text id=\"listNote\" text=\"{Note}\"/></Table><FlexBox id=\"objectPage\">\t<Text id=\"note\" text=\"{Note}\"/>\t<Text id=\"noteLanguage\" text=\"{NoteLanguage}\"/></FlexBox><FlexBox id=\"keptAlivePage\">\t<Text id=\"grossAmount\" text=\"{GrossAmount}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
        value: [{
                SalesOrderID: "1",
                Note: "Note 1"
            }, {
                SalesOrderID: "2",
                Note: "Note 2"
            }]
    }).expectChange("listNote", ["Note 1", "Note 2"]).expectChange("note").expectChange("noteLanguage").expectChange("grossAmount");
    return this.createView(assert, sView, oModel).then(function () {
        var aContexts;
        that.expectRequest("SalesOrderList('1')?$select=NoteLanguage", { NoteLanguage: "EN" }).expectChange("note", "Note 1").expectChange("noteLanguage", "EN").expectRequest("SalesOrderList('2')?$select=GrossAmount", { GrossAmount: "2.00" }).expectChange("grossAmount", "2.00");
        oListBinding = that.oView.byId("list").getBinding("items");
        aContexts = oListBinding.getCurrentContexts();
        that.oView.byId("objectPage").setBindingContext(aContexts[0]);
        aContexts[1].setKeepAlive(true);
        that.oView.byId("keptAlivePage").setBindingContext(aContexts[1]);
        return that.waitForChanges(assert, "object page with late property");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$orderby=SalesOrderID desc&$skip=0&$top=100", {
            value: [{
                    SalesOrderID: "2",
                    Note: "Note 2.1"
                }, {
                    SalesOrderID: "1",
                    Note: "Note 1.1"
                }]
        }).expectChange("listNote", ["Note 2", "Note 1.1"]).expectChange("note", "Note 1.1").expectRequest("SalesOrderList('1')?$select=NoteLanguage", { NoteLanguage: "FR" }).expectChange("noteLanguage", "FR");
        oListBinding.sort(new Sorter("SalesOrderID", true));
        return that.waitForChanges(assert, "(1) sort");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$orderby=SalesOrderID desc&$filter=SalesOrderID eq '1'&$skip=0&$top=100", {
            value: [{
                    SalesOrderID: "1",
                    Note: "Note 1.2"
                }]
        }).expectChange("listNote", ["Note 1.2"]).expectChange("note", "Note 1.2").expectRequest("SalesOrderList('1')?$select=NoteLanguage", { NoteLanguage: "DE" }).expectChange("noteLanguage", "DE");
        oListBinding.filter(new Filter("SalesOrderID", FilterOperator.EQ, "1"));
        return that.waitForChanges(assert, "(2) filter");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID" + "&$orderby=SalesOrderID desc&$filter=SalesOrderID eq '1'&foo=bar" + "&$skip=0&$top=100", {
            value: [{
                    SalesOrderID: "1",
                    Note: "Note 1.3"
                }]
        }).expectChange("listNote", ["Note 1.3"]).expectChange("note", "Note 1.3").expectRequest("SalesOrderList('1')?foo=bar&$select=NoteLanguage", { NoteLanguage: "IT" }).expectChange("noteLanguage", "IT");
        oListBinding.changeParameters({ foo: "bar" });
        return that.waitForChanges(assert, "(3) changeParameters");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=Note,SalesOrderID&$skip=0&$top=100", {
            value: [{
                    SalesOrderID: "1",
                    Note: "Note 1.4"
                }, {
                    SalesOrderID: "2",
                    Note: "Note 2.4"
                }]
        }).expectChange("listNote", ["Note 1.4", "Note 2"]).expectChange("note", "Note 1.4").expectRequest("SalesOrderList('1')?$select=NoteLanguage", { NoteLanguage: "ES" }).expectChange("noteLanguage", "ES");
        oListBinding.suspend();
        oListBinding.sort();
        oListBinding.filter();
        oListBinding.changeParameters({ foo: undefined });
        oListBinding.resume();
        return that.waitForChanges(assert, "(4) suspend/resume");
    });
});
QUnit.test("BCP: 2170018878 via Context#delete", function (assert) {
    var aContexts, oDeletePromise0, oDeletePromise1, fnResolveDelete0, fnResolveDelete1, that = this;
    return this.createView(assert).then(function () {
        var oListBinding = that.oModel.bindList("/TEAMS");
        that.expectRequest("TEAMS?$skip=0&$top=100", {
            value: [
                { Team_Id: "Team_01" },
                { Team_Id: "Team_02" }
            ]
        });
        return oListBinding.requestContexts();
    }).then(function (aContexts0) {
        aContexts = aContexts0;
        that.expectRequest({
            method: "DELETE",
            url: "TEAMS('Team_01')"
        }, new Promise(function (resolve) {
            fnResolveDelete0 = resolve;
        }));
        oDeletePromise0 = aContexts[0].delete();
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "DELETE",
            url: "TEAMS('Team_02')"
        }, new Promise(function (resolve) {
            fnResolveDelete1 = resolve;
        }));
        oDeletePromise1 = aContexts[1].delete();
        return that.waitForChanges(assert);
    }).then(function () {
        fnResolveDelete1();
        return oDeletePromise1;
    }).then(function () {
        fnResolveDelete0();
        return oDeletePromise0;
    });
});
QUnit.test("BCP: 2170018878 via ODLB#create", function (assert) {
    var oContext0, oContext1, oListBinding, fnResolveCreate0, fnResolveCreate1, that = this;
    return this.createView(assert).then(function () {
        oListBinding = that.oModel.bindList("/TEAMS");
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "TEAMS"
        }, new Promise(function (resolve) {
            fnResolveCreate0 = resolve.bind(null, {});
        }));
        oContext0 = oListBinding.create({}, true);
        return that.waitForChanges(assert);
    }).then(function () {
        that.expectRequest({
            method: "POST",
            payload: {},
            url: "TEAMS"
        }, new Promise(function (resolve) {
            fnResolveCreate1 = resolve.bind(null, {});
        }));
        oContext1 = oListBinding.create({}, true);
        return that.waitForChanges(assert);
    }).then(function () {
        fnResolveCreate1();
        return oContext1.created();
    }).then(function () {
        fnResolveCreate0();
        return oContext0.created();
    });
});
QUnit.test("BCP: 2170084493", function (assert) {
    var oModel = createSalesOrdersModel({ updateGroupId: "doNotSubmit" }), sView = "<Text id=\"code\" text=\"{Messages/0/code}\"/>", that = this;
    this.expectChange("code", []);
    return this.createView(assert, sView, oModel).then(function () {
        var oBinding = oModel.bindList("/SalesOrderList"), oContext = oBinding.create({
            Messages: [{ code: "foo" }]
        });
        that.expectChange("code", ["foo"]);
        that.oView.setBindingContext(oContext);
        return that.waitForChanges(assert);
    });
});
QUnit.test("BCP: 2170018878 via ODCB#execute", function (assert) {
    var oExecutePromise0, oExecutePromise1, fnResolveOperation0, fnResolveOperation1, that = this;
    return this.createView(assert).then(function () {
        var oOperationBinding = that.oModel.bindContext("/FireEmployee(...)");
        oOperationBinding.setParameter("EmployeeID", "1");
        that.expectRequest({
            method: "POST",
            payload: { EmployeeID: "1" },
            url: "FireEmployee"
        }, new Promise(function (resolve) {
            fnResolveOperation0 = resolve;
        }));
        oExecutePromise0 = oOperationBinding.execute();
        return that.waitForChanges(assert);
    }).then(function () {
        var oOperationBinding = that.oModel.bindContext("/FireEmployee(...)");
        oOperationBinding.setParameter("EmployeeID", "2");
        that.expectRequest({
            method: "POST",
            payload: { EmployeeID: "2" },
            url: "FireEmployee"
        }, new Promise(function (resolve) {
            fnResolveOperation1 = resolve;
        }));
        oExecutePromise1 = oOperationBinding.execute();
        return that.waitForChanges(assert);
    }).then(function () {
        fnResolveOperation1();
        return oExecutePromise1;
    }).then(function () {
        fnResolveOperation0();
        return oExecutePromise0;
    });
});
QUnit.test("CPOUI5ODATAV4-979: rebind and suspend/resume", function (assert) {
    var sView = "<FlexBox binding=\"{/TEAMS('1')}\">\t<t:Table id=\"table\" rows=\"{path : 'TEAM_2_EMPLOYEES', parameters : {$$ownRequest : true}}\">\t\t<Text id=\"age\" text=\"{AGE}\"/>\t\t<Text binding=\"{}\" id=\"name\" text=\"{Name}\"/>\t</t:Table></FlexBox>", that = this;
    this.expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?$skip=0&$top=110", {
        value: [{
                AGE: 30,
                ID: "0",
                Name: "Frederic Fall"
            }]
    }).expectChange("age", ["30"]).expectChange("name", "Frederic Fall");
    return this.createView(assert, sView).then(function () {
        var oTable = that.oView.byId("table"), oListBinding = oTable.getBinding("rows"), oRootBinding = oListBinding.getRootBinding();
        oRootBinding.suspend();
        oListBinding.sort(new Sorter("AGE"));
        that.expectChange("age", null).expectChange("name", null).expectRequest("TEAMS('1')/TEAM_2_EMPLOYEES?$skip=0&$top=110", {
            value: [{
                    AGE: 40,
                    ID: "0",
                    Name: "Frederic Fall *"
                }]
        }).expectChange("age", ["40"]).expectChange("name", "Frederic Fall *");
        oTable.bindRows({ path: "TEAM_2_EMPLOYEES", parameters: { $$ownRequest: true } });
        oRootBinding.resume();
        return that.waitForChanges(assert);
    });
});
[false, true].forEach(function (bNull) {
    QUnit.test("_checkDataStateMessages, bNull=" + bNull, function (assert) {
        var oInput, oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<Input id=\"age\" value=\"{AGE}\"/>", that = this;
        this.expectChange("age");
        return this.createView(assert, sView, oModel).then(function () {
            var oContextBinding = oModel.bindContext("/EMPLOYEES('1')", null, {
                $select: "__CT__FAKE__Message/__FAKE__Messages"
            });
            oInput = that.oView.byId("age");
            that.expectRequest("EMPLOYEES('1')?$select=AGE,ID,__CT__FAKE__Message/__FAKE__Messages", {
                AGE: 18,
                ID: "1",
                __CT__FAKE__Message: {
                    __FAKE__Messages: [{
                            code: "1",
                            message: "That is very young",
                            numericSeverity: 3,
                            target: "AGE",
                            transition: false
                        }]
                }
            }).expectChange("age", "18").expectMessages([{
                    code: "1",
                    message: "That is very young",
                    target: "/EMPLOYEES('1')/AGE",
                    type: "Warning"
                }]);
            oInput.setBindingContext(oContextBinding.getBoundContext());
            return that.waitForChanges(assert);
        }).then(function () {
            return that.checkValueState(assert, oInput, "Warning", "That is very young");
        }).then(function () {
            if (bNull) {
                that.expectChange("age", null);
            }
            else {
                that.expectRequest("EMPLOYEES('2')/AGE", { value: 3 * 7 }).expectChange("age", "21");
            }
            oInput.setBindingContext(bNull ? null : oModel.createBindingContext("/EMPLOYEES('2')"));
            return that.waitForChanges(assert);
        }).then(function () {
            return that.checkValueState(assert, oInput, "None", "");
        });
    });
});
[false, true].forEach(function (bAutoExpandSelect) {
    var sTitle = "ODPrB: /SalesOrderList/$count, autoExpandSelect=" + bAutoExpandSelect;
    QUnit.test(sTitle, function (assert) {
        var sEntityContainer = "/com.sap.gateway.default.zui5_epm_sample.v0002.Container", oListBinding, oModel = createSalesOrdersModel({ autoExpandSelect: bAutoExpandSelect }), sView = "<Text id=\"count\" text=\"{/SalesOrderList/$count}\"/>", that = this;
        this.expectRequest("SalesOrderList/$count", 42).expectChange("count", "42");
        return this.createView(assert, sView, oModel).then(function () {
            that.expectRequest("SalesOrderList/$count", 1234).expectChange("count", "1,234");
            that.oView.byId("count").getBinding("text").refresh();
            return that.waitForChanges(assert, "1");
        }).then(function () {
            return oModel.getMetaModel().requestObject("/");
        }).then(function () {
            oListBinding = oModel.bindList("/SalesOrderList");
            that.expectRequest("SalesOrderList/$count", -1).expectRequest("SalesOrderList/$count", 42).expectCanceledError("Failed to read path /SalesOrderList/$count", sODPrB + ": /SalesOrderList/$count is ignoring response from inactive cache: " + sSalesOrderService + "SalesOrderList/$count").expectChange("count", "42");
            return Promise.all([
                oListBinding.getHeaderContext().requestSideEffects([
                    sEntityContainer + "/SalesOrderList/$count"
                ]),
                oListBinding.getHeaderContext().requestSideEffects([
                    sEntityContainer + "/SalesOrderList/$count"
                ]),
                that.waitForChanges(assert, "2")
            ]);
        }).then(function () {
            var oContext = oModel.createBindingContext("/SalesOrderList"), oCountBinding0 = oModel.bindProperty("/SalesOrderList/$count", null, {
                $apply: "A.P.P.L.E.",
                $filter: "GrossAmount gt 123",
                $search: "covfefe"
            }), oCountBinding1 = oModel.bindProperty("$count", oContext, {
                $apply: "A.P.P.L.E.",
                $filter: "GrossAmount gt 456",
                $search: "covfefe"
            }), oCountBinding2 = oModel.bindProperty("$count", null, {
                $apply: "A.P.P.L.E.",
                $filter: "GrossAmount gt 789",
                $search: "covfefe"
            });
            oCountBinding2.setContext(oContext);
            that.expectRequest("SalesOrderList/$count?$apply=A.P.P.L.E.&$filter=GrossAmount gt 123" + "&$search=covfefe", 123).expectRequest("SalesOrderList/$count?$apply=A.P.P.L.E.&$filter=GrossAmount gt 456" + "&$search=covfefe", 456).expectRequest("SalesOrderList/$count?$apply=A.P.P.L.E.&$filter=GrossAmount gt 789" + "&$search=covfefe", 789);
            return Promise.all([
                oCountBinding0.requestValue(),
                oCountBinding1.requestValue(),
                oCountBinding2.requestValue(),
                that.waitForChanges(assert, "3")
            ]);
        }).then(function (aResults) {
            assert.strictEqual(aResults[0], 123);
            assert.strictEqual(aResults[1], 456);
            assert.strictEqual(aResults[2], 789);
            that.expectRequest("SalesOrderList/$count", 1234).expectRequest("SalesOrderList/$count?$apply=A.P.P.L.E.&$filter=GrossAmount gt 123" + "&$search=covfefe", 101).expectChange("count", "1,234");
            return Promise.all([
                oListBinding.getHeaderContext().requestSideEffects([
                    sEntityContainer + "/SalesOrderList"
                ]),
                that.waitForChanges(assert, "4")
            ]);
        });
    });
});
QUnit.test("ODPaB#changeParameters: object values", function (assert) {
    var oModel = createSalesOrdersModel({ autoExpandSelect: true }), that = this;
    return this.createView(assert, "", oModel).then(function () {
        var mExpand = { SO_2_BP: { $select: ["BusinessPartnerRole"] } }, aSelect = ["Note"], oContextBinding = oModel.bindContext("/SalesOrderList('1')", null, {
            $expand: mExpand,
            $select: aSelect
        });
        mExpand.SO_2_BP.$select.push("CompanyName");
        aSelect.push("NoteLanguage");
        assert.throws(function () {
            oContextBinding.changeParameters({ $expand: mExpand, $select: aSelect });
        }, /Cannot change \$expand parameter in auto-\$expand\/\$select mode/);
        return that.waitForChanges(assert);
    }).then(function () {
        var mExpand = { SO_2_BP: { $select: ["BusinessPartnerRole"] } }, aSelect = ["Note"], oListBinding = oModel.bindList("/SalesOrderList", null, [], [], {
            $expand: mExpand,
            $select: aSelect
        });
        mExpand.SO_2_BP.$select.push("CompanyName");
        aSelect.push("NoteLanguage");
        assert.throws(function () {
            oListBinding.changeParameters({ $expand: mExpand, $select: aSelect });
        }, /Cannot change \$expand parameter in auto-\$expand\/\$select mode/);
        return that.waitForChanges(assert);
    });
});
QUnit.test("Do not log drill-down errors for properties w/o permissions", function (assert) {
    var sView = "<FlexBox id=\"form\" binding=\"{/TEAMS('TEAM_01')}\">\t<Text id=\"name\" text=\"{Name}\"/>\t<Text id=\"budget\" text=\"{Budget}\"/>\t<Text id=\"budgetCurency\" text=\"{BudgetCurrency}\"/></FlexBox>";
    this.expectRequest("TEAMS('TEAM_01')", {
        Name: "Business Suite",
        "Budget@Core.Permissions": 0,
        "BudgetCurrency@Core.Permissions": "None"
    }).expectChange("name", "Business Suite").expectChange("budget", null).expectChange("budgetCurency", null);
    return this.createView(assert, sView);
});
QUnit.test("Do not refresh destroyed dependent bindings", function (assert) {
    var oModel = createTeaBusiModel({ autoExpandSelect: true }), sView = "<IconTabBar id=\"employees\" items=\"{/EMPLOYEES}\">\t<items>\t\t<IconTabFilter key=\"foo\">\t\t\t<Text id=\"id\" text=\"{ID}\"/>\t\t\t<Table items=\"{path : 'EMPLOYEE_2_EQUIPMENTS', templateShareable : false}\">\t\t\t\t<Text text=\"{Name}\"/>\t\t\t</Table>\t\t</IconTabFilter>\t</items></IconTabBar>", that = this;
    this.expectRequest("EMPLOYEES?$select=ID" + "&$expand=EMPLOYEE_2_EQUIPMENTS($select=Category,ID,Name)&$skip=0&$top=100", {
        value: [{
                ID: "1",
                EMPLOYEE_2_EQUIPMENTS: []
            }]
    }).expectChange("id", ["1"]);
    return this.createView(assert, sView, oModel).then(function () {
        that.expectRequest("EMPLOYEES?$select=ID" + "&$expand=EMPLOYEE_2_EQUIPMENTS($select=Category,ID,Name)&$skip=0&$top=100", {
            value: [{
                    ID: "2",
                    EMPLOYEE_2_EQUIPMENTS: []
                }]
        }).expectChange("id", ["2"]);
        return Promise.all([
            that.oView.byId("employees").getBinding("items").requestRefresh(),
            that.waitForChanges(assert)
        ]);
    });
});
QUnit.test("CPOUI5ODATAV4-1206: $$inheritExpandSelect with $select", function (assert) {
    var sAction = "com.sap.gateway.default.zui5_epm_sample.v0002.SalesOrder_Confirm", oModel = createSalesOrdersModel({ autoExpandSelect: true }), sView = "<Table id=\"table\" items=\"{/SalesOrderList}\">\t<Text id=\"salesOrderID\" text=\"{SalesOrderID}\"/>\t<Text id=\"lifecycleStatus\" text=\"{LifecycleStatus}\"/></Table><FlexBox id=\"objectPage\">\t<Text id=\"note\" text=\"{Note}\"/></FlexBox>", that = this;
    this.expectRequest("SalesOrderList?$select=LifecycleStatus,SalesOrderID&$skip=0&$top=100", {
        value: [{ SalesOrderID: "42", LifecycleStatus: "A" }]
    }).expectChange("salesOrderID", ["42"]).expectChange("lifecycleStatus", ["A"]).expectChange("note");
    return this.createView(assert, sView, oModel).then(function () {
        var oAction = oModel.bindContext(sAction + "(...)", that.oView.byId("table").getItems()[0].getBindingContext(), { $$inheritExpandSelect: true, $select: "Note,Messages,LifecycleStatus" });
        that.expectRequest({
            method: "POST",
            url: "SalesOrderList('42')/" + sAction + "?$select=LifecycleStatus,Messages," + "Note,SalesOrderID",
            payload: {}
        }, { SalesOrderID: "42", LifecycleStatus: "B", Messages: [], Note: "some note" }).expectChange("lifecycleStatus", ["B"]);
        return Promise.all([
            oAction.execute(),
            that.waitForChanges(assert, "(1) execute")
        ]);
    }).then(function (aResults) {
        that.expectChange("note", "some note");
        that.oView.byId("objectPage").setBindingContext(aResults[0]);
        return that.waitForChanges(assert, "(2) consume return value context");
    }).then(function () {
        that.expectRequest("SalesOrderList('42')?$select=LifecycleStatus,Messages,Note" + ",SalesOrderID", {
            SalesOrderID: "42",
            LifecycleStatus: "B",
            Messages: [],
            Note: "changed note"
        }).expectChange("note", "changed note");
        that.oView.byId("objectPage").getBindingContext().refresh();
        return that.waitForChanges(assert, "(3) refresh return value context");
    }).then(function () {
        that.expectRequest("SalesOrderList('42')?$select=LifecycleStatus,SalesOrderID", {
            SalesOrderID: "42",
            LifecycleStatus: "C"
        }).expectChange("lifecycleStatus", ["C"]);
        that.oView.byId("table").getItems()[0].getBindingContext().refresh();
        return that.waitForChanges(assert, "(4) refresh row context");
    }).then(function () {
        that.expectRequest("SalesOrderList?$select=LifecycleStatus,SalesOrderID" + "&$skip=0&$top=100", {
            value: [{ SalesOrderID: "42", LifecycleStatus: "D" }]
        }).expectChange("lifecycleStatus", ["D"]);
        that.oView.byId("table").getBinding("items").refresh();
        return that.waitForChanges(assert, "(5) refresh table");
    });
});