{
	"namespacesToInterfaces": {
		"BusyIndicator": true,
		"RuleEngineOpaAssertions": true
	},

	"badSymbols": [

		/**
		 * The followong namespaces don't exist at runtime. They're only documented
		 * to document the relationship between module and implemented jQuery plugin.
		 *
		 * To avoid dtslint errors ('no-empty-interfaces'), they're suppressed
		 * in the dtslint generation.
		 */
		"module:sap/ui/dom/jquery/Aria",
		"module:sap/ui/dom/jquery/control",
		"module:sap/ui/dom/jquery/cursorPos",
		"module:sap/ui/dom/jquery/Focusable",
		"module:sap/ui/dom/jquery/getSelectedText",
		"module:sap/ui/dom/jquery/hasTabIndex",
		"module:sap/ui/dom/jquery/parentByAttribute",
		"module:sap/ui/dom/jquery/rect",
		"module:sap/ui/dom/jquery/rectContains",
		"module:sap/ui/dom/jquery/scrollLeftRTL",
		"module:sap/ui/dom/jquery/scrollRightRTL",
		"module:sap/ui/dom/jquery/Selection",
		"module:sap/ui/dom/jquery/Selectors",
		"module:sap/ui/dom/jquery/selectText",
		"module:sap/ui/dom/jquery/zIndex",

		/**
		 * Suppress the generation of jQuery from the api.json as it's already contained in the preamble
		 */
		"jQuery",
		"jQuery.Event"
	],

	"typeTyposMap": {
		"jQuery": "Object",
		"jQuery.Event": "Object",
		"jQuery.promise": "Object",

		"DomNode": "Element",
		"DOMNode": "Element",
		"DOMRef": "Element",
		"DomRef": "Element",
		"domRef": "Element",
		"DOMElement": "Element",

		"Generator": "any"
	},

	"overlays": {
		"sap.ui.core": [
			{
				"name": "sap.ui.core.UIArea",
				"methods": [
					{
						"name": "getId",
						"returnValue": {
							"type": "string"
						}
					}
				]
			},
			{
				"name": "sap.ui.core.format.DateFormat.DateTimeWithTimezone",
				"methods": [
					{
						"name": "parse",
						"static": true,
						"returnValue": {
							"type": {
								"kind": "NativeTSTypeExpression",
								"type": "[Date|import('sap/ui/core/date/UI5Date').default|undefined, string|undefined]|null"
							}
						}
					}
				]
			},
			{
				"name": "sap.ui.core.ComponentContainer",
				"ui5-metadata": {
					"properties": [
						/**
						 * The following 4 empty objects are needed in order to correctly overwrite the 'type'
						 * property of the 5th element within this array. This is due to the fact that arrays
						 * are merged by merging the elements that appear at the same index and not handled as
						 * a map.
						 */
						{},
						{},
						{},
						{},
						{
							"name": "settings",
							"type": "sap.ui.core.$ComponentSettings"
						}
					]
				},
				"methods": [
					{
						"name": "getSettings",
						"returnValue": {
							"type": "sap.ui.core.$ComponentSettings"
						}
					},
					{
						"name": "setSettings",
						"parameters": [
							{
								"name": "oSettings",
								"type": "sap.ui.core.$ComponentSettings"
							}
						]
					}
				]
			},
			{
				"name": "sap.ui.core.Component",
				"methods": [
					{
						"name": "create",
						"static": true,
						"parameters": [
							{
								"name": "mOptions",
								"parameterProperties": {
									"settings": {
										"name": "settings",
										"type": "sap.ui.core.$ComponentSettings"
									}
								}
							}
						]
					},
					{
						"name": "createComponent",
						"parameters": [
							{
								"name": "vUsage",
								"parameterProperties": {
									"settings": {
										"name": "settings",
										"type": "sap.ui.core.$ComponentSettings"
									}
								}
							}
						]
					}
				]
			},
			{
				"name": "sap.ui.core.mvc.ControllerExtension",
				"methods": [
					{
						"name": "override",
						"static": true,
						"typeParameters": [
							{
								"name": "TheExtension",
								"type": {
									"kind": "NativeTSTypeExpression",
									"type": "new () => ControllerExtension"
								}
							},
							{
								"name": "AddtlProps",
								"type": "object"
							}
						],
						"parameters": [
							{
								"name": "this",
								"type": {
									"kind": "TypeReference",
									"typeName": "TheExtension"
								},
								"description": ""
							},
							{
								"name": "customExtension",
								"type": {
									"kind": "TypeReference",
									"typeName": "AddtlProps"
								},
								"description": "The custom extension definition"
							}
						],
						"returnValue": {
							"type": {
								"kind": "NativeTSTypeExpression",
								"type": "new () => InstanceType<TheExtension> & AddtlProps"
							},
							"description": "The adapted controller extension class"
						}
					},
					{
						"name": "use",
						"static": true,
						"visibility": "public",
						"description": "A marker method for applying controller extensions to controller class members in TypeScript code.\nThis method is only used to make TypeScript usage compatible to the UI5 runtime behavior, where an extension *class* is assigned when the controller is defined, but each controller instance gets an *instance* of this extension. This method call is removed in the class transformer when the ES class is transformed to the traditional UI5 class definition syntax.\n\nTo allow for proper removal, it may only be called directly on the base class <code>ControllerExtension</code>, at the place where a controller extension is assigned to a member property of the new controller class. The class transformation then removes this call. If it is not removed because it is used in any other way, then it throws an error at runtime.\n\nUsage example:<pre>import Routing from \"sap/fe/core/controllerextensions/Routing\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\n...\nexport default class App extends Controller {\n   routing = ControllerExtension.use(Routing);\n</pre>\nUsage example with overriding extension callbacks:<pre>import Routing from \"sap/fe/core/controllerextensions/Routing\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\n...\nexport default class App extends Controller {\n   routing = ControllerExtension.use(Routing.override({\n      ...\n   }));\n</pre>",
						"typeParameters": [
							{
								"name": "TheExtension",
								"type": "sap.ui.core.mvc.ControllerExtension"
							}
						],
						"parameters": [
							{
								"name": "extensionClass",
								"type": {
									"kind": "NativeTSTypeExpression",
									"type": "new () => TheExtension"
								},
								"description": "The ControllerExtension to use"
							}
						],
						"returnValue": {
							"type": {
								"kind": "TypeReference",
								"typeName": "TheExtension"
							},
							"description": "An instance of the given <code>ControllerExtension</code>. <b>NOTE:</b> this is only a dummy return type for proper usage in TypeScript. This method does not actually return an instance of <code>ControllerExtension</code>, but only throws an error at runtime. The sole purpose of this method is to mimic the actual runtime behavior where a *class* is given when a controller is defined, but an *instance* is present in each controller instance."
						}
					}
				]
			},
			{
				"name": "sap.ui.base.ManagedObject",
				"methods": [
					{
						"name": "applySettings",
						"parameters": [
							{
								"name": "mSettings",
								"type": "sap.ui.base.$ManagedObjectSettings"
							}
						]
					}
				]
			},
			{
				"name": "sap.ui.base.Object",
				"methods": [
					{
						"name": "isA",
						"returnValue": {
							"type": {
								"kind": "NativeTSTypeExpression",
								"type": "this is T"
							}
						},
						"typeParameters": [
							{
								"name": "T",
								"type": "sap.ui.base.Object",
								"default": "sap.ui.base.Object"
							}
						]
					},
					{
						"name": "isA",
						"static": true,
						"returnValue": {
							"type": {
								"kind": "NativeTSTypeExpression",
								"type": "oObject is T"
							}
						},
						"typeParameters": [
							{
								"name": "T",
								"type": "sap.ui.base.Object",
								"default": "sap.ui.base.Object"
							}
						]
					}
				]
			},
			{
				"name": "sap.ui.base.Event",
				"methods": [
					{
						"name": "getParameter",
						"typeParameters": [
							{
								"name": "ParamName",
								"type": {
									"kind": "NativeTSTypeExpression",
									"type": "keyof ParamsType"
								}
							}
						],
						"returnValue": {
							"type": {
								"kind": "NativeTSTypeExpression",
								"type": "ParamsType[ParamName]"
							}
						},
						"parameters": [
							{
								"name": "sName",
								"type": "ParamName"
							}
						]
					}
				]
			},
			{
				"name": "sap.ui.test.Opa",
				"properties": [
					{
						"name": "and",
						"type": "Omit<this, \"and\">"
					}
				]
			},
			{
				"name": "sap.ui.test.Opa5",
				"properties": [
					{
						"name": "and",
						"type": "Omit<this, \"and\">"
					}
				]
			}
		]
	}
}
